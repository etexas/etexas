# author ablatt

# generates a list of Vehicle_Trajectory_Information from the playback_data_model
# keep in mind that each vehicle will be checked against the detectors generated by gen_detector_list
# class Vehicle_Trajectory_Information:
#	vehicle_id = "your id here"
#	frame_id = -1
#	global_time = -1
#	x_offset_in_feet = 0.0
#	y_offset_in_feet = 0.0
#	latitude = -1000.0
#	longitude = -1000.0
#	speed_in_miles_per_hour = 0.0
#	acceleration_in_miles_per_hour_squared = 0.0
#	vehicle_length_in_feet = -1.0
#	vehicle_width_in_feet = -1.0
#	lane_id = -1
def gen_vehicle_data():
	import playback_data_model as structs
	pass

# generates a list of Detector_Internal from playback_data_model
# class Detector_Internal:
#	detector_number = -1
#	bottom_left_x = -1.0
#	bottom_left_y = -1.0
#	top_right_x = -1.0
#	top_right_y = -1.0
def gen_detector_list():
	import playback_data_model as structs
	pass

# generates a Map_Data from the playback_data_model
# class Map_Data:
#	reference_x = 0.0
#	reference_y = 0.0
#	lane_data = [] # should contain only Lane_Data instances
# 
# class Lane_Data:
#	lane_id = -1
#	is_egress = False
#	lane_width_in_feet = -1.0
#	lane_has_right_turn = False
#	lane_has_right_turn_on_red = False
#	lane_has_left_turn = False
#	lane_has_left_turn_on_red = False
#	lane_has_u_turn = False
#	center_points = [] # list of lists in the form [x, y] where x and y are in feet
#	widths_from_center = [] # in feet
#	connector_lanes = [] # list of lane_ids
def gen_map():
	import playback_data_model as structs
	pass

def gen_signal_list():
	pass
