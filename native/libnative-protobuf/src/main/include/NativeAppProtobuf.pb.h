// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NativeAppProtobuf.proto

#ifndef PROTOBUF_NativeAppProtobuf_2eproto__INCLUDED
#define PROTOBUF_NativeAppProtobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace etexas {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

class BundleWrapper;
class InitBundle;
class ShutdownBundle;
class AppInitConfig;
class OutputBundle;
class VehicleCommandData;
class SignalCommandData;
class LogData;
class InputBundle;
class RseDevice;
class ObuDevice;
class VehicleData;
class Tx;
class WSMIndication;
class AppDevMap;
class RseModelData;
class SignalManagerEntry;
class SignalManagerData;
class SignalManagerData_SignalIndicationData;
class DetectorManagerData;
class DetectorManagerData_DetectorData;
class DetectorManagerData_DetectorData_DetectorEventData;
class DetectorManagerData_DetectorData_PolygonData;
class DetectorManagerEntry;
class LaneManagerData;
class LaneManagerData_LaneData;
class LaneManagerData_LaneData_LaneNode;
class LaneManagerData_LaneData_LaneMovement;
class LaneManagerEntry;

enum VehicleCommandData_VehicleCommandClass {
  VehicleCommandData_VehicleCommandClass_DESTINATION = 0,
  VehicleCommandData_VehicleCommandClass_LANE_CHANGE = 1,
  VehicleCommandData_VehicleCommandClass_SPEED = 2
};
bool VehicleCommandData_VehicleCommandClass_IsValid(int value);
const VehicleCommandData_VehicleCommandClass VehicleCommandData_VehicleCommandClass_VehicleCommandClass_MIN = VehicleCommandData_VehicleCommandClass_DESTINATION;
const VehicleCommandData_VehicleCommandClass VehicleCommandData_VehicleCommandClass_VehicleCommandClass_MAX = VehicleCommandData_VehicleCommandClass_SPEED;
const int VehicleCommandData_VehicleCommandClass_VehicleCommandClass_ARRAYSIZE = VehicleCommandData_VehicleCommandClass_VehicleCommandClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleCommandData_VehicleCommandClass_descriptor();
inline const ::std::string& VehicleCommandData_VehicleCommandClass_Name(VehicleCommandData_VehicleCommandClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleCommandData_VehicleCommandClass_descriptor(), value);
}
inline bool VehicleCommandData_VehicleCommandClass_Parse(
    const ::std::string& name, VehicleCommandData_VehicleCommandClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleCommandData_VehicleCommandClass>(
    VehicleCommandData_VehicleCommandClass_descriptor(), name, value);
}
enum VehicleData_VehicleType {
  VehicleData_VehicleType_CAR = 0,
  VehicleData_VehicleType_BUS = 1,
  VehicleData_VehicleType_TRACTOR_TRAILER = 2
};
bool VehicleData_VehicleType_IsValid(int value);
const VehicleData_VehicleType VehicleData_VehicleType_VehicleType_MIN = VehicleData_VehicleType_CAR;
const VehicleData_VehicleType VehicleData_VehicleType_VehicleType_MAX = VehicleData_VehicleType_TRACTOR_TRAILER;
const int VehicleData_VehicleType_VehicleType_ARRAYSIZE = VehicleData_VehicleType_VehicleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleData_VehicleType_descriptor();
inline const ::std::string& VehicleData_VehicleType_Name(VehicleData_VehicleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleData_VehicleType_descriptor(), value);
}
inline bool VehicleData_VehicleType_Parse(
    const ::std::string& name, VehicleData_VehicleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleData_VehicleType>(
    VehicleData_VehicleType_descriptor(), name, value);
}
enum SignalManagerData_SignalIndicationData_Color {
  SignalManagerData_SignalIndicationData_Color_GREEN = 0,
  SignalManagerData_SignalIndicationData_Color_RED = 1,
  SignalManagerData_SignalIndicationData_Color_YELLOW = 2,
  SignalManagerData_SignalIndicationData_Color_NONE = 3
};
bool SignalManagerData_SignalIndicationData_Color_IsValid(int value);
const SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData_Color_Color_MIN = SignalManagerData_SignalIndicationData_Color_GREEN;
const SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData_Color_Color_MAX = SignalManagerData_SignalIndicationData_Color_NONE;
const int SignalManagerData_SignalIndicationData_Color_Color_ARRAYSIZE = SignalManagerData_SignalIndicationData_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_Color_descriptor();
inline const ::std::string& SignalManagerData_SignalIndicationData_Color_Name(SignalManagerData_SignalIndicationData_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignalManagerData_SignalIndicationData_Color_descriptor(), value);
}
inline bool SignalManagerData_SignalIndicationData_Color_Parse(
    const ::std::string& name, SignalManagerData_SignalIndicationData_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignalManagerData_SignalIndicationData_Color>(
    SignalManagerData_SignalIndicationData_Color_descriptor(), name, value);
}
enum SignalManagerData_SignalIndicationData_Type {
  SignalManagerData_SignalIndicationData_Type_BALL = 0,
  SignalManagerData_SignalIndicationData_Type_LEFT_ARROW = 1,
  SignalManagerData_SignalIndicationData_Type_RIGHT_ARROW = 2,
  SignalManagerData_SignalIndicationData_Type_STRAIGHT_ARROW = 3,
  SignalManagerData_SignalIndicationData_Type_UTURN_ARROW = 4,
  SignalManagerData_SignalIndicationData_Type_STOP_SIGN = 5,
  SignalManagerData_SignalIndicationData_Type_YIELD_SIGN = 6,
  SignalManagerData_SignalIndicationData_Type_UNCONTROLLED = 7,
  SignalManagerData_SignalIndicationData_Type_UNKNOWN = 8
};
bool SignalManagerData_SignalIndicationData_Type_IsValid(int value);
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData_Type_Type_MIN = SignalManagerData_SignalIndicationData_Type_BALL;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData_Type_Type_MAX = SignalManagerData_SignalIndicationData_Type_UNKNOWN;
const int SignalManagerData_SignalIndicationData_Type_Type_ARRAYSIZE = SignalManagerData_SignalIndicationData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_Type_descriptor();
inline const ::std::string& SignalManagerData_SignalIndicationData_Type_Name(SignalManagerData_SignalIndicationData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignalManagerData_SignalIndicationData_Type_descriptor(), value);
}
inline bool SignalManagerData_SignalIndicationData_Type_Parse(
    const ::std::string& name, SignalManagerData_SignalIndicationData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignalManagerData_SignalIndicationData_Type>(
    SignalManagerData_SignalIndicationData_Type_descriptor(), name, value);
}
enum SignalManagerData_SignalIndicationData_State {
  SignalManagerData_SignalIndicationData_State_STEADY = 0,
  SignalManagerData_SignalIndicationData_State_FLASHING = 1,
  SignalManagerData_SignalIndicationData_State_SOFT = 2
};
bool SignalManagerData_SignalIndicationData_State_IsValid(int value);
const SignalManagerData_SignalIndicationData_State SignalManagerData_SignalIndicationData_State_State_MIN = SignalManagerData_SignalIndicationData_State_STEADY;
const SignalManagerData_SignalIndicationData_State SignalManagerData_SignalIndicationData_State_State_MAX = SignalManagerData_SignalIndicationData_State_SOFT;
const int SignalManagerData_SignalIndicationData_State_State_ARRAYSIZE = SignalManagerData_SignalIndicationData_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_State_descriptor();
inline const ::std::string& SignalManagerData_SignalIndicationData_State_Name(SignalManagerData_SignalIndicationData_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignalManagerData_SignalIndicationData_State_descriptor(), value);
}
inline bool SignalManagerData_SignalIndicationData_State_Parse(
    const ::std::string& name, SignalManagerData_SignalIndicationData_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignalManagerData_SignalIndicationData_State>(
    SignalManagerData_SignalIndicationData_State_descriptor(), name, value);
}
enum LaneManagerData_LaneData_LaneMovement_Movement {
  LaneManagerData_LaneData_LaneMovement_Movement_LEFT_TURN = 0,
  LaneManagerData_LaneData_LaneMovement_Movement_RIGHT_TURN = 1,
  LaneManagerData_LaneData_LaneMovement_Movement_STRAIGHT = 2,
  LaneManagerData_LaneData_LaneMovement_Movement_RIGHT_TURN_ON_RED = 3,
  LaneManagerData_LaneData_LaneMovement_Movement_LEFT_TURN_ON_RED = 4,
  LaneManagerData_LaneData_LaneMovement_Movement_U_TURN = 5
};
bool LaneManagerData_LaneData_LaneMovement_Movement_IsValid(int value);
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement_Movement_Movement_MIN = LaneManagerData_LaneData_LaneMovement_Movement_LEFT_TURN;
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement_Movement_Movement_MAX = LaneManagerData_LaneData_LaneMovement_Movement_U_TURN;
const int LaneManagerData_LaneData_LaneMovement_Movement_Movement_ARRAYSIZE = LaneManagerData_LaneData_LaneMovement_Movement_Movement_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneManagerData_LaneData_LaneMovement_Movement_descriptor();
inline const ::std::string& LaneManagerData_LaneData_LaneMovement_Movement_Name(LaneManagerData_LaneData_LaneMovement_Movement value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneManagerData_LaneData_LaneMovement_Movement_descriptor(), value);
}
inline bool LaneManagerData_LaneData_LaneMovement_Movement_Parse(
    const ::std::string& name, LaneManagerData_LaneData_LaneMovement_Movement* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneManagerData_LaneData_LaneMovement_Movement>(
    LaneManagerData_LaneData_LaneMovement_Movement_descriptor(), name, value);
}
enum LaneManagerData_LaneData_Type {
  LaneManagerData_LaneData_Type_UNSET = 0,
  LaneManagerData_LaneData_Type_OUTBOUND = 1,
  LaneManagerData_LaneData_Type_INBOUND = 2
};
bool LaneManagerData_LaneData_Type_IsValid(int value);
const LaneManagerData_LaneData_Type LaneManagerData_LaneData_Type_Type_MIN = LaneManagerData_LaneData_Type_UNSET;
const LaneManagerData_LaneData_Type LaneManagerData_LaneData_Type_Type_MAX = LaneManagerData_LaneData_Type_INBOUND;
const int LaneManagerData_LaneData_Type_Type_ARRAYSIZE = LaneManagerData_LaneData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneManagerData_LaneData_Type_descriptor();
inline const ::std::string& LaneManagerData_LaneData_Type_Name(LaneManagerData_LaneData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneManagerData_LaneData_Type_descriptor(), value);
}
inline bool LaneManagerData_LaneData_Type_Parse(
    const ::std::string& name, LaneManagerData_LaneData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneManagerData_LaneData_Type>(
    LaneManagerData_LaneData_Type_descriptor(), name, value);
}
// ===================================================================

class BundleWrapper : public ::google::protobuf::Message {
 public:
  BundleWrapper();
  virtual ~BundleWrapper();

  BundleWrapper(const BundleWrapper& from);

  inline BundleWrapper& operator=(const BundleWrapper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BundleWrapper& default_instance();

  void Swap(BundleWrapper* other);

  // implements Message ----------------------------------------------

  BundleWrapper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BundleWrapper& from);
  void MergeFrom(const BundleWrapper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 execId = 1;
  inline bool has_execid() const;
  inline void clear_execid();
  static const int kExecIdFieldNumber = 1;
  inline ::google::protobuf::int64 execid() const;
  inline void set_execid(::google::protobuf::int64 value);

  // optional .etexas.InitBundle initBundle = 2;
  inline bool has_initbundle() const;
  inline void clear_initbundle();
  static const int kInitBundleFieldNumber = 2;
  inline const ::etexas::InitBundle& initbundle() const;
  inline ::etexas::InitBundle* mutable_initbundle();
  inline ::etexas::InitBundle* release_initbundle();
  inline void set_allocated_initbundle(::etexas::InitBundle* initbundle);

  // optional .etexas.InputBundle inputBundle = 3;
  inline bool has_inputbundle() const;
  inline void clear_inputbundle();
  static const int kInputBundleFieldNumber = 3;
  inline const ::etexas::InputBundle& inputbundle() const;
  inline ::etexas::InputBundle* mutable_inputbundle();
  inline ::etexas::InputBundle* release_inputbundle();
  inline void set_allocated_inputbundle(::etexas::InputBundle* inputbundle);

  // repeated .etexas.OutputBundle outputBundle = 4;
  inline int outputbundle_size() const;
  inline void clear_outputbundle();
  static const int kOutputBundleFieldNumber = 4;
  inline const ::etexas::OutputBundle& outputbundle(int index) const;
  inline ::etexas::OutputBundle* mutable_outputbundle(int index);
  inline ::etexas::OutputBundle* add_outputbundle();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::OutputBundle >&
      outputbundle() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::OutputBundle >*
      mutable_outputbundle();

  // optional .etexas.ShutdownBundle shutdownBundle = 5;
  inline bool has_shutdownbundle() const;
  inline void clear_shutdownbundle();
  static const int kShutdownBundleFieldNumber = 5;
  inline const ::etexas::ShutdownBundle& shutdownbundle() const;
  inline ::etexas::ShutdownBundle* mutable_shutdownbundle();
  inline ::etexas::ShutdownBundle* release_shutdownbundle();
  inline void set_allocated_shutdownbundle(::etexas::ShutdownBundle* shutdownbundle);

  // @@protoc_insertion_point(class_scope:etexas.BundleWrapper)
 private:
  inline void set_has_execid();
  inline void clear_has_execid();
  inline void set_has_initbundle();
  inline void clear_has_initbundle();
  inline void set_has_inputbundle();
  inline void clear_has_inputbundle();
  inline void set_has_shutdownbundle();
  inline void clear_has_shutdownbundle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 execid_;
  ::etexas::InitBundle* initbundle_;
  ::etexas::InputBundle* inputbundle_;
  ::google::protobuf::RepeatedPtrField< ::etexas::OutputBundle > outputbundle_;
  ::etexas::ShutdownBundle* shutdownbundle_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static BundleWrapper* default_instance_;
};
// -------------------------------------------------------------------

class InitBundle : public ::google::protobuf::Message {
 public:
  InitBundle();
  virtual ~InitBundle();

  InitBundle(const InitBundle& from);

  inline InitBundle& operator=(const InitBundle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitBundle& default_instance();

  void Swap(InitBundle* other);

  // implements Message ----------------------------------------------

  InitBundle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitBundle& from);
  void MergeFrom(const InitBundle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .etexas.AppInitConfig appInitConfig = 2;
  inline int appinitconfig_size() const;
  inline void clear_appinitconfig();
  static const int kAppInitConfigFieldNumber = 2;
  inline const ::etexas::AppInitConfig& appinitconfig(int index) const;
  inline ::etexas::AppInitConfig* mutable_appinitconfig(int index);
  inline ::etexas::AppInitConfig* add_appinitconfig();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::AppInitConfig >&
      appinitconfig() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::AppInitConfig >*
      mutable_appinitconfig();

  // @@protoc_insertion_point(class_scope:etexas.InitBundle)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::etexas::AppInitConfig > appinitconfig_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static InitBundle* default_instance_;
};
// -------------------------------------------------------------------

class ShutdownBundle : public ::google::protobuf::Message {
 public:
  ShutdownBundle();
  virtual ~ShutdownBundle();

  ShutdownBundle(const ShutdownBundle& from);

  inline ShutdownBundle& operator=(const ShutdownBundle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutdownBundle& default_instance();

  void Swap(ShutdownBundle* other);

  // implements Message ----------------------------------------------

  ShutdownBundle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShutdownBundle& from);
  void MergeFrom(const ShutdownBundle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etexas.ShutdownBundle)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static ShutdownBundle* default_instance_;
};
// -------------------------------------------------------------------

class AppInitConfig : public ::google::protobuf::Message {
 public:
  AppInitConfig();
  virtual ~AppInitConfig();

  AppInitConfig(const AppInitConfig& from);

  inline AppInitConfig& operator=(const AppInitConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppInitConfig& default_instance();

  void Swap(AppInitConfig* other);

  // implements Message ----------------------------------------------

  AppInitConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppInitConfig& from);
  void MergeFrom(const AppInitConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appId = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // required int64 devId = 2;
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 2;
  inline ::google::protobuf::int64 devid() const;
  inline void set_devid(::google::protobuf::int64 value);

  // required string commandLine = 3;
  inline bool has_commandline() const;
  inline void clear_commandline();
  static const int kCommandLineFieldNumber = 3;
  inline const ::std::string& commandline() const;
  inline void set_commandline(const ::std::string& value);
  inline void set_commandline(const char* value);
  inline void set_commandline(const char* value, size_t size);
  inline ::std::string* mutable_commandline();
  inline ::std::string* release_commandline();
  inline void set_allocated_commandline(::std::string* commandline);

  // @@protoc_insertion_point(class_scope:etexas.AppInitConfig)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_commandline();
  inline void clear_has_commandline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* appid_;
  ::google::protobuf::int64 devid_;
  ::std::string* commandline_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static AppInitConfig* default_instance_;
};
// -------------------------------------------------------------------

class OutputBundle : public ::google::protobuf::Message {
 public:
  OutputBundle();
  virtual ~OutputBundle();

  OutputBundle(const OutputBundle& from);

  inline OutputBundle& operator=(const OutputBundle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputBundle& default_instance();

  void Swap(OutputBundle* other);

  // implements Message ----------------------------------------------

  OutputBundle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutputBundle& from);
  void MergeFrom(const OutputBundle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appId = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // required int64 devId = 2;
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 2;
  inline ::google::protobuf::int64 devid() const;
  inline void set_devid(::google::protobuf::int64 value);

  // required double x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline double z() const;
  inline void set_z(double value);

  // repeated .etexas.VehicleCommandData vehComs = 6;
  inline int vehcoms_size() const;
  inline void clear_vehcoms();
  static const int kVehComsFieldNumber = 6;
  inline const ::etexas::VehicleCommandData& vehcoms(int index) const;
  inline ::etexas::VehicleCommandData* mutable_vehcoms(int index);
  inline ::etexas::VehicleCommandData* add_vehcoms();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::VehicleCommandData >&
      vehcoms() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::VehicleCommandData >*
      mutable_vehcoms();

  // repeated .etexas.SignalCommandData sigComs = 7;
  inline int sigcoms_size() const;
  inline void clear_sigcoms();
  static const int kSigComsFieldNumber = 7;
  inline const ::etexas::SignalCommandData& sigcoms(int index) const;
  inline ::etexas::SignalCommandData* mutable_sigcoms(int index);
  inline ::etexas::SignalCommandData* add_sigcoms();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::SignalCommandData >&
      sigcoms() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::SignalCommandData >*
      mutable_sigcoms();

  // repeated .etexas.WSMIndication messages = 8;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 8;
  inline const ::etexas::WSMIndication& messages(int index) const;
  inline ::etexas::WSMIndication* mutable_messages(int index);
  inline ::etexas::WSMIndication* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::WSMIndication >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::WSMIndication >*
      mutable_messages();

  // repeated .etexas.LogData logs = 9;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 9;
  inline const ::etexas::LogData& logs(int index) const;
  inline ::etexas::LogData* mutable_logs(int index);
  inline ::etexas::LogData* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::LogData >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::LogData >*
      mutable_logs();

  // @@protoc_insertion_point(class_scope:etexas.OutputBundle)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* appid_;
  ::google::protobuf::int64 devid_;
  double x_;
  double y_;
  double z_;
  ::google::protobuf::RepeatedPtrField< ::etexas::VehicleCommandData > vehcoms_;
  ::google::protobuf::RepeatedPtrField< ::etexas::SignalCommandData > sigcoms_;
  ::google::protobuf::RepeatedPtrField< ::etexas::WSMIndication > messages_;
  ::google::protobuf::RepeatedPtrField< ::etexas::LogData > logs_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static OutputBundle* default_instance_;
};
// -------------------------------------------------------------------

class VehicleCommandData : public ::google::protobuf::Message {
 public:
  VehicleCommandData();
  virtual ~VehicleCommandData();

  VehicleCommandData(const VehicleCommandData& from);

  inline VehicleCommandData& operator=(const VehicleCommandData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleCommandData& default_instance();

  void Swap(VehicleCommandData* other);

  // implements Message ----------------------------------------------

  VehicleCommandData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleCommandData& from);
  void MergeFrom(const VehicleCommandData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VehicleCommandData_VehicleCommandClass VehicleCommandClass;
  static const VehicleCommandClass DESTINATION = VehicleCommandData_VehicleCommandClass_DESTINATION;
  static const VehicleCommandClass LANE_CHANGE = VehicleCommandData_VehicleCommandClass_LANE_CHANGE;
  static const VehicleCommandClass SPEED = VehicleCommandData_VehicleCommandClass_SPEED;
  static inline bool VehicleCommandClass_IsValid(int value) {
    return VehicleCommandData_VehicleCommandClass_IsValid(value);
  }
  static const VehicleCommandClass VehicleCommandClass_MIN =
    VehicleCommandData_VehicleCommandClass_VehicleCommandClass_MIN;
  static const VehicleCommandClass VehicleCommandClass_MAX =
    VehicleCommandData_VehicleCommandClass_VehicleCommandClass_MAX;
  static const int VehicleCommandClass_ARRAYSIZE =
    VehicleCommandData_VehicleCommandClass_VehicleCommandClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VehicleCommandClass_descriptor() {
    return VehicleCommandData_VehicleCommandClass_descriptor();
  }
  static inline const ::std::string& VehicleCommandClass_Name(VehicleCommandClass value) {
    return VehicleCommandData_VehicleCommandClass_Name(value);
  }
  static inline bool VehicleCommandClass_Parse(const ::std::string& name,
      VehicleCommandClass* value) {
    return VehicleCommandData_VehicleCommandClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .etexas.VehicleCommandData.VehicleCommandClass commandClass = 1;
  inline bool has_commandclass() const;
  inline void clear_commandclass();
  static const int kCommandClassFieldNumber = 1;
  inline ::etexas::VehicleCommandData_VehicleCommandClass commandclass() const;
  inline void set_commandclass(::etexas::VehicleCommandData_VehicleCommandClass value);

  // required int32 command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline ::google::protobuf::int32 command() const;
  inline void set_command(::google::protobuf::int32 value);

  // required int32 vehicleId = 3;
  inline bool has_vehicleid() const;
  inline void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 3;
  inline ::google::protobuf::int32 vehicleid() const;
  inline void set_vehicleid(::google::protobuf::int32 value);

  // optional double speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline double speed() const;
  inline void set_speed(double value);

  // @@protoc_insertion_point(class_scope:etexas.VehicleCommandData)
 private:
  inline void set_has_commandclass();
  inline void clear_has_commandclass();
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_vehicleid();
  inline void clear_has_vehicleid();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int commandclass_;
  ::google::protobuf::int32 command_;
  double speed_;
  ::google::protobuf::int32 vehicleid_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static VehicleCommandData* default_instance_;
};
// -------------------------------------------------------------------

class SignalCommandData : public ::google::protobuf::Message {
 public:
  SignalCommandData();
  virtual ~SignalCommandData();

  SignalCommandData(const SignalCommandData& from);

  inline SignalCommandData& operator=(const SignalCommandData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalCommandData& default_instance();

  void Swap(SignalCommandData* other);

  // implements Message ----------------------------------------------

  SignalCommandData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalCommandData& from);
  void MergeFrom(const SignalCommandData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::google::protobuf::int32 command() const;
  inline void set_command(::google::protobuf::int32 value);

  // optional double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);

  // @@protoc_insertion_point(class_scope:etexas.SignalCommandData)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double time_;
  ::google::protobuf::int32 command_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static SignalCommandData* default_instance_;
};
// -------------------------------------------------------------------

class LogData : public ::google::protobuf::Message {
 public:
  LogData();
  virtual ~LogData();

  LogData(const LogData& from);

  inline LogData& operator=(const LogData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogData& default_instance();

  void Swap(LogData* other);

  // implements Message ----------------------------------------------

  LogData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogData& from);
  void MergeFrom(const LogData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double simTime = 1;
  inline bool has_simtime() const;
  inline void clear_simtime();
  static const int kSimTimeFieldNumber = 1;
  inline double simtime() const;
  inline void set_simtime(double value);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:etexas.LogData)
 private:
  inline void set_has_simtime();
  inline void clear_has_simtime();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double simtime_;
  ::std::string* key_;
  ::std::string* message_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static LogData* default_instance_;
};
// -------------------------------------------------------------------

class InputBundle : public ::google::protobuf::Message {
 public:
  InputBundle();
  virtual ~InputBundle();

  InputBundle(const InputBundle& from);

  inline InputBundle& operator=(const InputBundle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputBundle& default_instance();

  void Swap(InputBundle* other);

  // implements Message ----------------------------------------------

  InputBundle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputBundle& from);
  void MergeFrom(const InputBundle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double simTime = 1;
  inline bool has_simtime() const;
  inline void clear_simtime();
  static const int kSimTimeFieldNumber = 1;
  inline double simtime() const;
  inline void set_simtime(double value);

  // optional .etexas.RseModelData rseData = 2;
  inline bool has_rsedata() const;
  inline void clear_rsedata();
  static const int kRseDataFieldNumber = 2;
  inline const ::etexas::RseModelData& rsedata() const;
  inline ::etexas::RseModelData* mutable_rsedata();
  inline ::etexas::RseModelData* release_rsedata();
  inline void set_allocated_rsedata(::etexas::RseModelData* rsedata);

  // repeated .etexas.RseDevice rses = 3;
  inline int rses_size() const;
  inline void clear_rses();
  static const int kRsesFieldNumber = 3;
  inline const ::etexas::RseDevice& rses(int index) const;
  inline ::etexas::RseDevice* mutable_rses(int index);
  inline ::etexas::RseDevice* add_rses();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::RseDevice >&
      rses() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::RseDevice >*
      mutable_rses();

  // repeated .etexas.ObuDevice obus = 4;
  inline int obus_size() const;
  inline void clear_obus();
  static const int kObusFieldNumber = 4;
  inline const ::etexas::ObuDevice& obus(int index) const;
  inline ::etexas::ObuDevice* mutable_obus(int index);
  inline ::etexas::ObuDevice* add_obus();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::ObuDevice >&
      obus() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::ObuDevice >*
      mutable_obus();

  // repeated .etexas.Tx messages = 5;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 5;
  inline const ::etexas::Tx& messages(int index) const;
  inline ::etexas::Tx* mutable_messages(int index);
  inline ::etexas::Tx* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::Tx >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::Tx >*
      mutable_messages();

  // repeated .etexas.AppDevMap appDevMap = 6;
  inline int appdevmap_size() const;
  inline void clear_appdevmap();
  static const int kAppDevMapFieldNumber = 6;
  inline const ::etexas::AppDevMap& appdevmap(int index) const;
  inline ::etexas::AppDevMap* mutable_appdevmap(int index);
  inline ::etexas::AppDevMap* add_appdevmap();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::AppDevMap >&
      appdevmap() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::AppDevMap >*
      mutable_appdevmap();

  // @@protoc_insertion_point(class_scope:etexas.InputBundle)
 private:
  inline void set_has_simtime();
  inline void clear_has_simtime();
  inline void set_has_rsedata();
  inline void clear_has_rsedata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double simtime_;
  ::etexas::RseModelData* rsedata_;
  ::google::protobuf::RepeatedPtrField< ::etexas::RseDevice > rses_;
  ::google::protobuf::RepeatedPtrField< ::etexas::ObuDevice > obus_;
  ::google::protobuf::RepeatedPtrField< ::etexas::Tx > messages_;
  ::google::protobuf::RepeatedPtrField< ::etexas::AppDevMap > appdevmap_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static InputBundle* default_instance_;
};
// -------------------------------------------------------------------

class RseDevice : public ::google::protobuf::Message {
 public:
  RseDevice();
  virtual ~RseDevice();

  RseDevice(const RseDevice& from);

  inline RseDevice& operator=(const RseDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RseDevice& default_instance();

  void Swap(RseDevice* other);

  // implements Message ----------------------------------------------

  RseDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RseDevice& from);
  void MergeFrom(const RseDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 devId = 1;
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline ::google::protobuf::int64 devid() const;
  inline void set_devid(::google::protobuf::int64 value);

  // required double latitude = 2;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 3;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double elevation = 4;
  inline bool has_elevation() const;
  inline void clear_elevation();
  static const int kElevationFieldNumber = 4;
  inline double elevation() const;
  inline void set_elevation(double value);

  // repeated int64 messIds = 5;
  inline int messids_size() const;
  inline void clear_messids();
  static const int kMessIdsFieldNumber = 5;
  inline ::google::protobuf::int64 messids(int index) const;
  inline void set_messids(int index, ::google::protobuf::int64 value);
  inline void add_messids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      messids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_messids();

  // @@protoc_insertion_point(class_scope:etexas.RseDevice)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_elevation();
  inline void clear_has_elevation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 devid_;
  double latitude_;
  double longitude_;
  double elevation_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > messids_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static RseDevice* default_instance_;
};
// -------------------------------------------------------------------

class ObuDevice : public ::google::protobuf::Message {
 public:
  ObuDevice();
  virtual ~ObuDevice();

  ObuDevice(const ObuDevice& from);

  inline ObuDevice& operator=(const ObuDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObuDevice& default_instance();

  void Swap(ObuDevice* other);

  // implements Message ----------------------------------------------

  ObuDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObuDevice& from);
  void MergeFrom(const ObuDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 devId = 1;
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevIdFieldNumber = 1;
  inline ::google::protobuf::int64 devid() const;
  inline void set_devid(::google::protobuf::int64 value);

  // required .etexas.VehicleData vehicle = 2;
  inline bool has_vehicle() const;
  inline void clear_vehicle();
  static const int kVehicleFieldNumber = 2;
  inline const ::etexas::VehicleData& vehicle() const;
  inline ::etexas::VehicleData* mutable_vehicle();
  inline ::etexas::VehicleData* release_vehicle();
  inline void set_allocated_vehicle(::etexas::VehicleData* vehicle);

  // repeated int64 messIds = 3;
  inline int messids_size() const;
  inline void clear_messids();
  static const int kMessIdsFieldNumber = 3;
  inline ::google::protobuf::int64 messids(int index) const;
  inline void set_messids(int index, ::google::protobuf::int64 value);
  inline void add_messids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      messids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_messids();

  // @@protoc_insertion_point(class_scope:etexas.ObuDevice)
 private:
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_vehicle();
  inline void clear_has_vehicle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 devid_;
  ::etexas::VehicleData* vehicle_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > messids_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static ObuDevice* default_instance_;
};
// -------------------------------------------------------------------

class VehicleData : public ::google::protobuf::Message {
 public:
  VehicleData();
  virtual ~VehicleData();

  VehicleData(const VehicleData& from);

  inline VehicleData& operator=(const VehicleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleData& default_instance();

  void Swap(VehicleData* other);

  // implements Message ----------------------------------------------

  VehicleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleData& from);
  void MergeFrom(const VehicleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VehicleData_VehicleType VehicleType;
  static const VehicleType CAR = VehicleData_VehicleType_CAR;
  static const VehicleType BUS = VehicleData_VehicleType_BUS;
  static const VehicleType TRACTOR_TRAILER = VehicleData_VehicleType_TRACTOR_TRAILER;
  static inline bool VehicleType_IsValid(int value) {
    return VehicleData_VehicleType_IsValid(value);
  }
  static const VehicleType VehicleType_MIN =
    VehicleData_VehicleType_VehicleType_MIN;
  static const VehicleType VehicleType_MAX =
    VehicleData_VehicleType_VehicleType_MAX;
  static const int VehicleType_ARRAYSIZE =
    VehicleData_VehicleType_VehicleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VehicleType_descriptor() {
    return VehicleData_VehicleType_descriptor();
  }
  static inline const ::std::string& VehicleType_Name(VehicleType value) {
    return VehicleData_VehicleType_Name(value);
  }
  static inline bool VehicleType_Parse(const ::std::string& name,
      VehicleType* value) {
    return VehicleData_VehicleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 vehicleId = 1;
  inline bool has_vehicleid() const;
  inline void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 1;
  inline ::google::protobuf::int32 vehicleid() const;
  inline void set_vehicleid(::google::protobuf::int32 value);

  // required double speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline double speed() const;
  inline void set_speed(double value);

  // required double acceleration = 3;
  inline bool has_acceleration() const;
  inline void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  inline double acceleration() const;
  inline void set_acceleration(double value);

  // required double length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline double length() const;
  inline void set_length(double value);

  // required double width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline double width() const;
  inline void set_width(double value);

  // required int32 laneId = 6;
  inline bool has_laneid() const;
  inline void clear_laneid();
  static const int kLaneIdFieldNumber = 6;
  inline ::google::protobuf::int32 laneid() const;
  inline void set_laneid(::google::protobuf::int32 value);

  // required double heading = 7;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 7;
  inline double heading() const;
  inline void set_heading(double value);

  // required double height = 8;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 8;
  inline double height() const;
  inline void set_height(double value);

  // optional .etexas.VehicleData.VehicleType type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::etexas::VehicleData_VehicleType type() const;
  inline void set_type(::etexas::VehicleData_VehicleType value);

  // required bool brakePressed = 10;
  inline bool has_brakepressed() const;
  inline void clear_brakepressed();
  static const int kBrakePressedFieldNumber = 10;
  inline bool brakepressed() const;
  inline void set_brakepressed(bool value);

  // required double latitude = 11;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 11;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 12;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 12;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double elevation = 13;
  inline bool has_elevation() const;
  inline void clear_elevation();
  static const int kElevationFieldNumber = 13;
  inline double elevation() const;
  inline void set_elevation(double value);

  // required double x = 14;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 14;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 15;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 15;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 16;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 16;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:etexas.VehicleData)
 private:
  inline void set_has_vehicleid();
  inline void clear_has_vehicleid();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_laneid();
  inline void clear_has_laneid();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_brakepressed();
  inline void clear_has_brakepressed();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_elevation();
  inline void clear_has_elevation();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double speed_;
  double acceleration_;
  ::google::protobuf::int32 vehicleid_;
  ::google::protobuf::int32 laneid_;
  double length_;
  double width_;
  double heading_;
  double height_;
  int type_;
  bool brakepressed_;
  double latitude_;
  double longitude_;
  double elevation_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static VehicleData* default_instance_;
};
// -------------------------------------------------------------------

class Tx : public ::google::protobuf::Message {
 public:
  Tx();
  virtual ~Tx();

  Tx(const Tx& from);

  inline Tx& operator=(const Tx& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tx& default_instance();

  void Swap(Tx* other);

  // implements Message ----------------------------------------------

  Tx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tx& from);
  void MergeFrom(const Tx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 messId = 1;
  inline bool has_messid() const;
  inline void clear_messid();
  static const int kMessIdFieldNumber = 1;
  inline ::google::protobuf::int64 messid() const;
  inline void set_messid(::google::protobuf::int64 value);

  // required .etexas.WSMIndication mess = 2;
  inline bool has_mess() const;
  inline void clear_mess();
  static const int kMessFieldNumber = 2;
  inline const ::etexas::WSMIndication& mess() const;
  inline ::etexas::WSMIndication* mutable_mess();
  inline ::etexas::WSMIndication* release_mess();
  inline void set_allocated_mess(::etexas::WSMIndication* mess);

  // @@protoc_insertion_point(class_scope:etexas.Tx)
 private:
  inline void set_has_messid();
  inline void clear_has_messid();
  inline void set_has_mess();
  inline void clear_has_mess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 messid_;
  ::etexas::WSMIndication* mess_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static Tx* default_instance_;
};
// -------------------------------------------------------------------

class WSMIndication : public ::google::protobuf::Message {
 public:
  WSMIndication();
  virtual ~WSMIndication();

  WSMIndication(const WSMIndication& from);

  inline WSMIndication& operator=(const WSMIndication& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSMIndication& default_instance();

  void Swap(WSMIndication* other);

  // implements Message ----------------------------------------------

  WSMIndication* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSMIndication& from);
  void MergeFrom(const WSMIndication& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required int64 dest = 3;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 3;
  inline ::google::protobuf::int64 dest() const;
  inline void set_dest(::google::protobuf::int64 value);

  // required int64 src = 4;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 4;
  inline ::google::protobuf::int64 src() const;
  inline void set_src(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:etexas.WSMIndication)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int64 dest_;
  ::google::protobuf::int64 src_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static WSMIndication* default_instance_;
};
// -------------------------------------------------------------------

class AppDevMap : public ::google::protobuf::Message {
 public:
  AppDevMap();
  virtual ~AppDevMap();

  AppDevMap(const AppDevMap& from);

  inline AppDevMap& operator=(const AppDevMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppDevMap& default_instance();

  void Swap(AppDevMap* other);

  // implements Message ----------------------------------------------

  AppDevMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppDevMap& from);
  void MergeFrom(const AppDevMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appId = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // repeated int64 devIds = 2;
  inline int devids_size() const;
  inline void clear_devids();
  static const int kDevIdsFieldNumber = 2;
  inline ::google::protobuf::int64 devids(int index) const;
  inline void set_devids(int index, ::google::protobuf::int64 value);
  inline void add_devids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      devids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_devids();

  // @@protoc_insertion_point(class_scope:etexas.AppDevMap)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* appid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > devids_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static AppDevMap* default_instance_;
};
// -------------------------------------------------------------------

class RseModelData : public ::google::protobuf::Message {
 public:
  RseModelData();
  virtual ~RseModelData();

  RseModelData(const RseModelData& from);

  inline RseModelData& operator=(const RseModelData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RseModelData& default_instance();

  void Swap(RseModelData* other);

  // implements Message ----------------------------------------------

  RseModelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RseModelData& from);
  void MergeFrom(const RseModelData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .etexas.SignalManagerEntry signalMap = 1;
  inline int signalmap_size() const;
  inline void clear_signalmap();
  static const int kSignalMapFieldNumber = 1;
  inline const ::etexas::SignalManagerEntry& signalmap(int index) const;
  inline ::etexas::SignalManagerEntry* mutable_signalmap(int index);
  inline ::etexas::SignalManagerEntry* add_signalmap();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerEntry >&
      signalmap() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerEntry >*
      mutable_signalmap();

  // repeated .etexas.DetectorManagerEntry detectorMap = 2;
  inline int detectormap_size() const;
  inline void clear_detectormap();
  static const int kDetectorMapFieldNumber = 2;
  inline const ::etexas::DetectorManagerEntry& detectormap(int index) const;
  inline ::etexas::DetectorManagerEntry* mutable_detectormap(int index);
  inline ::etexas::DetectorManagerEntry* add_detectormap();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerEntry >&
      detectormap() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerEntry >*
      mutable_detectormap();

  // repeated .etexas.LaneManagerEntry laneMap = 3;
  inline int lanemap_size() const;
  inline void clear_lanemap();
  static const int kLaneMapFieldNumber = 3;
  inline const ::etexas::LaneManagerEntry& lanemap(int index) const;
  inline ::etexas::LaneManagerEntry* mutable_lanemap(int index);
  inline ::etexas::LaneManagerEntry* add_lanemap();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerEntry >&
      lanemap() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerEntry >*
      mutable_lanemap();

  // @@protoc_insertion_point(class_scope:etexas.RseModelData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerEntry > signalmap_;
  ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerEntry > detectormap_;
  ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerEntry > lanemap_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static RseModelData* default_instance_;
};
// -------------------------------------------------------------------

class SignalManagerEntry : public ::google::protobuf::Message {
 public:
  SignalManagerEntry();
  virtual ~SignalManagerEntry();

  SignalManagerEntry(const SignalManagerEntry& from);

  inline SignalManagerEntry& operator=(const SignalManagerEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalManagerEntry& default_instance();

  void Swap(SignalManagerEntry* other);

  // implements Message ----------------------------------------------

  SignalManagerEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalManagerEntry& from);
  void MergeFrom(const SignalManagerEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional .etexas.SignalManagerData value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::etexas::SignalManagerData& value() const;
  inline ::etexas::SignalManagerData* mutable_value();
  inline ::etexas::SignalManagerData* release_value();
  inline void set_allocated_value(::etexas::SignalManagerData* value);

  // @@protoc_insertion_point(class_scope:etexas.SignalManagerEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::etexas::SignalManagerData* value_;
  ::google::protobuf::int32 key_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static SignalManagerEntry* default_instance_;
};
// -------------------------------------------------------------------

class SignalManagerData_SignalIndicationData : public ::google::protobuf::Message {
 public:
  SignalManagerData_SignalIndicationData();
  virtual ~SignalManagerData_SignalIndicationData();

  SignalManagerData_SignalIndicationData(const SignalManagerData_SignalIndicationData& from);

  inline SignalManagerData_SignalIndicationData& operator=(const SignalManagerData_SignalIndicationData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalManagerData_SignalIndicationData& default_instance();

  void Swap(SignalManagerData_SignalIndicationData* other);

  // implements Message ----------------------------------------------

  SignalManagerData_SignalIndicationData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalManagerData_SignalIndicationData& from);
  void MergeFrom(const SignalManagerData_SignalIndicationData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SignalManagerData_SignalIndicationData_Color Color;
  static const Color GREEN = SignalManagerData_SignalIndicationData_Color_GREEN;
  static const Color RED = SignalManagerData_SignalIndicationData_Color_RED;
  static const Color YELLOW = SignalManagerData_SignalIndicationData_Color_YELLOW;
  static const Color NONE = SignalManagerData_SignalIndicationData_Color_NONE;
  static inline bool Color_IsValid(int value) {
    return SignalManagerData_SignalIndicationData_Color_IsValid(value);
  }
  static const Color Color_MIN =
    SignalManagerData_SignalIndicationData_Color_Color_MIN;
  static const Color Color_MAX =
    SignalManagerData_SignalIndicationData_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    SignalManagerData_SignalIndicationData_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return SignalManagerData_SignalIndicationData_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return SignalManagerData_SignalIndicationData_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return SignalManagerData_SignalIndicationData_Color_Parse(name, value);
  }

  typedef SignalManagerData_SignalIndicationData_Type Type;
  static const Type BALL = SignalManagerData_SignalIndicationData_Type_BALL;
  static const Type LEFT_ARROW = SignalManagerData_SignalIndicationData_Type_LEFT_ARROW;
  static const Type RIGHT_ARROW = SignalManagerData_SignalIndicationData_Type_RIGHT_ARROW;
  static const Type STRAIGHT_ARROW = SignalManagerData_SignalIndicationData_Type_STRAIGHT_ARROW;
  static const Type UTURN_ARROW = SignalManagerData_SignalIndicationData_Type_UTURN_ARROW;
  static const Type STOP_SIGN = SignalManagerData_SignalIndicationData_Type_STOP_SIGN;
  static const Type YIELD_SIGN = SignalManagerData_SignalIndicationData_Type_YIELD_SIGN;
  static const Type UNCONTROLLED = SignalManagerData_SignalIndicationData_Type_UNCONTROLLED;
  static const Type UNKNOWN = SignalManagerData_SignalIndicationData_Type_UNKNOWN;
  static inline bool Type_IsValid(int value) {
    return SignalManagerData_SignalIndicationData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SignalManagerData_SignalIndicationData_Type_Type_MIN;
  static const Type Type_MAX =
    SignalManagerData_SignalIndicationData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SignalManagerData_SignalIndicationData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SignalManagerData_SignalIndicationData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SignalManagerData_SignalIndicationData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SignalManagerData_SignalIndicationData_Type_Parse(name, value);
  }

  typedef SignalManagerData_SignalIndicationData_State State;
  static const State STEADY = SignalManagerData_SignalIndicationData_State_STEADY;
  static const State FLASHING = SignalManagerData_SignalIndicationData_State_FLASHING;
  static const State SOFT = SignalManagerData_SignalIndicationData_State_SOFT;
  static inline bool State_IsValid(int value) {
    return SignalManagerData_SignalIndicationData_State_IsValid(value);
  }
  static const State State_MIN =
    SignalManagerData_SignalIndicationData_State_State_MIN;
  static const State State_MAX =
    SignalManagerData_SignalIndicationData_State_State_MAX;
  static const int State_ARRAYSIZE =
    SignalManagerData_SignalIndicationData_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return SignalManagerData_SignalIndicationData_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return SignalManagerData_SignalIndicationData_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return SignalManagerData_SignalIndicationData_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 laneId = 1;
  inline bool has_laneid() const;
  inline void clear_laneid();
  static const int kLaneIdFieldNumber = 1;
  inline ::google::protobuf::int32 laneid() const;
  inline void set_laneid(::google::protobuf::int32 value);

  // optional double timeToChange = 2;
  inline bool has_timetochange() const;
  inline void clear_timetochange();
  static const int kTimeToChangeFieldNumber = 2;
  inline double timetochange() const;
  inline void set_timetochange(double value);

  // optional .etexas.SignalManagerData.SignalIndicationData.Color color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::etexas::SignalManagerData_SignalIndicationData_Color color() const;
  inline void set_color(::etexas::SignalManagerData_SignalIndicationData_Color value);

  // optional .etexas.SignalManagerData.SignalIndicationData.Type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::etexas::SignalManagerData_SignalIndicationData_Type type() const;
  inline void set_type(::etexas::SignalManagerData_SignalIndicationData_Type value);

  // optional .etexas.SignalManagerData.SignalIndicationData.State state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::etexas::SignalManagerData_SignalIndicationData_State state() const;
  inline void set_state(::etexas::SignalManagerData_SignalIndicationData_State value);

  // @@protoc_insertion_point(class_scope:etexas.SignalManagerData.SignalIndicationData)
 private:
  inline void set_has_laneid();
  inline void clear_has_laneid();
  inline void set_has_timetochange();
  inline void clear_has_timetochange();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double timetochange_;
  ::google::protobuf::int32 laneid_;
  int color_;
  int type_;
  int state_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static SignalManagerData_SignalIndicationData* default_instance_;
};
// -------------------------------------------------------------------

class SignalManagerData : public ::google::protobuf::Message {
 public:
  SignalManagerData();
  virtual ~SignalManagerData();

  SignalManagerData(const SignalManagerData& from);

  inline SignalManagerData& operator=(const SignalManagerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalManagerData& default_instance();

  void Swap(SignalManagerData* other);

  // implements Message ----------------------------------------------

  SignalManagerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalManagerData& from);
  void MergeFrom(const SignalManagerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SignalManagerData_SignalIndicationData SignalIndicationData;

  // accessors -------------------------------------------------------

  // repeated .etexas.SignalManagerData.SignalIndicationData signalIndications = 1;
  inline int signalindications_size() const;
  inline void clear_signalindications();
  static const int kSignalIndicationsFieldNumber = 1;
  inline const ::etexas::SignalManagerData_SignalIndicationData& signalindications(int index) const;
  inline ::etexas::SignalManagerData_SignalIndicationData* mutable_signalindications(int index);
  inline ::etexas::SignalManagerData_SignalIndicationData* add_signalindications();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerData_SignalIndicationData >&
      signalindications() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerData_SignalIndicationData >*
      mutable_signalindications();

  // @@protoc_insertion_point(class_scope:etexas.SignalManagerData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerData_SignalIndicationData > signalindications_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static SignalManagerData* default_instance_;
};
// -------------------------------------------------------------------

class DetectorManagerData_DetectorData_DetectorEventData : public ::google::protobuf::Message {
 public:
  DetectorManagerData_DetectorData_DetectorEventData();
  virtual ~DetectorManagerData_DetectorData_DetectorEventData();

  DetectorManagerData_DetectorData_DetectorEventData(const DetectorManagerData_DetectorData_DetectorEventData& from);

  inline DetectorManagerData_DetectorData_DetectorEventData& operator=(const DetectorManagerData_DetectorData_DetectorEventData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectorManagerData_DetectorData_DetectorEventData& default_instance();

  void Swap(DetectorManagerData_DetectorData_DetectorEventData* other);

  // implements Message ----------------------------------------------

  DetectorManagerData_DetectorData_DetectorEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectorManagerData_DetectorData_DetectorEventData& from);
  void MergeFrom(const DetectorManagerData_DetectorData_DetectorEventData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 detectorId = 1;
  inline bool has_detectorid() const;
  inline void clear_detectorid();
  static const int kDetectorIdFieldNumber = 1;
  inline ::google::protobuf::int32 detectorid() const;
  inline void set_detectorid(::google::protobuf::int32 value);

  // optional int32 pulse = 2;
  inline bool has_pulse() const;
  inline void clear_pulse();
  static const int kPulseFieldNumber = 2;
  inline ::google::protobuf::int32 pulse() const;
  inline void set_pulse(::google::protobuf::int32 value);

  // optional bool presence = 3;
  inline bool has_presence() const;
  inline void clear_presence();
  static const int kPresenceFieldNumber = 3;
  inline bool presence() const;
  inline void set_presence(bool value);

  // optional double speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline double speed() const;
  inline void set_speed(double value);

  // optional double length = 5;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 5;
  inline double length() const;
  inline void set_length(double value);

  // @@protoc_insertion_point(class_scope:etexas.DetectorManagerData.DetectorData.DetectorEventData)
 private:
  inline void set_has_detectorid();
  inline void clear_has_detectorid();
  inline void set_has_pulse();
  inline void clear_has_pulse();
  inline void set_has_presence();
  inline void clear_has_presence();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 detectorid_;
  ::google::protobuf::int32 pulse_;
  double speed_;
  double length_;
  bool presence_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static DetectorManagerData_DetectorData_DetectorEventData* default_instance_;
};
// -------------------------------------------------------------------

class DetectorManagerData_DetectorData_PolygonData : public ::google::protobuf::Message {
 public:
  DetectorManagerData_DetectorData_PolygonData();
  virtual ~DetectorManagerData_DetectorData_PolygonData();

  DetectorManagerData_DetectorData_PolygonData(const DetectorManagerData_DetectorData_PolygonData& from);

  inline DetectorManagerData_DetectorData_PolygonData& operator=(const DetectorManagerData_DetectorData_PolygonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectorManagerData_DetectorData_PolygonData& default_instance();

  void Swap(DetectorManagerData_DetectorData_PolygonData* other);

  // implements Message ----------------------------------------------

  DetectorManagerData_DetectorData_PolygonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectorManagerData_DetectorData_PolygonData& from);
  void MergeFrom(const DetectorManagerData_DetectorData_PolygonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 npoints = 1;
  inline bool has_npoints() const;
  inline void clear_npoints();
  static const int kNpointsFieldNumber = 1;
  inline ::google::protobuf::int32 npoints() const;
  inline void set_npoints(::google::protobuf::int32 value);

  // repeated int32 xpoints = 2;
  inline int xpoints_size() const;
  inline void clear_xpoints();
  static const int kXpointsFieldNumber = 2;
  inline ::google::protobuf::int32 xpoints(int index) const;
  inline void set_xpoints(int index, ::google::protobuf::int32 value);
  inline void add_xpoints(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      xpoints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_xpoints();

  // repeated int32 ypoints = 3;
  inline int ypoints_size() const;
  inline void clear_ypoints();
  static const int kYpointsFieldNumber = 3;
  inline ::google::protobuf::int32 ypoints(int index) const;
  inline void set_ypoints(int index, ::google::protobuf::int32 value);
  inline void add_ypoints(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ypoints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ypoints();

  // @@protoc_insertion_point(class_scope:etexas.DetectorManagerData.DetectorData.PolygonData)
 private:
  inline void set_has_npoints();
  inline void clear_has_npoints();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > xpoints_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ypoints_;
  ::google::protobuf::int32 npoints_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static DetectorManagerData_DetectorData_PolygonData* default_instance_;
};
// -------------------------------------------------------------------

class DetectorManagerData_DetectorData : public ::google::protobuf::Message {
 public:
  DetectorManagerData_DetectorData();
  virtual ~DetectorManagerData_DetectorData();

  DetectorManagerData_DetectorData(const DetectorManagerData_DetectorData& from);

  inline DetectorManagerData_DetectorData& operator=(const DetectorManagerData_DetectorData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectorManagerData_DetectorData& default_instance();

  void Swap(DetectorManagerData_DetectorData* other);

  // implements Message ----------------------------------------------

  DetectorManagerData_DetectorData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectorManagerData_DetectorData& from);
  void MergeFrom(const DetectorManagerData_DetectorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DetectorManagerData_DetectorData_DetectorEventData DetectorEventData;
  typedef DetectorManagerData_DetectorData_PolygonData PolygonData;

  // accessors -------------------------------------------------------

  // required int32 detectorId = 1;
  inline bool has_detectorid() const;
  inline void clear_detectorid();
  static const int kDetectorIdFieldNumber = 1;
  inline ::google::protobuf::int32 detectorid() const;
  inline void set_detectorid(::google::protobuf::int32 value);

  // repeated int32 laneIds = 2;
  inline int laneids_size() const;
  inline void clear_laneids();
  static const int kLaneIdsFieldNumber = 2;
  inline ::google::protobuf::int32 laneids(int index) const;
  inline void set_laneids(int index, ::google::protobuf::int32 value);
  inline void add_laneids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      laneids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_laneids();

  // optional bool presenceDetectCap = 3;
  inline bool has_presencedetectcap() const;
  inline void clear_presencedetectcap();
  static const int kPresenceDetectCapFieldNumber = 3;
  inline bool presencedetectcap() const;
  inline void set_presencedetectcap(bool value);

  // optional bool pulseDetectCap = 4;
  inline bool has_pulsedetectcap() const;
  inline void clear_pulsedetectcap();
  static const int kPulseDetectCapFieldNumber = 4;
  inline bool pulsedetectcap() const;
  inline void set_pulsedetectcap(bool value);

  // optional bool speedDetectCap = 5;
  inline bool has_speeddetectcap() const;
  inline void clear_speeddetectcap();
  static const int kSpeedDetectCapFieldNumber = 5;
  inline bool speeddetectcap() const;
  inline void set_speeddetectcap(bool value);

  // optional bool lengthDetectCap = 6;
  inline bool has_lengthdetectcap() const;
  inline void clear_lengthdetectcap();
  static const int kLengthDetectCapFieldNumber = 6;
  inline bool lengthdetectcap() const;
  inline void set_lengthdetectcap(bool value);

  // optional .etexas.DetectorManagerData.DetectorData.DetectorEventData detEvent = 7;
  inline bool has_detevent() const;
  inline void clear_detevent();
  static const int kDetEventFieldNumber = 7;
  inline const ::etexas::DetectorManagerData_DetectorData_DetectorEventData& detevent() const;
  inline ::etexas::DetectorManagerData_DetectorData_DetectorEventData* mutable_detevent();
  inline ::etexas::DetectorManagerData_DetectorData_DetectorEventData* release_detevent();
  inline void set_allocated_detevent(::etexas::DetectorManagerData_DetectorData_DetectorEventData* detevent);

  // optional .etexas.DetectorManagerData.DetectorData.PolygonData area = 8;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 8;
  inline const ::etexas::DetectorManagerData_DetectorData_PolygonData& area() const;
  inline ::etexas::DetectorManagerData_DetectorData_PolygonData* mutable_area();
  inline ::etexas::DetectorManagerData_DetectorData_PolygonData* release_area();
  inline void set_allocated_area(::etexas::DetectorManagerData_DetectorData_PolygonData* area);

  // @@protoc_insertion_point(class_scope:etexas.DetectorManagerData.DetectorData)
 private:
  inline void set_has_detectorid();
  inline void clear_has_detectorid();
  inline void set_has_presencedetectcap();
  inline void clear_has_presencedetectcap();
  inline void set_has_pulsedetectcap();
  inline void clear_has_pulsedetectcap();
  inline void set_has_speeddetectcap();
  inline void clear_has_speeddetectcap();
  inline void set_has_lengthdetectcap();
  inline void clear_has_lengthdetectcap();
  inline void set_has_detevent();
  inline void clear_has_detevent();
  inline void set_has_area();
  inline void clear_has_area();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > laneids_;
  ::google::protobuf::int32 detectorid_;
  bool presencedetectcap_;
  bool pulsedetectcap_;
  bool speeddetectcap_;
  bool lengthdetectcap_;
  ::etexas::DetectorManagerData_DetectorData_DetectorEventData* detevent_;
  ::etexas::DetectorManagerData_DetectorData_PolygonData* area_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static DetectorManagerData_DetectorData* default_instance_;
};
// -------------------------------------------------------------------

class DetectorManagerData : public ::google::protobuf::Message {
 public:
  DetectorManagerData();
  virtual ~DetectorManagerData();

  DetectorManagerData(const DetectorManagerData& from);

  inline DetectorManagerData& operator=(const DetectorManagerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectorManagerData& default_instance();

  void Swap(DetectorManagerData* other);

  // implements Message ----------------------------------------------

  DetectorManagerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectorManagerData& from);
  void MergeFrom(const DetectorManagerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DetectorManagerData_DetectorData DetectorData;

  // accessors -------------------------------------------------------

  // repeated .etexas.DetectorManagerData.DetectorData detectors = 1;
  inline int detectors_size() const;
  inline void clear_detectors();
  static const int kDetectorsFieldNumber = 1;
  inline const ::etexas::DetectorManagerData_DetectorData& detectors(int index) const;
  inline ::etexas::DetectorManagerData_DetectorData* mutable_detectors(int index);
  inline ::etexas::DetectorManagerData_DetectorData* add_detectors();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerData_DetectorData >&
      detectors() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerData_DetectorData >*
      mutable_detectors();

  // @@protoc_insertion_point(class_scope:etexas.DetectorManagerData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerData_DetectorData > detectors_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static DetectorManagerData* default_instance_;
};
// -------------------------------------------------------------------

class DetectorManagerEntry : public ::google::protobuf::Message {
 public:
  DetectorManagerEntry();
  virtual ~DetectorManagerEntry();

  DetectorManagerEntry(const DetectorManagerEntry& from);

  inline DetectorManagerEntry& operator=(const DetectorManagerEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectorManagerEntry& default_instance();

  void Swap(DetectorManagerEntry* other);

  // implements Message ----------------------------------------------

  DetectorManagerEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectorManagerEntry& from);
  void MergeFrom(const DetectorManagerEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional .etexas.DetectorManagerData value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::etexas::DetectorManagerData& value() const;
  inline ::etexas::DetectorManagerData* mutable_value();
  inline ::etexas::DetectorManagerData* release_value();
  inline void set_allocated_value(::etexas::DetectorManagerData* value);

  // @@protoc_insertion_point(class_scope:etexas.DetectorManagerEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::etexas::DetectorManagerData* value_;
  ::google::protobuf::int32 key_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static DetectorManagerEntry* default_instance_;
};
// -------------------------------------------------------------------

class LaneManagerData_LaneData_LaneNode : public ::google::protobuf::Message {
 public:
  LaneManagerData_LaneData_LaneNode();
  virtual ~LaneManagerData_LaneData_LaneNode();

  LaneManagerData_LaneData_LaneNode(const LaneManagerData_LaneData_LaneNode& from);

  inline LaneManagerData_LaneData_LaneNode& operator=(const LaneManagerData_LaneData_LaneNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneManagerData_LaneData_LaneNode& default_instance();

  void Swap(LaneManagerData_LaneData_LaneNode* other);

  // implements Message ----------------------------------------------

  LaneManagerData_LaneData_LaneNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneManagerData_LaneData_LaneNode& from);
  void MergeFrom(const LaneManagerData_LaneData_LaneNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // optional double width = 4 [default = 1];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline double width() const;
  inline void set_width(double value);

  // @@protoc_insertion_point(class_scope:etexas.LaneManagerData.LaneData.LaneNode)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double width_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static LaneManagerData_LaneData_LaneNode* default_instance_;
};
// -------------------------------------------------------------------

class LaneManagerData_LaneData_LaneMovement : public ::google::protobuf::Message {
 public:
  LaneManagerData_LaneData_LaneMovement();
  virtual ~LaneManagerData_LaneData_LaneMovement();

  LaneManagerData_LaneData_LaneMovement(const LaneManagerData_LaneData_LaneMovement& from);

  inline LaneManagerData_LaneData_LaneMovement& operator=(const LaneManagerData_LaneData_LaneMovement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneManagerData_LaneData_LaneMovement& default_instance();

  void Swap(LaneManagerData_LaneData_LaneMovement* other);

  // implements Message ----------------------------------------------

  LaneManagerData_LaneData_LaneMovement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneManagerData_LaneData_LaneMovement& from);
  void MergeFrom(const LaneManagerData_LaneData_LaneMovement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LaneManagerData_LaneData_LaneMovement_Movement Movement;
  static const Movement LEFT_TURN = LaneManagerData_LaneData_LaneMovement_Movement_LEFT_TURN;
  static const Movement RIGHT_TURN = LaneManagerData_LaneData_LaneMovement_Movement_RIGHT_TURN;
  static const Movement STRAIGHT = LaneManagerData_LaneData_LaneMovement_Movement_STRAIGHT;
  static const Movement RIGHT_TURN_ON_RED = LaneManagerData_LaneData_LaneMovement_Movement_RIGHT_TURN_ON_RED;
  static const Movement LEFT_TURN_ON_RED = LaneManagerData_LaneData_LaneMovement_Movement_LEFT_TURN_ON_RED;
  static const Movement U_TURN = LaneManagerData_LaneData_LaneMovement_Movement_U_TURN;
  static inline bool Movement_IsValid(int value) {
    return LaneManagerData_LaneData_LaneMovement_Movement_IsValid(value);
  }
  static const Movement Movement_MIN =
    LaneManagerData_LaneData_LaneMovement_Movement_Movement_MIN;
  static const Movement Movement_MAX =
    LaneManagerData_LaneData_LaneMovement_Movement_Movement_MAX;
  static const int Movement_ARRAYSIZE =
    LaneManagerData_LaneData_LaneMovement_Movement_Movement_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Movement_descriptor() {
    return LaneManagerData_LaneData_LaneMovement_Movement_descriptor();
  }
  static inline const ::std::string& Movement_Name(Movement value) {
    return LaneManagerData_LaneData_LaneMovement_Movement_Name(value);
  }
  static inline bool Movement_Parse(const ::std::string& name,
      Movement* value) {
    return LaneManagerData_LaneData_LaneMovement_Movement_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .etexas.LaneManagerData.LaneData.LaneMovement.Movement movement = 1 [default = STRAIGHT];
  inline bool has_movement() const;
  inline void clear_movement();
  static const int kMovementFieldNumber = 1;
  inline ::etexas::LaneManagerData_LaneData_LaneMovement_Movement movement() const;
  inline void set_movement(::etexas::LaneManagerData_LaneData_LaneMovement_Movement value);

  // required int32 movementId = 2;
  inline bool has_movementid() const;
  inline void clear_movementid();
  static const int kMovementIdFieldNumber = 2;
  inline ::google::protobuf::int32 movementid() const;
  inline void set_movementid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:etexas.LaneManagerData.LaneData.LaneMovement)
 private:
  inline void set_has_movement();
  inline void clear_has_movement();
  inline void set_has_movementid();
  inline void clear_has_movementid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int movement_;
  ::google::protobuf::int32 movementid_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static LaneManagerData_LaneData_LaneMovement* default_instance_;
};
// -------------------------------------------------------------------

class LaneManagerData_LaneData : public ::google::protobuf::Message {
 public:
  LaneManagerData_LaneData();
  virtual ~LaneManagerData_LaneData();

  LaneManagerData_LaneData(const LaneManagerData_LaneData& from);

  inline LaneManagerData_LaneData& operator=(const LaneManagerData_LaneData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneManagerData_LaneData& default_instance();

  void Swap(LaneManagerData_LaneData* other);

  // implements Message ----------------------------------------------

  LaneManagerData_LaneData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneManagerData_LaneData& from);
  void MergeFrom(const LaneManagerData_LaneData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LaneManagerData_LaneData_LaneNode LaneNode;
  typedef LaneManagerData_LaneData_LaneMovement LaneMovement;

  typedef LaneManagerData_LaneData_Type Type;
  static const Type UNSET = LaneManagerData_LaneData_Type_UNSET;
  static const Type OUTBOUND = LaneManagerData_LaneData_Type_OUTBOUND;
  static const Type INBOUND = LaneManagerData_LaneData_Type_INBOUND;
  static inline bool Type_IsValid(int value) {
    return LaneManagerData_LaneData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneManagerData_LaneData_Type_Type_MIN;
  static const Type Type_MAX =
    LaneManagerData_LaneData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneManagerData_LaneData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneManagerData_LaneData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneManagerData_LaneData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneManagerData_LaneData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 laneId = 1;
  inline bool has_laneid() const;
  inline void clear_laneid();
  static const int kLaneIdFieldNumber = 1;
  inline ::google::protobuf::int32 laneid() const;
  inline void set_laneid(::google::protobuf::int32 value);

  // optional .etexas.LaneManagerData.LaneData.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::etexas::LaneManagerData_LaneData_Type type() const;
  inline void set_type(::etexas::LaneManagerData_LaneData_Type value);

  // optional int32 approachId = 3;
  inline bool has_approachid() const;
  inline void clear_approachid();
  static const int kApproachIdFieldNumber = 3;
  inline ::google::protobuf::int32 approachid() const;
  inline void set_approachid(::google::protobuf::int32 value);

  // optional double speedLimit = 4;
  inline bool has_speedlimit() const;
  inline void clear_speedlimit();
  static const int kSpeedLimitFieldNumber = 4;
  inline double speedlimit() const;
  inline void set_speedlimit(double value);

  // repeated .etexas.LaneManagerData.LaneData.LaneNode laneGeomList = 5;
  inline int lanegeomlist_size() const;
  inline void clear_lanegeomlist();
  static const int kLaneGeomListFieldNumber = 5;
  inline const ::etexas::LaneManagerData_LaneData_LaneNode& lanegeomlist(int index) const;
  inline ::etexas::LaneManagerData_LaneData_LaneNode* mutable_lanegeomlist(int index);
  inline ::etexas::LaneManagerData_LaneData_LaneNode* add_lanegeomlist();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneNode >&
      lanegeomlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneNode >*
      mutable_lanegeomlist();

  // repeated .etexas.LaneManagerData.LaneData.LaneMovement laneMovements = 6;
  inline int lanemovements_size() const;
  inline void clear_lanemovements();
  static const int kLaneMovementsFieldNumber = 6;
  inline const ::etexas::LaneManagerData_LaneData_LaneMovement& lanemovements(int index) const;
  inline ::etexas::LaneManagerData_LaneData_LaneMovement* mutable_lanemovements(int index);
  inline ::etexas::LaneManagerData_LaneData_LaneMovement* add_lanemovements();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneMovement >&
      lanemovements() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneMovement >*
      mutable_lanemovements();

  // @@protoc_insertion_point(class_scope:etexas.LaneManagerData.LaneData)
 private:
  inline void set_has_laneid();
  inline void clear_has_laneid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_approachid();
  inline void clear_has_approachid();
  inline void set_has_speedlimit();
  inline void clear_has_speedlimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 laneid_;
  int type_;
  double speedlimit_;
  ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneNode > lanegeomlist_;
  ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneMovement > lanemovements_;
  ::google::protobuf::int32 approachid_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static LaneManagerData_LaneData* default_instance_;
};
// -------------------------------------------------------------------

class LaneManagerData : public ::google::protobuf::Message {
 public:
  LaneManagerData();
  virtual ~LaneManagerData();

  LaneManagerData(const LaneManagerData& from);

  inline LaneManagerData& operator=(const LaneManagerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneManagerData& default_instance();

  void Swap(LaneManagerData* other);

  // implements Message ----------------------------------------------

  LaneManagerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneManagerData& from);
  void MergeFrom(const LaneManagerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LaneManagerData_LaneData LaneData;

  // accessors -------------------------------------------------------

  // optional double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // optional double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional double elevation = 3;
  inline bool has_elevation() const;
  inline void clear_elevation();
  static const int kElevationFieldNumber = 3;
  inline double elevation() const;
  inline void set_elevation(double value);

  // optional int32 intersectionId = 4;
  inline bool has_intersectionid() const;
  inline void clear_intersectionid();
  static const int kIntersectionIdFieldNumber = 4;
  inline ::google::protobuf::int32 intersectionid() const;
  inline void set_intersectionid(::google::protobuf::int32 value);

  // optional int32 geoCalculatorType = 5;
  inline bool has_geocalculatortype() const;
  inline void clear_geocalculatortype();
  static const int kGeoCalculatorTypeFieldNumber = 5;
  inline ::google::protobuf::int32 geocalculatortype() const;
  inline void set_geocalculatortype(::google::protobuf::int32 value);

  // repeated .etexas.LaneManagerData.LaneData lanes = 6;
  inline int lanes_size() const;
  inline void clear_lanes();
  static const int kLanesFieldNumber = 6;
  inline const ::etexas::LaneManagerData_LaneData& lanes(int index) const;
  inline ::etexas::LaneManagerData_LaneData* mutable_lanes(int index);
  inline ::etexas::LaneManagerData_LaneData* add_lanes();
  inline const ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData >&
      lanes() const;
  inline ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData >*
      mutable_lanes();

  // @@protoc_insertion_point(class_scope:etexas.LaneManagerData)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_elevation();
  inline void clear_has_elevation();
  inline void set_has_intersectionid();
  inline void clear_has_intersectionid();
  inline void set_has_geocalculatortype();
  inline void clear_has_geocalculatortype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  double elevation_;
  ::google::protobuf::int32 intersectionid_;
  ::google::protobuf::int32 geocalculatortype_;
  ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData > lanes_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static LaneManagerData* default_instance_;
};
// -------------------------------------------------------------------

class LaneManagerEntry : public ::google::protobuf::Message {
 public:
  LaneManagerEntry();
  virtual ~LaneManagerEntry();

  LaneManagerEntry(const LaneManagerEntry& from);

  inline LaneManagerEntry& operator=(const LaneManagerEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneManagerEntry& default_instance();

  void Swap(LaneManagerEntry* other);

  // implements Message ----------------------------------------------

  LaneManagerEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneManagerEntry& from);
  void MergeFrom(const LaneManagerEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional .etexas.LaneManagerData value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::etexas::LaneManagerData& value() const;
  inline ::etexas::LaneManagerData* mutable_value();
  inline ::etexas::LaneManagerData* release_value();
  inline void set_allocated_value(::etexas::LaneManagerData* value);

  // @@protoc_insertion_point(class_scope:etexas.LaneManagerEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::etexas::LaneManagerData* value_;
  ::google::protobuf::int32 key_;
  friend void  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_AssignDesc_NativeAppProtobuf_2eproto();
  friend void protobuf_ShutdownFile_NativeAppProtobuf_2eproto();

  void InitAsDefaultInstance();
  static LaneManagerEntry* default_instance_;
};
// ===================================================================


// ===================================================================

// BundleWrapper

// required int64 execId = 1;
inline bool BundleWrapper::has_execid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BundleWrapper::set_has_execid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BundleWrapper::clear_has_execid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BundleWrapper::clear_execid() {
  execid_ = GOOGLE_LONGLONG(0);
  clear_has_execid();
}
inline ::google::protobuf::int64 BundleWrapper::execid() const {
  // @@protoc_insertion_point(field_get:etexas.BundleWrapper.execId)
  return execid_;
}
inline void BundleWrapper::set_execid(::google::protobuf::int64 value) {
  set_has_execid();
  execid_ = value;
  // @@protoc_insertion_point(field_set:etexas.BundleWrapper.execId)
}

// optional .etexas.InitBundle initBundle = 2;
inline bool BundleWrapper::has_initbundle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BundleWrapper::set_has_initbundle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BundleWrapper::clear_has_initbundle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BundleWrapper::clear_initbundle() {
  if (initbundle_ != NULL) initbundle_->::etexas::InitBundle::Clear();
  clear_has_initbundle();
}
inline const ::etexas::InitBundle& BundleWrapper::initbundle() const {
  // @@protoc_insertion_point(field_get:etexas.BundleWrapper.initBundle)
  return initbundle_ != NULL ? *initbundle_ : *default_instance_->initbundle_;
}
inline ::etexas::InitBundle* BundleWrapper::mutable_initbundle() {
  set_has_initbundle();
  if (initbundle_ == NULL) initbundle_ = new ::etexas::InitBundle;
  // @@protoc_insertion_point(field_mutable:etexas.BundleWrapper.initBundle)
  return initbundle_;
}
inline ::etexas::InitBundle* BundleWrapper::release_initbundle() {
  clear_has_initbundle();
  ::etexas::InitBundle* temp = initbundle_;
  initbundle_ = NULL;
  return temp;
}
inline void BundleWrapper::set_allocated_initbundle(::etexas::InitBundle* initbundle) {
  delete initbundle_;
  initbundle_ = initbundle;
  if (initbundle) {
    set_has_initbundle();
  } else {
    clear_has_initbundle();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.BundleWrapper.initBundle)
}

// optional .etexas.InputBundle inputBundle = 3;
inline bool BundleWrapper::has_inputbundle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BundleWrapper::set_has_inputbundle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BundleWrapper::clear_has_inputbundle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BundleWrapper::clear_inputbundle() {
  if (inputbundle_ != NULL) inputbundle_->::etexas::InputBundle::Clear();
  clear_has_inputbundle();
}
inline const ::etexas::InputBundle& BundleWrapper::inputbundle() const {
  // @@protoc_insertion_point(field_get:etexas.BundleWrapper.inputBundle)
  return inputbundle_ != NULL ? *inputbundle_ : *default_instance_->inputbundle_;
}
inline ::etexas::InputBundle* BundleWrapper::mutable_inputbundle() {
  set_has_inputbundle();
  if (inputbundle_ == NULL) inputbundle_ = new ::etexas::InputBundle;
  // @@protoc_insertion_point(field_mutable:etexas.BundleWrapper.inputBundle)
  return inputbundle_;
}
inline ::etexas::InputBundle* BundleWrapper::release_inputbundle() {
  clear_has_inputbundle();
  ::etexas::InputBundle* temp = inputbundle_;
  inputbundle_ = NULL;
  return temp;
}
inline void BundleWrapper::set_allocated_inputbundle(::etexas::InputBundle* inputbundle) {
  delete inputbundle_;
  inputbundle_ = inputbundle;
  if (inputbundle) {
    set_has_inputbundle();
  } else {
    clear_has_inputbundle();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.BundleWrapper.inputBundle)
}

// repeated .etexas.OutputBundle outputBundle = 4;
inline int BundleWrapper::outputbundle_size() const {
  return outputbundle_.size();
}
inline void BundleWrapper::clear_outputbundle() {
  outputbundle_.Clear();
}
inline const ::etexas::OutputBundle& BundleWrapper::outputbundle(int index) const {
  // @@protoc_insertion_point(field_get:etexas.BundleWrapper.outputBundle)
  return outputbundle_.Get(index);
}
inline ::etexas::OutputBundle* BundleWrapper::mutable_outputbundle(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.BundleWrapper.outputBundle)
  return outputbundle_.Mutable(index);
}
inline ::etexas::OutputBundle* BundleWrapper::add_outputbundle() {
  // @@protoc_insertion_point(field_add:etexas.BundleWrapper.outputBundle)
  return outputbundle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::OutputBundle >&
BundleWrapper::outputbundle() const {
  // @@protoc_insertion_point(field_list:etexas.BundleWrapper.outputBundle)
  return outputbundle_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::OutputBundle >*
BundleWrapper::mutable_outputbundle() {
  // @@protoc_insertion_point(field_mutable_list:etexas.BundleWrapper.outputBundle)
  return &outputbundle_;
}

// optional .etexas.ShutdownBundle shutdownBundle = 5;
inline bool BundleWrapper::has_shutdownbundle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BundleWrapper::set_has_shutdownbundle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BundleWrapper::clear_has_shutdownbundle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BundleWrapper::clear_shutdownbundle() {
  if (shutdownbundle_ != NULL) shutdownbundle_->::etexas::ShutdownBundle::Clear();
  clear_has_shutdownbundle();
}
inline const ::etexas::ShutdownBundle& BundleWrapper::shutdownbundle() const {
  // @@protoc_insertion_point(field_get:etexas.BundleWrapper.shutdownBundle)
  return shutdownbundle_ != NULL ? *shutdownbundle_ : *default_instance_->shutdownbundle_;
}
inline ::etexas::ShutdownBundle* BundleWrapper::mutable_shutdownbundle() {
  set_has_shutdownbundle();
  if (shutdownbundle_ == NULL) shutdownbundle_ = new ::etexas::ShutdownBundle;
  // @@protoc_insertion_point(field_mutable:etexas.BundleWrapper.shutdownBundle)
  return shutdownbundle_;
}
inline ::etexas::ShutdownBundle* BundleWrapper::release_shutdownbundle() {
  clear_has_shutdownbundle();
  ::etexas::ShutdownBundle* temp = shutdownbundle_;
  shutdownbundle_ = NULL;
  return temp;
}
inline void BundleWrapper::set_allocated_shutdownbundle(::etexas::ShutdownBundle* shutdownbundle) {
  delete shutdownbundle_;
  shutdownbundle_ = shutdownbundle;
  if (shutdownbundle) {
    set_has_shutdownbundle();
  } else {
    clear_has_shutdownbundle();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.BundleWrapper.shutdownBundle)
}

// -------------------------------------------------------------------

// InitBundle

// repeated .etexas.AppInitConfig appInitConfig = 2;
inline int InitBundle::appinitconfig_size() const {
  return appinitconfig_.size();
}
inline void InitBundle::clear_appinitconfig() {
  appinitconfig_.Clear();
}
inline const ::etexas::AppInitConfig& InitBundle::appinitconfig(int index) const {
  // @@protoc_insertion_point(field_get:etexas.InitBundle.appInitConfig)
  return appinitconfig_.Get(index);
}
inline ::etexas::AppInitConfig* InitBundle::mutable_appinitconfig(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.InitBundle.appInitConfig)
  return appinitconfig_.Mutable(index);
}
inline ::etexas::AppInitConfig* InitBundle::add_appinitconfig() {
  // @@protoc_insertion_point(field_add:etexas.InitBundle.appInitConfig)
  return appinitconfig_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::AppInitConfig >&
InitBundle::appinitconfig() const {
  // @@protoc_insertion_point(field_list:etexas.InitBundle.appInitConfig)
  return appinitconfig_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::AppInitConfig >*
InitBundle::mutable_appinitconfig() {
  // @@protoc_insertion_point(field_mutable_list:etexas.InitBundle.appInitConfig)
  return &appinitconfig_;
}

// -------------------------------------------------------------------

// ShutdownBundle

// -------------------------------------------------------------------

// AppInitConfig

// required string appId = 1;
inline bool AppInitConfig::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppInitConfig::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppInitConfig::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppInitConfig::clear_appid() {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& AppInitConfig::appid() const {
  // @@protoc_insertion_point(field_get:etexas.AppInitConfig.appId)
  return *appid_;
}
inline void AppInitConfig::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set:etexas.AppInitConfig.appId)
}
inline void AppInitConfig::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set_char:etexas.AppInitConfig.appId)
}
inline void AppInitConfig::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etexas.AppInitConfig.appId)
}
inline ::std::string* AppInitConfig::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:etexas.AppInitConfig.appId)
  return appid_;
}
inline ::std::string* AppInitConfig::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppInitConfig::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.AppInitConfig.appId)
}

// required int64 devId = 2;
inline bool AppInitConfig::has_devid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppInitConfig::set_has_devid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppInitConfig::clear_has_devid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppInitConfig::clear_devid() {
  devid_ = GOOGLE_LONGLONG(0);
  clear_has_devid();
}
inline ::google::protobuf::int64 AppInitConfig::devid() const {
  // @@protoc_insertion_point(field_get:etexas.AppInitConfig.devId)
  return devid_;
}
inline void AppInitConfig::set_devid(::google::protobuf::int64 value) {
  set_has_devid();
  devid_ = value;
  // @@protoc_insertion_point(field_set:etexas.AppInitConfig.devId)
}

// required string commandLine = 3;
inline bool AppInitConfig::has_commandline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppInitConfig::set_has_commandline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppInitConfig::clear_has_commandline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppInitConfig::clear_commandline() {
  if (commandline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commandline_->clear();
  }
  clear_has_commandline();
}
inline const ::std::string& AppInitConfig::commandline() const {
  // @@protoc_insertion_point(field_get:etexas.AppInitConfig.commandLine)
  return *commandline_;
}
inline void AppInitConfig::set_commandline(const ::std::string& value) {
  set_has_commandline();
  if (commandline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commandline_ = new ::std::string;
  }
  commandline_->assign(value);
  // @@protoc_insertion_point(field_set:etexas.AppInitConfig.commandLine)
}
inline void AppInitConfig::set_commandline(const char* value) {
  set_has_commandline();
  if (commandline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commandline_ = new ::std::string;
  }
  commandline_->assign(value);
  // @@protoc_insertion_point(field_set_char:etexas.AppInitConfig.commandLine)
}
inline void AppInitConfig::set_commandline(const char* value, size_t size) {
  set_has_commandline();
  if (commandline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commandline_ = new ::std::string;
  }
  commandline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etexas.AppInitConfig.commandLine)
}
inline ::std::string* AppInitConfig::mutable_commandline() {
  set_has_commandline();
  if (commandline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    commandline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:etexas.AppInitConfig.commandLine)
  return commandline_;
}
inline ::std::string* AppInitConfig::release_commandline() {
  clear_has_commandline();
  if (commandline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = commandline_;
    commandline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppInitConfig::set_allocated_commandline(::std::string* commandline) {
  if (commandline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete commandline_;
  }
  if (commandline) {
    set_has_commandline();
    commandline_ = commandline;
  } else {
    clear_has_commandline();
    commandline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.AppInitConfig.commandLine)
}

// -------------------------------------------------------------------

// OutputBundle

// required string appId = 1;
inline bool OutputBundle::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutputBundle::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutputBundle::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutputBundle::clear_appid() {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& OutputBundle::appid() const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.appId)
  return *appid_;
}
inline void OutputBundle::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set:etexas.OutputBundle.appId)
}
inline void OutputBundle::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set_char:etexas.OutputBundle.appId)
}
inline void OutputBundle::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etexas.OutputBundle.appId)
}
inline ::std::string* OutputBundle::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:etexas.OutputBundle.appId)
  return appid_;
}
inline ::std::string* OutputBundle::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OutputBundle::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.OutputBundle.appId)
}

// required int64 devId = 2;
inline bool OutputBundle::has_devid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutputBundle::set_has_devid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutputBundle::clear_has_devid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutputBundle::clear_devid() {
  devid_ = GOOGLE_LONGLONG(0);
  clear_has_devid();
}
inline ::google::protobuf::int64 OutputBundle::devid() const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.devId)
  return devid_;
}
inline void OutputBundle::set_devid(::google::protobuf::int64 value) {
  set_has_devid();
  devid_ = value;
  // @@protoc_insertion_point(field_set:etexas.OutputBundle.devId)
}

// required double x = 3;
inline bool OutputBundle::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutputBundle::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutputBundle::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutputBundle::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double OutputBundle::x() const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.x)
  return x_;
}
inline void OutputBundle::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:etexas.OutputBundle.x)
}

// required double y = 4;
inline bool OutputBundle::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutputBundle::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OutputBundle::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OutputBundle::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double OutputBundle::y() const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.y)
  return y_;
}
inline void OutputBundle::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:etexas.OutputBundle.y)
}

// required double z = 5;
inline bool OutputBundle::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutputBundle::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OutputBundle::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OutputBundle::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double OutputBundle::z() const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.z)
  return z_;
}
inline void OutputBundle::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:etexas.OutputBundle.z)
}

// repeated .etexas.VehicleCommandData vehComs = 6;
inline int OutputBundle::vehcoms_size() const {
  return vehcoms_.size();
}
inline void OutputBundle::clear_vehcoms() {
  vehcoms_.Clear();
}
inline const ::etexas::VehicleCommandData& OutputBundle::vehcoms(int index) const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.vehComs)
  return vehcoms_.Get(index);
}
inline ::etexas::VehicleCommandData* OutputBundle::mutable_vehcoms(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.OutputBundle.vehComs)
  return vehcoms_.Mutable(index);
}
inline ::etexas::VehicleCommandData* OutputBundle::add_vehcoms() {
  // @@protoc_insertion_point(field_add:etexas.OutputBundle.vehComs)
  return vehcoms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::VehicleCommandData >&
OutputBundle::vehcoms() const {
  // @@protoc_insertion_point(field_list:etexas.OutputBundle.vehComs)
  return vehcoms_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::VehicleCommandData >*
OutputBundle::mutable_vehcoms() {
  // @@protoc_insertion_point(field_mutable_list:etexas.OutputBundle.vehComs)
  return &vehcoms_;
}

// repeated .etexas.SignalCommandData sigComs = 7;
inline int OutputBundle::sigcoms_size() const {
  return sigcoms_.size();
}
inline void OutputBundle::clear_sigcoms() {
  sigcoms_.Clear();
}
inline const ::etexas::SignalCommandData& OutputBundle::sigcoms(int index) const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.sigComs)
  return sigcoms_.Get(index);
}
inline ::etexas::SignalCommandData* OutputBundle::mutable_sigcoms(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.OutputBundle.sigComs)
  return sigcoms_.Mutable(index);
}
inline ::etexas::SignalCommandData* OutputBundle::add_sigcoms() {
  // @@protoc_insertion_point(field_add:etexas.OutputBundle.sigComs)
  return sigcoms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::SignalCommandData >&
OutputBundle::sigcoms() const {
  // @@protoc_insertion_point(field_list:etexas.OutputBundle.sigComs)
  return sigcoms_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::SignalCommandData >*
OutputBundle::mutable_sigcoms() {
  // @@protoc_insertion_point(field_mutable_list:etexas.OutputBundle.sigComs)
  return &sigcoms_;
}

// repeated .etexas.WSMIndication messages = 8;
inline int OutputBundle::messages_size() const {
  return messages_.size();
}
inline void OutputBundle::clear_messages() {
  messages_.Clear();
}
inline const ::etexas::WSMIndication& OutputBundle::messages(int index) const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.messages)
  return messages_.Get(index);
}
inline ::etexas::WSMIndication* OutputBundle::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.OutputBundle.messages)
  return messages_.Mutable(index);
}
inline ::etexas::WSMIndication* OutputBundle::add_messages() {
  // @@protoc_insertion_point(field_add:etexas.OutputBundle.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::WSMIndication >&
OutputBundle::messages() const {
  // @@protoc_insertion_point(field_list:etexas.OutputBundle.messages)
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::WSMIndication >*
OutputBundle::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:etexas.OutputBundle.messages)
  return &messages_;
}

// repeated .etexas.LogData logs = 9;
inline int OutputBundle::logs_size() const {
  return logs_.size();
}
inline void OutputBundle::clear_logs() {
  logs_.Clear();
}
inline const ::etexas::LogData& OutputBundle::logs(int index) const {
  // @@protoc_insertion_point(field_get:etexas.OutputBundle.logs)
  return logs_.Get(index);
}
inline ::etexas::LogData* OutputBundle::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.OutputBundle.logs)
  return logs_.Mutable(index);
}
inline ::etexas::LogData* OutputBundle::add_logs() {
  // @@protoc_insertion_point(field_add:etexas.OutputBundle.logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::LogData >&
OutputBundle::logs() const {
  // @@protoc_insertion_point(field_list:etexas.OutputBundle.logs)
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::LogData >*
OutputBundle::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:etexas.OutputBundle.logs)
  return &logs_;
}

// -------------------------------------------------------------------

// VehicleCommandData

// required .etexas.VehicleCommandData.VehicleCommandClass commandClass = 1;
inline bool VehicleCommandData::has_commandclass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleCommandData::set_has_commandclass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleCommandData::clear_has_commandclass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleCommandData::clear_commandclass() {
  commandclass_ = 0;
  clear_has_commandclass();
}
inline ::etexas::VehicleCommandData_VehicleCommandClass VehicleCommandData::commandclass() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleCommandData.commandClass)
  return static_cast< ::etexas::VehicleCommandData_VehicleCommandClass >(commandclass_);
}
inline void VehicleCommandData::set_commandclass(::etexas::VehicleCommandData_VehicleCommandClass value) {
  assert(::etexas::VehicleCommandData_VehicleCommandClass_IsValid(value));
  set_has_commandclass();
  commandclass_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleCommandData.commandClass)
}

// required int32 command = 2;
inline bool VehicleCommandData::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleCommandData::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleCommandData::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleCommandData::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::google::protobuf::int32 VehicleCommandData::command() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleCommandData.command)
  return command_;
}
inline void VehicleCommandData::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleCommandData.command)
}

// required int32 vehicleId = 3;
inline bool VehicleCommandData::has_vehicleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleCommandData::set_has_vehicleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleCommandData::clear_has_vehicleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleCommandData::clear_vehicleid() {
  vehicleid_ = 0;
  clear_has_vehicleid();
}
inline ::google::protobuf::int32 VehicleCommandData::vehicleid() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleCommandData.vehicleId)
  return vehicleid_;
}
inline void VehicleCommandData::set_vehicleid(::google::protobuf::int32 value) {
  set_has_vehicleid();
  vehicleid_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleCommandData.vehicleId)
}

// optional double speed = 4;
inline bool VehicleCommandData::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleCommandData::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleCommandData::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleCommandData::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double VehicleCommandData::speed() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleCommandData.speed)
  return speed_;
}
inline void VehicleCommandData::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleCommandData.speed)
}

// -------------------------------------------------------------------

// SignalCommandData

// required int32 command = 1;
inline bool SignalCommandData::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalCommandData::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalCommandData::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalCommandData::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::google::protobuf::int32 SignalCommandData::command() const {
  // @@protoc_insertion_point(field_get:etexas.SignalCommandData.command)
  return command_;
}
inline void SignalCommandData::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:etexas.SignalCommandData.command)
}

// optional double time = 2;
inline bool SignalCommandData::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalCommandData::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalCommandData::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalCommandData::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double SignalCommandData::time() const {
  // @@protoc_insertion_point(field_get:etexas.SignalCommandData.time)
  return time_;
}
inline void SignalCommandData::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:etexas.SignalCommandData.time)
}

// -------------------------------------------------------------------

// LogData

// required double simTime = 1;
inline bool LogData::has_simtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogData::set_has_simtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogData::clear_has_simtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogData::clear_simtime() {
  simtime_ = 0;
  clear_has_simtime();
}
inline double LogData::simtime() const {
  // @@protoc_insertion_point(field_get:etexas.LogData.simTime)
  return simtime_;
}
inline void LogData::set_simtime(double value) {
  set_has_simtime();
  simtime_ = value;
  // @@protoc_insertion_point(field_set:etexas.LogData.simTime)
}

// required string key = 2;
inline bool LogData::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogData::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogData::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogData::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& LogData::key() const {
  // @@protoc_insertion_point(field_get:etexas.LogData.key)
  return *key_;
}
inline void LogData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:etexas.LogData.key)
}
inline void LogData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:etexas.LogData.key)
}
inline void LogData::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etexas.LogData.key)
}
inline ::std::string* LogData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:etexas.LogData.key)
  return key_;
}
inline ::std::string* LogData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.LogData.key)
}

// required string message = 3;
inline bool LogData::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogData::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogData::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogData::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& LogData::message() const {
  // @@protoc_insertion_point(field_get:etexas.LogData.message)
  return *message_;
}
inline void LogData::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:etexas.LogData.message)
}
inline void LogData::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:etexas.LogData.message)
}
inline void LogData::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etexas.LogData.message)
}
inline ::std::string* LogData::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:etexas.LogData.message)
  return message_;
}
inline ::std::string* LogData::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogData::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.LogData.message)
}

// -------------------------------------------------------------------

// InputBundle

// required double simTime = 1;
inline bool InputBundle::has_simtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InputBundle::set_has_simtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InputBundle::clear_has_simtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InputBundle::clear_simtime() {
  simtime_ = 0;
  clear_has_simtime();
}
inline double InputBundle::simtime() const {
  // @@protoc_insertion_point(field_get:etexas.InputBundle.simTime)
  return simtime_;
}
inline void InputBundle::set_simtime(double value) {
  set_has_simtime();
  simtime_ = value;
  // @@protoc_insertion_point(field_set:etexas.InputBundle.simTime)
}

// optional .etexas.RseModelData rseData = 2;
inline bool InputBundle::has_rsedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InputBundle::set_has_rsedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InputBundle::clear_has_rsedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InputBundle::clear_rsedata() {
  if (rsedata_ != NULL) rsedata_->::etexas::RseModelData::Clear();
  clear_has_rsedata();
}
inline const ::etexas::RseModelData& InputBundle::rsedata() const {
  // @@protoc_insertion_point(field_get:etexas.InputBundle.rseData)
  return rsedata_ != NULL ? *rsedata_ : *default_instance_->rsedata_;
}
inline ::etexas::RseModelData* InputBundle::mutable_rsedata() {
  set_has_rsedata();
  if (rsedata_ == NULL) rsedata_ = new ::etexas::RseModelData;
  // @@protoc_insertion_point(field_mutable:etexas.InputBundle.rseData)
  return rsedata_;
}
inline ::etexas::RseModelData* InputBundle::release_rsedata() {
  clear_has_rsedata();
  ::etexas::RseModelData* temp = rsedata_;
  rsedata_ = NULL;
  return temp;
}
inline void InputBundle::set_allocated_rsedata(::etexas::RseModelData* rsedata) {
  delete rsedata_;
  rsedata_ = rsedata;
  if (rsedata) {
    set_has_rsedata();
  } else {
    clear_has_rsedata();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.InputBundle.rseData)
}

// repeated .etexas.RseDevice rses = 3;
inline int InputBundle::rses_size() const {
  return rses_.size();
}
inline void InputBundle::clear_rses() {
  rses_.Clear();
}
inline const ::etexas::RseDevice& InputBundle::rses(int index) const {
  // @@protoc_insertion_point(field_get:etexas.InputBundle.rses)
  return rses_.Get(index);
}
inline ::etexas::RseDevice* InputBundle::mutable_rses(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.InputBundle.rses)
  return rses_.Mutable(index);
}
inline ::etexas::RseDevice* InputBundle::add_rses() {
  // @@protoc_insertion_point(field_add:etexas.InputBundle.rses)
  return rses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::RseDevice >&
InputBundle::rses() const {
  // @@protoc_insertion_point(field_list:etexas.InputBundle.rses)
  return rses_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::RseDevice >*
InputBundle::mutable_rses() {
  // @@protoc_insertion_point(field_mutable_list:etexas.InputBundle.rses)
  return &rses_;
}

// repeated .etexas.ObuDevice obus = 4;
inline int InputBundle::obus_size() const {
  return obus_.size();
}
inline void InputBundle::clear_obus() {
  obus_.Clear();
}
inline const ::etexas::ObuDevice& InputBundle::obus(int index) const {
  // @@protoc_insertion_point(field_get:etexas.InputBundle.obus)
  return obus_.Get(index);
}
inline ::etexas::ObuDevice* InputBundle::mutable_obus(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.InputBundle.obus)
  return obus_.Mutable(index);
}
inline ::etexas::ObuDevice* InputBundle::add_obus() {
  // @@protoc_insertion_point(field_add:etexas.InputBundle.obus)
  return obus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::ObuDevice >&
InputBundle::obus() const {
  // @@protoc_insertion_point(field_list:etexas.InputBundle.obus)
  return obus_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::ObuDevice >*
InputBundle::mutable_obus() {
  // @@protoc_insertion_point(field_mutable_list:etexas.InputBundle.obus)
  return &obus_;
}

// repeated .etexas.Tx messages = 5;
inline int InputBundle::messages_size() const {
  return messages_.size();
}
inline void InputBundle::clear_messages() {
  messages_.Clear();
}
inline const ::etexas::Tx& InputBundle::messages(int index) const {
  // @@protoc_insertion_point(field_get:etexas.InputBundle.messages)
  return messages_.Get(index);
}
inline ::etexas::Tx* InputBundle::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.InputBundle.messages)
  return messages_.Mutable(index);
}
inline ::etexas::Tx* InputBundle::add_messages() {
  // @@protoc_insertion_point(field_add:etexas.InputBundle.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::Tx >&
InputBundle::messages() const {
  // @@protoc_insertion_point(field_list:etexas.InputBundle.messages)
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::Tx >*
InputBundle::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:etexas.InputBundle.messages)
  return &messages_;
}

// repeated .etexas.AppDevMap appDevMap = 6;
inline int InputBundle::appdevmap_size() const {
  return appdevmap_.size();
}
inline void InputBundle::clear_appdevmap() {
  appdevmap_.Clear();
}
inline const ::etexas::AppDevMap& InputBundle::appdevmap(int index) const {
  // @@protoc_insertion_point(field_get:etexas.InputBundle.appDevMap)
  return appdevmap_.Get(index);
}
inline ::etexas::AppDevMap* InputBundle::mutable_appdevmap(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.InputBundle.appDevMap)
  return appdevmap_.Mutable(index);
}
inline ::etexas::AppDevMap* InputBundle::add_appdevmap() {
  // @@protoc_insertion_point(field_add:etexas.InputBundle.appDevMap)
  return appdevmap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::AppDevMap >&
InputBundle::appdevmap() const {
  // @@protoc_insertion_point(field_list:etexas.InputBundle.appDevMap)
  return appdevmap_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::AppDevMap >*
InputBundle::mutable_appdevmap() {
  // @@protoc_insertion_point(field_mutable_list:etexas.InputBundle.appDevMap)
  return &appdevmap_;
}

// -------------------------------------------------------------------

// RseDevice

// required int64 devId = 1;
inline bool RseDevice::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RseDevice::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RseDevice::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RseDevice::clear_devid() {
  devid_ = GOOGLE_LONGLONG(0);
  clear_has_devid();
}
inline ::google::protobuf::int64 RseDevice::devid() const {
  // @@protoc_insertion_point(field_get:etexas.RseDevice.devId)
  return devid_;
}
inline void RseDevice::set_devid(::google::protobuf::int64 value) {
  set_has_devid();
  devid_ = value;
  // @@protoc_insertion_point(field_set:etexas.RseDevice.devId)
}

// required double latitude = 2;
inline bool RseDevice::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RseDevice::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RseDevice::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RseDevice::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RseDevice::latitude() const {
  // @@protoc_insertion_point(field_get:etexas.RseDevice.latitude)
  return latitude_;
}
inline void RseDevice::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:etexas.RseDevice.latitude)
}

// required double longitude = 3;
inline bool RseDevice::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RseDevice::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RseDevice::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RseDevice::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RseDevice::longitude() const {
  // @@protoc_insertion_point(field_get:etexas.RseDevice.longitude)
  return longitude_;
}
inline void RseDevice::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:etexas.RseDevice.longitude)
}

// required double elevation = 4;
inline bool RseDevice::has_elevation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RseDevice::set_has_elevation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RseDevice::clear_has_elevation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RseDevice::clear_elevation() {
  elevation_ = 0;
  clear_has_elevation();
}
inline double RseDevice::elevation() const {
  // @@protoc_insertion_point(field_get:etexas.RseDevice.elevation)
  return elevation_;
}
inline void RseDevice::set_elevation(double value) {
  set_has_elevation();
  elevation_ = value;
  // @@protoc_insertion_point(field_set:etexas.RseDevice.elevation)
}

// repeated int64 messIds = 5;
inline int RseDevice::messids_size() const {
  return messids_.size();
}
inline void RseDevice::clear_messids() {
  messids_.Clear();
}
inline ::google::protobuf::int64 RseDevice::messids(int index) const {
  // @@protoc_insertion_point(field_get:etexas.RseDevice.messIds)
  return messids_.Get(index);
}
inline void RseDevice::set_messids(int index, ::google::protobuf::int64 value) {
  messids_.Set(index, value);
  // @@protoc_insertion_point(field_set:etexas.RseDevice.messIds)
}
inline void RseDevice::add_messids(::google::protobuf::int64 value) {
  messids_.Add(value);
  // @@protoc_insertion_point(field_add:etexas.RseDevice.messIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
RseDevice::messids() const {
  // @@protoc_insertion_point(field_list:etexas.RseDevice.messIds)
  return messids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
RseDevice::mutable_messids() {
  // @@protoc_insertion_point(field_mutable_list:etexas.RseDevice.messIds)
  return &messids_;
}

// -------------------------------------------------------------------

// ObuDevice

// required int64 devId = 1;
inline bool ObuDevice::has_devid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObuDevice::set_has_devid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObuDevice::clear_has_devid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObuDevice::clear_devid() {
  devid_ = GOOGLE_LONGLONG(0);
  clear_has_devid();
}
inline ::google::protobuf::int64 ObuDevice::devid() const {
  // @@protoc_insertion_point(field_get:etexas.ObuDevice.devId)
  return devid_;
}
inline void ObuDevice::set_devid(::google::protobuf::int64 value) {
  set_has_devid();
  devid_ = value;
  // @@protoc_insertion_point(field_set:etexas.ObuDevice.devId)
}

// required .etexas.VehicleData vehicle = 2;
inline bool ObuDevice::has_vehicle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObuDevice::set_has_vehicle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObuDevice::clear_has_vehicle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObuDevice::clear_vehicle() {
  if (vehicle_ != NULL) vehicle_->::etexas::VehicleData::Clear();
  clear_has_vehicle();
}
inline const ::etexas::VehicleData& ObuDevice::vehicle() const {
  // @@protoc_insertion_point(field_get:etexas.ObuDevice.vehicle)
  return vehicle_ != NULL ? *vehicle_ : *default_instance_->vehicle_;
}
inline ::etexas::VehicleData* ObuDevice::mutable_vehicle() {
  set_has_vehicle();
  if (vehicle_ == NULL) vehicle_ = new ::etexas::VehicleData;
  // @@protoc_insertion_point(field_mutable:etexas.ObuDevice.vehicle)
  return vehicle_;
}
inline ::etexas::VehicleData* ObuDevice::release_vehicle() {
  clear_has_vehicle();
  ::etexas::VehicleData* temp = vehicle_;
  vehicle_ = NULL;
  return temp;
}
inline void ObuDevice::set_allocated_vehicle(::etexas::VehicleData* vehicle) {
  delete vehicle_;
  vehicle_ = vehicle;
  if (vehicle) {
    set_has_vehicle();
  } else {
    clear_has_vehicle();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.ObuDevice.vehicle)
}

// repeated int64 messIds = 3;
inline int ObuDevice::messids_size() const {
  return messids_.size();
}
inline void ObuDevice::clear_messids() {
  messids_.Clear();
}
inline ::google::protobuf::int64 ObuDevice::messids(int index) const {
  // @@protoc_insertion_point(field_get:etexas.ObuDevice.messIds)
  return messids_.Get(index);
}
inline void ObuDevice::set_messids(int index, ::google::protobuf::int64 value) {
  messids_.Set(index, value);
  // @@protoc_insertion_point(field_set:etexas.ObuDevice.messIds)
}
inline void ObuDevice::add_messids(::google::protobuf::int64 value) {
  messids_.Add(value);
  // @@protoc_insertion_point(field_add:etexas.ObuDevice.messIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ObuDevice::messids() const {
  // @@protoc_insertion_point(field_list:etexas.ObuDevice.messIds)
  return messids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ObuDevice::mutable_messids() {
  // @@protoc_insertion_point(field_mutable_list:etexas.ObuDevice.messIds)
  return &messids_;
}

// -------------------------------------------------------------------

// VehicleData

// required int32 vehicleId = 1;
inline bool VehicleData::has_vehicleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleData::set_has_vehicleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleData::clear_has_vehicleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleData::clear_vehicleid() {
  vehicleid_ = 0;
  clear_has_vehicleid();
}
inline ::google::protobuf::int32 VehicleData::vehicleid() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.vehicleId)
  return vehicleid_;
}
inline void VehicleData::set_vehicleid(::google::protobuf::int32 value) {
  set_has_vehicleid();
  vehicleid_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.vehicleId)
}

// required double speed = 2;
inline bool VehicleData::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleData::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleData::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleData::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double VehicleData::speed() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.speed)
  return speed_;
}
inline void VehicleData::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.speed)
}

// required double acceleration = 3;
inline bool VehicleData::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleData::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleData::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleData::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
inline double VehicleData::acceleration() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.acceleration)
  return acceleration_;
}
inline void VehicleData::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.acceleration)
}

// required double length = 4;
inline bool VehicleData::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleData::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleData::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleData::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double VehicleData::length() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.length)
  return length_;
}
inline void VehicleData::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.length)
}

// required double width = 5;
inline bool VehicleData::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleData::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleData::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleData::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double VehicleData::width() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.width)
  return width_;
}
inline void VehicleData::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.width)
}

// required int32 laneId = 6;
inline bool VehicleData::has_laneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleData::set_has_laneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleData::clear_has_laneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleData::clear_laneid() {
  laneid_ = 0;
  clear_has_laneid();
}
inline ::google::protobuf::int32 VehicleData::laneid() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.laneId)
  return laneid_;
}
inline void VehicleData::set_laneid(::google::protobuf::int32 value) {
  set_has_laneid();
  laneid_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.laneId)
}

// required double heading = 7;
inline bool VehicleData::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleData::set_has_heading() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VehicleData::clear_has_heading() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VehicleData::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double VehicleData::heading() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.heading)
  return heading_;
}
inline void VehicleData::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.heading)
}

// required double height = 8;
inline bool VehicleData::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleData::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VehicleData::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VehicleData::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double VehicleData::height() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.height)
  return height_;
}
inline void VehicleData::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.height)
}

// optional .etexas.VehicleData.VehicleType type = 9;
inline bool VehicleData::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleData::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VehicleData::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VehicleData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::etexas::VehicleData_VehicleType VehicleData::type() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.type)
  return static_cast< ::etexas::VehicleData_VehicleType >(type_);
}
inline void VehicleData::set_type(::etexas::VehicleData_VehicleType value) {
  assert(::etexas::VehicleData_VehicleType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.type)
}

// required bool brakePressed = 10;
inline bool VehicleData::has_brakepressed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleData::set_has_brakepressed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VehicleData::clear_has_brakepressed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VehicleData::clear_brakepressed() {
  brakepressed_ = false;
  clear_has_brakepressed();
}
inline bool VehicleData::brakepressed() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.brakePressed)
  return brakepressed_;
}
inline void VehicleData::set_brakepressed(bool value) {
  set_has_brakepressed();
  brakepressed_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.brakePressed)
}

// required double latitude = 11;
inline bool VehicleData::has_latitude() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleData::set_has_latitude() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VehicleData::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VehicleData::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double VehicleData::latitude() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.latitude)
  return latitude_;
}
inline void VehicleData::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.latitude)
}

// required double longitude = 12;
inline bool VehicleData::has_longitude() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleData::set_has_longitude() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VehicleData::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VehicleData::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double VehicleData::longitude() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.longitude)
  return longitude_;
}
inline void VehicleData::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.longitude)
}

// required double elevation = 13;
inline bool VehicleData::has_elevation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleData::set_has_elevation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VehicleData::clear_has_elevation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VehicleData::clear_elevation() {
  elevation_ = 0;
  clear_has_elevation();
}
inline double VehicleData::elevation() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.elevation)
  return elevation_;
}
inline void VehicleData::set_elevation(double value) {
  set_has_elevation();
  elevation_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.elevation)
}

// required double x = 14;
inline bool VehicleData::has_x() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleData::set_has_x() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VehicleData::clear_has_x() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VehicleData::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double VehicleData::x() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.x)
  return x_;
}
inline void VehicleData::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.x)
}

// required double y = 15;
inline bool VehicleData::has_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VehicleData::set_has_y() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VehicleData::clear_has_y() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VehicleData::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double VehicleData::y() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.y)
  return y_;
}
inline void VehicleData::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.y)
}

// required double z = 16;
inline bool VehicleData::has_z() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VehicleData::set_has_z() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VehicleData::clear_has_z() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VehicleData::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double VehicleData::z() const {
  // @@protoc_insertion_point(field_get:etexas.VehicleData.z)
  return z_;
}
inline void VehicleData::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:etexas.VehicleData.z)
}

// -------------------------------------------------------------------

// Tx

// required int64 messId = 1;
inline bool Tx::has_messid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tx::set_has_messid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tx::clear_has_messid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tx::clear_messid() {
  messid_ = GOOGLE_LONGLONG(0);
  clear_has_messid();
}
inline ::google::protobuf::int64 Tx::messid() const {
  // @@protoc_insertion_point(field_get:etexas.Tx.messId)
  return messid_;
}
inline void Tx::set_messid(::google::protobuf::int64 value) {
  set_has_messid();
  messid_ = value;
  // @@protoc_insertion_point(field_set:etexas.Tx.messId)
}

// required .etexas.WSMIndication mess = 2;
inline bool Tx::has_mess() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tx::set_has_mess() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tx::clear_has_mess() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tx::clear_mess() {
  if (mess_ != NULL) mess_->::etexas::WSMIndication::Clear();
  clear_has_mess();
}
inline const ::etexas::WSMIndication& Tx::mess() const {
  // @@protoc_insertion_point(field_get:etexas.Tx.mess)
  return mess_ != NULL ? *mess_ : *default_instance_->mess_;
}
inline ::etexas::WSMIndication* Tx::mutable_mess() {
  set_has_mess();
  if (mess_ == NULL) mess_ = new ::etexas::WSMIndication;
  // @@protoc_insertion_point(field_mutable:etexas.Tx.mess)
  return mess_;
}
inline ::etexas::WSMIndication* Tx::release_mess() {
  clear_has_mess();
  ::etexas::WSMIndication* temp = mess_;
  mess_ = NULL;
  return temp;
}
inline void Tx::set_allocated_mess(::etexas::WSMIndication* mess) {
  delete mess_;
  mess_ = mess;
  if (mess) {
    set_has_mess();
  } else {
    clear_has_mess();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.Tx.mess)
}

// -------------------------------------------------------------------

// WSMIndication

// required bytes data = 1;
inline bool WSMIndication::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSMIndication::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSMIndication::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSMIndication::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& WSMIndication::data() const {
  // @@protoc_insertion_point(field_get:etexas.WSMIndication.data)
  return *data_;
}
inline void WSMIndication::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:etexas.WSMIndication.data)
}
inline void WSMIndication::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:etexas.WSMIndication.data)
}
inline void WSMIndication::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etexas.WSMIndication.data)
}
inline ::std::string* WSMIndication::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:etexas.WSMIndication.data)
  return data_;
}
inline ::std::string* WSMIndication::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WSMIndication::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.WSMIndication.data)
}

// required int32 size = 2;
inline bool WSMIndication::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSMIndication::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSMIndication::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSMIndication::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 WSMIndication::size() const {
  // @@protoc_insertion_point(field_get:etexas.WSMIndication.size)
  return size_;
}
inline void WSMIndication::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:etexas.WSMIndication.size)
}

// required int64 dest = 3;
inline bool WSMIndication::has_dest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WSMIndication::set_has_dest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WSMIndication::clear_has_dest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WSMIndication::clear_dest() {
  dest_ = GOOGLE_LONGLONG(0);
  clear_has_dest();
}
inline ::google::protobuf::int64 WSMIndication::dest() const {
  // @@protoc_insertion_point(field_get:etexas.WSMIndication.dest)
  return dest_;
}
inline void WSMIndication::set_dest(::google::protobuf::int64 value) {
  set_has_dest();
  dest_ = value;
  // @@protoc_insertion_point(field_set:etexas.WSMIndication.dest)
}

// required int64 src = 4;
inline bool WSMIndication::has_src() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WSMIndication::set_has_src() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WSMIndication::clear_has_src() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WSMIndication::clear_src() {
  src_ = GOOGLE_LONGLONG(0);
  clear_has_src();
}
inline ::google::protobuf::int64 WSMIndication::src() const {
  // @@protoc_insertion_point(field_get:etexas.WSMIndication.src)
  return src_;
}
inline void WSMIndication::set_src(::google::protobuf::int64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:etexas.WSMIndication.src)
}

// -------------------------------------------------------------------

// AppDevMap

// required string appId = 1;
inline bool AppDevMap::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppDevMap::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppDevMap::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppDevMap::clear_appid() {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& AppDevMap::appid() const {
  // @@protoc_insertion_point(field_get:etexas.AppDevMap.appId)
  return *appid_;
}
inline void AppDevMap::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set:etexas.AppDevMap.appId)
}
inline void AppDevMap::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set_char:etexas.AppDevMap.appId)
}
inline void AppDevMap::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etexas.AppDevMap.appId)
}
inline ::std::string* AppDevMap::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:etexas.AppDevMap.appId)
  return appid_;
}
inline ::std::string* AppDevMap::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppDevMap::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.AppDevMap.appId)
}

// repeated int64 devIds = 2;
inline int AppDevMap::devids_size() const {
  return devids_.size();
}
inline void AppDevMap::clear_devids() {
  devids_.Clear();
}
inline ::google::protobuf::int64 AppDevMap::devids(int index) const {
  // @@protoc_insertion_point(field_get:etexas.AppDevMap.devIds)
  return devids_.Get(index);
}
inline void AppDevMap::set_devids(int index, ::google::protobuf::int64 value) {
  devids_.Set(index, value);
  // @@protoc_insertion_point(field_set:etexas.AppDevMap.devIds)
}
inline void AppDevMap::add_devids(::google::protobuf::int64 value) {
  devids_.Add(value);
  // @@protoc_insertion_point(field_add:etexas.AppDevMap.devIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AppDevMap::devids() const {
  // @@protoc_insertion_point(field_list:etexas.AppDevMap.devIds)
  return devids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AppDevMap::mutable_devids() {
  // @@protoc_insertion_point(field_mutable_list:etexas.AppDevMap.devIds)
  return &devids_;
}

// -------------------------------------------------------------------

// RseModelData

// repeated .etexas.SignalManagerEntry signalMap = 1;
inline int RseModelData::signalmap_size() const {
  return signalmap_.size();
}
inline void RseModelData::clear_signalmap() {
  signalmap_.Clear();
}
inline const ::etexas::SignalManagerEntry& RseModelData::signalmap(int index) const {
  // @@protoc_insertion_point(field_get:etexas.RseModelData.signalMap)
  return signalmap_.Get(index);
}
inline ::etexas::SignalManagerEntry* RseModelData::mutable_signalmap(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.RseModelData.signalMap)
  return signalmap_.Mutable(index);
}
inline ::etexas::SignalManagerEntry* RseModelData::add_signalmap() {
  // @@protoc_insertion_point(field_add:etexas.RseModelData.signalMap)
  return signalmap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerEntry >&
RseModelData::signalmap() const {
  // @@protoc_insertion_point(field_list:etexas.RseModelData.signalMap)
  return signalmap_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerEntry >*
RseModelData::mutable_signalmap() {
  // @@protoc_insertion_point(field_mutable_list:etexas.RseModelData.signalMap)
  return &signalmap_;
}

// repeated .etexas.DetectorManagerEntry detectorMap = 2;
inline int RseModelData::detectormap_size() const {
  return detectormap_.size();
}
inline void RseModelData::clear_detectormap() {
  detectormap_.Clear();
}
inline const ::etexas::DetectorManagerEntry& RseModelData::detectormap(int index) const {
  // @@protoc_insertion_point(field_get:etexas.RseModelData.detectorMap)
  return detectormap_.Get(index);
}
inline ::etexas::DetectorManagerEntry* RseModelData::mutable_detectormap(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.RseModelData.detectorMap)
  return detectormap_.Mutable(index);
}
inline ::etexas::DetectorManagerEntry* RseModelData::add_detectormap() {
  // @@protoc_insertion_point(field_add:etexas.RseModelData.detectorMap)
  return detectormap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerEntry >&
RseModelData::detectormap() const {
  // @@protoc_insertion_point(field_list:etexas.RseModelData.detectorMap)
  return detectormap_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerEntry >*
RseModelData::mutable_detectormap() {
  // @@protoc_insertion_point(field_mutable_list:etexas.RseModelData.detectorMap)
  return &detectormap_;
}

// repeated .etexas.LaneManagerEntry laneMap = 3;
inline int RseModelData::lanemap_size() const {
  return lanemap_.size();
}
inline void RseModelData::clear_lanemap() {
  lanemap_.Clear();
}
inline const ::etexas::LaneManagerEntry& RseModelData::lanemap(int index) const {
  // @@protoc_insertion_point(field_get:etexas.RseModelData.laneMap)
  return lanemap_.Get(index);
}
inline ::etexas::LaneManagerEntry* RseModelData::mutable_lanemap(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.RseModelData.laneMap)
  return lanemap_.Mutable(index);
}
inline ::etexas::LaneManagerEntry* RseModelData::add_lanemap() {
  // @@protoc_insertion_point(field_add:etexas.RseModelData.laneMap)
  return lanemap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerEntry >&
RseModelData::lanemap() const {
  // @@protoc_insertion_point(field_list:etexas.RseModelData.laneMap)
  return lanemap_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerEntry >*
RseModelData::mutable_lanemap() {
  // @@protoc_insertion_point(field_mutable_list:etexas.RseModelData.laneMap)
  return &lanemap_;
}

// -------------------------------------------------------------------

// SignalManagerEntry

// optional int32 key = 1;
inline bool SignalManagerEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalManagerEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalManagerEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalManagerEntry::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 SignalManagerEntry::key() const {
  // @@protoc_insertion_point(field_get:etexas.SignalManagerEntry.key)
  return key_;
}
inline void SignalManagerEntry::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:etexas.SignalManagerEntry.key)
}

// optional .etexas.SignalManagerData value = 2;
inline bool SignalManagerEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalManagerEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalManagerEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalManagerEntry::clear_value() {
  if (value_ != NULL) value_->::etexas::SignalManagerData::Clear();
  clear_has_value();
}
inline const ::etexas::SignalManagerData& SignalManagerEntry::value() const {
  // @@protoc_insertion_point(field_get:etexas.SignalManagerEntry.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::etexas::SignalManagerData* SignalManagerEntry::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::etexas::SignalManagerData;
  // @@protoc_insertion_point(field_mutable:etexas.SignalManagerEntry.value)
  return value_;
}
inline ::etexas::SignalManagerData* SignalManagerEntry::release_value() {
  clear_has_value();
  ::etexas::SignalManagerData* temp = value_;
  value_ = NULL;
  return temp;
}
inline void SignalManagerEntry::set_allocated_value(::etexas::SignalManagerData* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.SignalManagerEntry.value)
}

// -------------------------------------------------------------------

// SignalManagerData_SignalIndicationData

// required int32 laneId = 1;
inline bool SignalManagerData_SignalIndicationData::has_laneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalManagerData_SignalIndicationData::set_has_laneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalManagerData_SignalIndicationData::clear_has_laneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalManagerData_SignalIndicationData::clear_laneid() {
  laneid_ = 0;
  clear_has_laneid();
}
inline ::google::protobuf::int32 SignalManagerData_SignalIndicationData::laneid() const {
  // @@protoc_insertion_point(field_get:etexas.SignalManagerData.SignalIndicationData.laneId)
  return laneid_;
}
inline void SignalManagerData_SignalIndicationData::set_laneid(::google::protobuf::int32 value) {
  set_has_laneid();
  laneid_ = value;
  // @@protoc_insertion_point(field_set:etexas.SignalManagerData.SignalIndicationData.laneId)
}

// optional double timeToChange = 2;
inline bool SignalManagerData_SignalIndicationData::has_timetochange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalManagerData_SignalIndicationData::set_has_timetochange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalManagerData_SignalIndicationData::clear_has_timetochange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalManagerData_SignalIndicationData::clear_timetochange() {
  timetochange_ = 0;
  clear_has_timetochange();
}
inline double SignalManagerData_SignalIndicationData::timetochange() const {
  // @@protoc_insertion_point(field_get:etexas.SignalManagerData.SignalIndicationData.timeToChange)
  return timetochange_;
}
inline void SignalManagerData_SignalIndicationData::set_timetochange(double value) {
  set_has_timetochange();
  timetochange_ = value;
  // @@protoc_insertion_point(field_set:etexas.SignalManagerData.SignalIndicationData.timeToChange)
}

// optional .etexas.SignalManagerData.SignalIndicationData.Color color = 3;
inline bool SignalManagerData_SignalIndicationData::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignalManagerData_SignalIndicationData::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignalManagerData_SignalIndicationData::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignalManagerData_SignalIndicationData::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::etexas::SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData::color() const {
  // @@protoc_insertion_point(field_get:etexas.SignalManagerData.SignalIndicationData.color)
  return static_cast< ::etexas::SignalManagerData_SignalIndicationData_Color >(color_);
}
inline void SignalManagerData_SignalIndicationData::set_color(::etexas::SignalManagerData_SignalIndicationData_Color value) {
  assert(::etexas::SignalManagerData_SignalIndicationData_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:etexas.SignalManagerData.SignalIndicationData.color)
}

// optional .etexas.SignalManagerData.SignalIndicationData.Type type = 4;
inline bool SignalManagerData_SignalIndicationData::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalManagerData_SignalIndicationData::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalManagerData_SignalIndicationData::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalManagerData_SignalIndicationData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::etexas::SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::type() const {
  // @@protoc_insertion_point(field_get:etexas.SignalManagerData.SignalIndicationData.type)
  return static_cast< ::etexas::SignalManagerData_SignalIndicationData_Type >(type_);
}
inline void SignalManagerData_SignalIndicationData::set_type(::etexas::SignalManagerData_SignalIndicationData_Type value) {
  assert(::etexas::SignalManagerData_SignalIndicationData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:etexas.SignalManagerData.SignalIndicationData.type)
}

// optional .etexas.SignalManagerData.SignalIndicationData.State state = 5;
inline bool SignalManagerData_SignalIndicationData::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalManagerData_SignalIndicationData::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalManagerData_SignalIndicationData::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalManagerData_SignalIndicationData::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::etexas::SignalManagerData_SignalIndicationData_State SignalManagerData_SignalIndicationData::state() const {
  // @@protoc_insertion_point(field_get:etexas.SignalManagerData.SignalIndicationData.state)
  return static_cast< ::etexas::SignalManagerData_SignalIndicationData_State >(state_);
}
inline void SignalManagerData_SignalIndicationData::set_state(::etexas::SignalManagerData_SignalIndicationData_State value) {
  assert(::etexas::SignalManagerData_SignalIndicationData_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:etexas.SignalManagerData.SignalIndicationData.state)
}

// -------------------------------------------------------------------

// SignalManagerData

// repeated .etexas.SignalManagerData.SignalIndicationData signalIndications = 1;
inline int SignalManagerData::signalindications_size() const {
  return signalindications_.size();
}
inline void SignalManagerData::clear_signalindications() {
  signalindications_.Clear();
}
inline const ::etexas::SignalManagerData_SignalIndicationData& SignalManagerData::signalindications(int index) const {
  // @@protoc_insertion_point(field_get:etexas.SignalManagerData.signalIndications)
  return signalindications_.Get(index);
}
inline ::etexas::SignalManagerData_SignalIndicationData* SignalManagerData::mutable_signalindications(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.SignalManagerData.signalIndications)
  return signalindications_.Mutable(index);
}
inline ::etexas::SignalManagerData_SignalIndicationData* SignalManagerData::add_signalindications() {
  // @@protoc_insertion_point(field_add:etexas.SignalManagerData.signalIndications)
  return signalindications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerData_SignalIndicationData >&
SignalManagerData::signalindications() const {
  // @@protoc_insertion_point(field_list:etexas.SignalManagerData.signalIndications)
  return signalindications_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::SignalManagerData_SignalIndicationData >*
SignalManagerData::mutable_signalindications() {
  // @@protoc_insertion_point(field_mutable_list:etexas.SignalManagerData.signalIndications)
  return &signalindications_;
}

// -------------------------------------------------------------------

// DetectorManagerData_DetectorData_DetectorEventData

// required int32 detectorId = 1;
inline bool DetectorManagerData_DetectorData_DetectorEventData::has_detectorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_has_detectorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_has_detectorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_detectorid() {
  detectorid_ = 0;
  clear_has_detectorid();
}
inline ::google::protobuf::int32 DetectorManagerData_DetectorData_DetectorEventData::detectorid() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.DetectorEventData.detectorId)
  return detectorid_;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_detectorid(::google::protobuf::int32 value) {
  set_has_detectorid();
  detectorid_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.DetectorEventData.detectorId)
}

// optional int32 pulse = 2;
inline bool DetectorManagerData_DetectorData_DetectorEventData::has_pulse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_has_pulse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_has_pulse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_pulse() {
  pulse_ = 0;
  clear_has_pulse();
}
inline ::google::protobuf::int32 DetectorManagerData_DetectorData_DetectorEventData::pulse() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.DetectorEventData.pulse)
  return pulse_;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_pulse(::google::protobuf::int32 value) {
  set_has_pulse();
  pulse_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.DetectorEventData.pulse)
}

// optional bool presence = 3;
inline bool DetectorManagerData_DetectorData_DetectorEventData::has_presence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_has_presence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_has_presence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_presence() {
  presence_ = false;
  clear_has_presence();
}
inline bool DetectorManagerData_DetectorData_DetectorEventData::presence() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.DetectorEventData.presence)
  return presence_;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_presence(bool value) {
  set_has_presence();
  presence_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.DetectorEventData.presence)
}

// optional double speed = 4;
inline bool DetectorManagerData_DetectorData_DetectorEventData::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double DetectorManagerData_DetectorData_DetectorEventData::speed() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.DetectorEventData.speed)
  return speed_;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.DetectorEventData.speed)
}

// optional double length = 5;
inline bool DetectorManagerData_DetectorData_DetectorEventData::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double DetectorManagerData_DetectorData_DetectorEventData::length() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.DetectorEventData.length)
  return length_;
}
inline void DetectorManagerData_DetectorData_DetectorEventData::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.DetectorEventData.length)
}

// -------------------------------------------------------------------

// DetectorManagerData_DetectorData_PolygonData

// required int32 npoints = 1;
inline bool DetectorManagerData_DetectorData_PolygonData::has_npoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectorManagerData_DetectorData_PolygonData::set_has_npoints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectorManagerData_DetectorData_PolygonData::clear_has_npoints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectorManagerData_DetectorData_PolygonData::clear_npoints() {
  npoints_ = 0;
  clear_has_npoints();
}
inline ::google::protobuf::int32 DetectorManagerData_DetectorData_PolygonData::npoints() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.PolygonData.npoints)
  return npoints_;
}
inline void DetectorManagerData_DetectorData_PolygonData::set_npoints(::google::protobuf::int32 value) {
  set_has_npoints();
  npoints_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.PolygonData.npoints)
}

// repeated int32 xpoints = 2;
inline int DetectorManagerData_DetectorData_PolygonData::xpoints_size() const {
  return xpoints_.size();
}
inline void DetectorManagerData_DetectorData_PolygonData::clear_xpoints() {
  xpoints_.Clear();
}
inline ::google::protobuf::int32 DetectorManagerData_DetectorData_PolygonData::xpoints(int index) const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.PolygonData.xpoints)
  return xpoints_.Get(index);
}
inline void DetectorManagerData_DetectorData_PolygonData::set_xpoints(int index, ::google::protobuf::int32 value) {
  xpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.PolygonData.xpoints)
}
inline void DetectorManagerData_DetectorData_PolygonData::add_xpoints(::google::protobuf::int32 value) {
  xpoints_.Add(value);
  // @@protoc_insertion_point(field_add:etexas.DetectorManagerData.DetectorData.PolygonData.xpoints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DetectorManagerData_DetectorData_PolygonData::xpoints() const {
  // @@protoc_insertion_point(field_list:etexas.DetectorManagerData.DetectorData.PolygonData.xpoints)
  return xpoints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DetectorManagerData_DetectorData_PolygonData::mutable_xpoints() {
  // @@protoc_insertion_point(field_mutable_list:etexas.DetectorManagerData.DetectorData.PolygonData.xpoints)
  return &xpoints_;
}

// repeated int32 ypoints = 3;
inline int DetectorManagerData_DetectorData_PolygonData::ypoints_size() const {
  return ypoints_.size();
}
inline void DetectorManagerData_DetectorData_PolygonData::clear_ypoints() {
  ypoints_.Clear();
}
inline ::google::protobuf::int32 DetectorManagerData_DetectorData_PolygonData::ypoints(int index) const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.PolygonData.ypoints)
  return ypoints_.Get(index);
}
inline void DetectorManagerData_DetectorData_PolygonData::set_ypoints(int index, ::google::protobuf::int32 value) {
  ypoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.PolygonData.ypoints)
}
inline void DetectorManagerData_DetectorData_PolygonData::add_ypoints(::google::protobuf::int32 value) {
  ypoints_.Add(value);
  // @@protoc_insertion_point(field_add:etexas.DetectorManagerData.DetectorData.PolygonData.ypoints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DetectorManagerData_DetectorData_PolygonData::ypoints() const {
  // @@protoc_insertion_point(field_list:etexas.DetectorManagerData.DetectorData.PolygonData.ypoints)
  return ypoints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DetectorManagerData_DetectorData_PolygonData::mutable_ypoints() {
  // @@protoc_insertion_point(field_mutable_list:etexas.DetectorManagerData.DetectorData.PolygonData.ypoints)
  return &ypoints_;
}

// -------------------------------------------------------------------

// DetectorManagerData_DetectorData

// required int32 detectorId = 1;
inline bool DetectorManagerData_DetectorData::has_detectorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectorManagerData_DetectorData::set_has_detectorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectorManagerData_DetectorData::clear_has_detectorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectorManagerData_DetectorData::clear_detectorid() {
  detectorid_ = 0;
  clear_has_detectorid();
}
inline ::google::protobuf::int32 DetectorManagerData_DetectorData::detectorid() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.detectorId)
  return detectorid_;
}
inline void DetectorManagerData_DetectorData::set_detectorid(::google::protobuf::int32 value) {
  set_has_detectorid();
  detectorid_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.detectorId)
}

// repeated int32 laneIds = 2;
inline int DetectorManagerData_DetectorData::laneids_size() const {
  return laneids_.size();
}
inline void DetectorManagerData_DetectorData::clear_laneids() {
  laneids_.Clear();
}
inline ::google::protobuf::int32 DetectorManagerData_DetectorData::laneids(int index) const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.laneIds)
  return laneids_.Get(index);
}
inline void DetectorManagerData_DetectorData::set_laneids(int index, ::google::protobuf::int32 value) {
  laneids_.Set(index, value);
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.laneIds)
}
inline void DetectorManagerData_DetectorData::add_laneids(::google::protobuf::int32 value) {
  laneids_.Add(value);
  // @@protoc_insertion_point(field_add:etexas.DetectorManagerData.DetectorData.laneIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DetectorManagerData_DetectorData::laneids() const {
  // @@protoc_insertion_point(field_list:etexas.DetectorManagerData.DetectorData.laneIds)
  return laneids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DetectorManagerData_DetectorData::mutable_laneids() {
  // @@protoc_insertion_point(field_mutable_list:etexas.DetectorManagerData.DetectorData.laneIds)
  return &laneids_;
}

// optional bool presenceDetectCap = 3;
inline bool DetectorManagerData_DetectorData::has_presencedetectcap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectorManagerData_DetectorData::set_has_presencedetectcap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectorManagerData_DetectorData::clear_has_presencedetectcap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectorManagerData_DetectorData::clear_presencedetectcap() {
  presencedetectcap_ = false;
  clear_has_presencedetectcap();
}
inline bool DetectorManagerData_DetectorData::presencedetectcap() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.presenceDetectCap)
  return presencedetectcap_;
}
inline void DetectorManagerData_DetectorData::set_presencedetectcap(bool value) {
  set_has_presencedetectcap();
  presencedetectcap_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.presenceDetectCap)
}

// optional bool pulseDetectCap = 4;
inline bool DetectorManagerData_DetectorData::has_pulsedetectcap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectorManagerData_DetectorData::set_has_pulsedetectcap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectorManagerData_DetectorData::clear_has_pulsedetectcap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectorManagerData_DetectorData::clear_pulsedetectcap() {
  pulsedetectcap_ = false;
  clear_has_pulsedetectcap();
}
inline bool DetectorManagerData_DetectorData::pulsedetectcap() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.pulseDetectCap)
  return pulsedetectcap_;
}
inline void DetectorManagerData_DetectorData::set_pulsedetectcap(bool value) {
  set_has_pulsedetectcap();
  pulsedetectcap_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.pulseDetectCap)
}

// optional bool speedDetectCap = 5;
inline bool DetectorManagerData_DetectorData::has_speeddetectcap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectorManagerData_DetectorData::set_has_speeddetectcap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectorManagerData_DetectorData::clear_has_speeddetectcap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectorManagerData_DetectorData::clear_speeddetectcap() {
  speeddetectcap_ = false;
  clear_has_speeddetectcap();
}
inline bool DetectorManagerData_DetectorData::speeddetectcap() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.speedDetectCap)
  return speeddetectcap_;
}
inline void DetectorManagerData_DetectorData::set_speeddetectcap(bool value) {
  set_has_speeddetectcap();
  speeddetectcap_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.speedDetectCap)
}

// optional bool lengthDetectCap = 6;
inline bool DetectorManagerData_DetectorData::has_lengthdetectcap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectorManagerData_DetectorData::set_has_lengthdetectcap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectorManagerData_DetectorData::clear_has_lengthdetectcap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectorManagerData_DetectorData::clear_lengthdetectcap() {
  lengthdetectcap_ = false;
  clear_has_lengthdetectcap();
}
inline bool DetectorManagerData_DetectorData::lengthdetectcap() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.lengthDetectCap)
  return lengthdetectcap_;
}
inline void DetectorManagerData_DetectorData::set_lengthdetectcap(bool value) {
  set_has_lengthdetectcap();
  lengthdetectcap_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerData.DetectorData.lengthDetectCap)
}

// optional .etexas.DetectorManagerData.DetectorData.DetectorEventData detEvent = 7;
inline bool DetectorManagerData_DetectorData::has_detevent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectorManagerData_DetectorData::set_has_detevent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectorManagerData_DetectorData::clear_has_detevent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectorManagerData_DetectorData::clear_detevent() {
  if (detevent_ != NULL) detevent_->::etexas::DetectorManagerData_DetectorData_DetectorEventData::Clear();
  clear_has_detevent();
}
inline const ::etexas::DetectorManagerData_DetectorData_DetectorEventData& DetectorManagerData_DetectorData::detevent() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.detEvent)
  return detevent_ != NULL ? *detevent_ : *default_instance_->detevent_;
}
inline ::etexas::DetectorManagerData_DetectorData_DetectorEventData* DetectorManagerData_DetectorData::mutable_detevent() {
  set_has_detevent();
  if (detevent_ == NULL) detevent_ = new ::etexas::DetectorManagerData_DetectorData_DetectorEventData;
  // @@protoc_insertion_point(field_mutable:etexas.DetectorManagerData.DetectorData.detEvent)
  return detevent_;
}
inline ::etexas::DetectorManagerData_DetectorData_DetectorEventData* DetectorManagerData_DetectorData::release_detevent() {
  clear_has_detevent();
  ::etexas::DetectorManagerData_DetectorData_DetectorEventData* temp = detevent_;
  detevent_ = NULL;
  return temp;
}
inline void DetectorManagerData_DetectorData::set_allocated_detevent(::etexas::DetectorManagerData_DetectorData_DetectorEventData* detevent) {
  delete detevent_;
  detevent_ = detevent;
  if (detevent) {
    set_has_detevent();
  } else {
    clear_has_detevent();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.DetectorManagerData.DetectorData.detEvent)
}

// optional .etexas.DetectorManagerData.DetectorData.PolygonData area = 8;
inline bool DetectorManagerData_DetectorData::has_area() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectorManagerData_DetectorData::set_has_area() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectorManagerData_DetectorData::clear_has_area() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectorManagerData_DetectorData::clear_area() {
  if (area_ != NULL) area_->::etexas::DetectorManagerData_DetectorData_PolygonData::Clear();
  clear_has_area();
}
inline const ::etexas::DetectorManagerData_DetectorData_PolygonData& DetectorManagerData_DetectorData::area() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.DetectorData.area)
  return area_ != NULL ? *area_ : *default_instance_->area_;
}
inline ::etexas::DetectorManagerData_DetectorData_PolygonData* DetectorManagerData_DetectorData::mutable_area() {
  set_has_area();
  if (area_ == NULL) area_ = new ::etexas::DetectorManagerData_DetectorData_PolygonData;
  // @@protoc_insertion_point(field_mutable:etexas.DetectorManagerData.DetectorData.area)
  return area_;
}
inline ::etexas::DetectorManagerData_DetectorData_PolygonData* DetectorManagerData_DetectorData::release_area() {
  clear_has_area();
  ::etexas::DetectorManagerData_DetectorData_PolygonData* temp = area_;
  area_ = NULL;
  return temp;
}
inline void DetectorManagerData_DetectorData::set_allocated_area(::etexas::DetectorManagerData_DetectorData_PolygonData* area) {
  delete area_;
  area_ = area;
  if (area) {
    set_has_area();
  } else {
    clear_has_area();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.DetectorManagerData.DetectorData.area)
}

// -------------------------------------------------------------------

// DetectorManagerData

// repeated .etexas.DetectorManagerData.DetectorData detectors = 1;
inline int DetectorManagerData::detectors_size() const {
  return detectors_.size();
}
inline void DetectorManagerData::clear_detectors() {
  detectors_.Clear();
}
inline const ::etexas::DetectorManagerData_DetectorData& DetectorManagerData::detectors(int index) const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerData.detectors)
  return detectors_.Get(index);
}
inline ::etexas::DetectorManagerData_DetectorData* DetectorManagerData::mutable_detectors(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.DetectorManagerData.detectors)
  return detectors_.Mutable(index);
}
inline ::etexas::DetectorManagerData_DetectorData* DetectorManagerData::add_detectors() {
  // @@protoc_insertion_point(field_add:etexas.DetectorManagerData.detectors)
  return detectors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerData_DetectorData >&
DetectorManagerData::detectors() const {
  // @@protoc_insertion_point(field_list:etexas.DetectorManagerData.detectors)
  return detectors_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::DetectorManagerData_DetectorData >*
DetectorManagerData::mutable_detectors() {
  // @@protoc_insertion_point(field_mutable_list:etexas.DetectorManagerData.detectors)
  return &detectors_;
}

// -------------------------------------------------------------------

// DetectorManagerEntry

// optional int32 key = 1;
inline bool DetectorManagerEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectorManagerEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectorManagerEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectorManagerEntry::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 DetectorManagerEntry::key() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerEntry.key)
  return key_;
}
inline void DetectorManagerEntry::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:etexas.DetectorManagerEntry.key)
}

// optional .etexas.DetectorManagerData value = 2;
inline bool DetectorManagerEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectorManagerEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectorManagerEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectorManagerEntry::clear_value() {
  if (value_ != NULL) value_->::etexas::DetectorManagerData::Clear();
  clear_has_value();
}
inline const ::etexas::DetectorManagerData& DetectorManagerEntry::value() const {
  // @@protoc_insertion_point(field_get:etexas.DetectorManagerEntry.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::etexas::DetectorManagerData* DetectorManagerEntry::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::etexas::DetectorManagerData;
  // @@protoc_insertion_point(field_mutable:etexas.DetectorManagerEntry.value)
  return value_;
}
inline ::etexas::DetectorManagerData* DetectorManagerEntry::release_value() {
  clear_has_value();
  ::etexas::DetectorManagerData* temp = value_;
  value_ = NULL;
  return temp;
}
inline void DetectorManagerEntry::set_allocated_value(::etexas::DetectorManagerData* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.DetectorManagerEntry.value)
}

// -------------------------------------------------------------------

// LaneManagerData_LaneData_LaneNode

// required double x = 1;
inline bool LaneManagerData_LaneData_LaneNode::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneManagerData_LaneData_LaneNode::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneManagerData_LaneData_LaneNode::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneManagerData_LaneData_LaneNode::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double LaneManagerData_LaneData_LaneNode::x() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.LaneNode.x)
  return x_;
}
inline void LaneManagerData_LaneData_LaneNode::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.LaneNode.x)
}

// required double y = 2;
inline bool LaneManagerData_LaneData_LaneNode::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneManagerData_LaneData_LaneNode::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneManagerData_LaneData_LaneNode::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneManagerData_LaneData_LaneNode::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double LaneManagerData_LaneData_LaneNode::y() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.LaneNode.y)
  return y_;
}
inline void LaneManagerData_LaneData_LaneNode::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.LaneNode.y)
}

// optional double z = 3;
inline bool LaneManagerData_LaneData_LaneNode::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneManagerData_LaneData_LaneNode::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneManagerData_LaneData_LaneNode::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneManagerData_LaneData_LaneNode::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double LaneManagerData_LaneData_LaneNode::z() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.LaneNode.z)
  return z_;
}
inline void LaneManagerData_LaneData_LaneNode::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.LaneNode.z)
}

// optional double width = 4 [default = 1];
inline bool LaneManagerData_LaneData_LaneNode::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneManagerData_LaneData_LaneNode::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneManagerData_LaneData_LaneNode::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneManagerData_LaneData_LaneNode::clear_width() {
  width_ = 1;
  clear_has_width();
}
inline double LaneManagerData_LaneData_LaneNode::width() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.LaneNode.width)
  return width_;
}
inline void LaneManagerData_LaneData_LaneNode::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.LaneNode.width)
}

// -------------------------------------------------------------------

// LaneManagerData_LaneData_LaneMovement

// required .etexas.LaneManagerData.LaneData.LaneMovement.Movement movement = 1 [default = STRAIGHT];
inline bool LaneManagerData_LaneData_LaneMovement::has_movement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneManagerData_LaneData_LaneMovement::set_has_movement() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneManagerData_LaneData_LaneMovement::clear_has_movement() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneManagerData_LaneData_LaneMovement::clear_movement() {
  movement_ = 2;
  clear_has_movement();
}
inline ::etexas::LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::movement() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.LaneMovement.movement)
  return static_cast< ::etexas::LaneManagerData_LaneData_LaneMovement_Movement >(movement_);
}
inline void LaneManagerData_LaneData_LaneMovement::set_movement(::etexas::LaneManagerData_LaneData_LaneMovement_Movement value) {
  assert(::etexas::LaneManagerData_LaneData_LaneMovement_Movement_IsValid(value));
  set_has_movement();
  movement_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.LaneMovement.movement)
}

// required int32 movementId = 2;
inline bool LaneManagerData_LaneData_LaneMovement::has_movementid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneManagerData_LaneData_LaneMovement::set_has_movementid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneManagerData_LaneData_LaneMovement::clear_has_movementid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneManagerData_LaneData_LaneMovement::clear_movementid() {
  movementid_ = 0;
  clear_has_movementid();
}
inline ::google::protobuf::int32 LaneManagerData_LaneData_LaneMovement::movementid() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.LaneMovement.movementId)
  return movementid_;
}
inline void LaneManagerData_LaneData_LaneMovement::set_movementid(::google::protobuf::int32 value) {
  set_has_movementid();
  movementid_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.LaneMovement.movementId)
}

// -------------------------------------------------------------------

// LaneManagerData_LaneData

// required int32 laneId = 1;
inline bool LaneManagerData_LaneData::has_laneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneManagerData_LaneData::set_has_laneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneManagerData_LaneData::clear_has_laneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneManagerData_LaneData::clear_laneid() {
  laneid_ = 0;
  clear_has_laneid();
}
inline ::google::protobuf::int32 LaneManagerData_LaneData::laneid() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.laneId)
  return laneid_;
}
inline void LaneManagerData_LaneData::set_laneid(::google::protobuf::int32 value) {
  set_has_laneid();
  laneid_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.laneId)
}

// optional .etexas.LaneManagerData.LaneData.Type type = 2;
inline bool LaneManagerData_LaneData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneManagerData_LaneData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneManagerData_LaneData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneManagerData_LaneData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::etexas::LaneManagerData_LaneData_Type LaneManagerData_LaneData::type() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.type)
  return static_cast< ::etexas::LaneManagerData_LaneData_Type >(type_);
}
inline void LaneManagerData_LaneData::set_type(::etexas::LaneManagerData_LaneData_Type value) {
  assert(::etexas::LaneManagerData_LaneData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.type)
}

// optional int32 approachId = 3;
inline bool LaneManagerData_LaneData::has_approachid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneManagerData_LaneData::set_has_approachid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneManagerData_LaneData::clear_has_approachid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneManagerData_LaneData::clear_approachid() {
  approachid_ = 0;
  clear_has_approachid();
}
inline ::google::protobuf::int32 LaneManagerData_LaneData::approachid() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.approachId)
  return approachid_;
}
inline void LaneManagerData_LaneData::set_approachid(::google::protobuf::int32 value) {
  set_has_approachid();
  approachid_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.approachId)
}

// optional double speedLimit = 4;
inline bool LaneManagerData_LaneData::has_speedlimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneManagerData_LaneData::set_has_speedlimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneManagerData_LaneData::clear_has_speedlimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneManagerData_LaneData::clear_speedlimit() {
  speedlimit_ = 0;
  clear_has_speedlimit();
}
inline double LaneManagerData_LaneData::speedlimit() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.speedLimit)
  return speedlimit_;
}
inline void LaneManagerData_LaneData::set_speedlimit(double value) {
  set_has_speedlimit();
  speedlimit_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.LaneData.speedLimit)
}

// repeated .etexas.LaneManagerData.LaneData.LaneNode laneGeomList = 5;
inline int LaneManagerData_LaneData::lanegeomlist_size() const {
  return lanegeomlist_.size();
}
inline void LaneManagerData_LaneData::clear_lanegeomlist() {
  lanegeomlist_.Clear();
}
inline const ::etexas::LaneManagerData_LaneData_LaneNode& LaneManagerData_LaneData::lanegeomlist(int index) const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.laneGeomList)
  return lanegeomlist_.Get(index);
}
inline ::etexas::LaneManagerData_LaneData_LaneNode* LaneManagerData_LaneData::mutable_lanegeomlist(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.LaneManagerData.LaneData.laneGeomList)
  return lanegeomlist_.Mutable(index);
}
inline ::etexas::LaneManagerData_LaneData_LaneNode* LaneManagerData_LaneData::add_lanegeomlist() {
  // @@protoc_insertion_point(field_add:etexas.LaneManagerData.LaneData.laneGeomList)
  return lanegeomlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneNode >&
LaneManagerData_LaneData::lanegeomlist() const {
  // @@protoc_insertion_point(field_list:etexas.LaneManagerData.LaneData.laneGeomList)
  return lanegeomlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneNode >*
LaneManagerData_LaneData::mutable_lanegeomlist() {
  // @@protoc_insertion_point(field_mutable_list:etexas.LaneManagerData.LaneData.laneGeomList)
  return &lanegeomlist_;
}

// repeated .etexas.LaneManagerData.LaneData.LaneMovement laneMovements = 6;
inline int LaneManagerData_LaneData::lanemovements_size() const {
  return lanemovements_.size();
}
inline void LaneManagerData_LaneData::clear_lanemovements() {
  lanemovements_.Clear();
}
inline const ::etexas::LaneManagerData_LaneData_LaneMovement& LaneManagerData_LaneData::lanemovements(int index) const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.LaneData.laneMovements)
  return lanemovements_.Get(index);
}
inline ::etexas::LaneManagerData_LaneData_LaneMovement* LaneManagerData_LaneData::mutable_lanemovements(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.LaneManagerData.LaneData.laneMovements)
  return lanemovements_.Mutable(index);
}
inline ::etexas::LaneManagerData_LaneData_LaneMovement* LaneManagerData_LaneData::add_lanemovements() {
  // @@protoc_insertion_point(field_add:etexas.LaneManagerData.LaneData.laneMovements)
  return lanemovements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneMovement >&
LaneManagerData_LaneData::lanemovements() const {
  // @@protoc_insertion_point(field_list:etexas.LaneManagerData.LaneData.laneMovements)
  return lanemovements_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData_LaneMovement >*
LaneManagerData_LaneData::mutable_lanemovements() {
  // @@protoc_insertion_point(field_mutable_list:etexas.LaneManagerData.LaneData.laneMovements)
  return &lanemovements_;
}

// -------------------------------------------------------------------

// LaneManagerData

// optional double latitude = 1;
inline bool LaneManagerData::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneManagerData::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneManagerData::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneManagerData::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double LaneManagerData::latitude() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.latitude)
  return latitude_;
}
inline void LaneManagerData::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.latitude)
}

// optional double longitude = 2;
inline bool LaneManagerData::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneManagerData::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneManagerData::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneManagerData::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double LaneManagerData::longitude() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.longitude)
  return longitude_;
}
inline void LaneManagerData::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.longitude)
}

// optional double elevation = 3;
inline bool LaneManagerData::has_elevation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneManagerData::set_has_elevation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneManagerData::clear_has_elevation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneManagerData::clear_elevation() {
  elevation_ = 0;
  clear_has_elevation();
}
inline double LaneManagerData::elevation() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.elevation)
  return elevation_;
}
inline void LaneManagerData::set_elevation(double value) {
  set_has_elevation();
  elevation_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.elevation)
}

// optional int32 intersectionId = 4;
inline bool LaneManagerData::has_intersectionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneManagerData::set_has_intersectionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneManagerData::clear_has_intersectionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneManagerData::clear_intersectionid() {
  intersectionid_ = 0;
  clear_has_intersectionid();
}
inline ::google::protobuf::int32 LaneManagerData::intersectionid() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.intersectionId)
  return intersectionid_;
}
inline void LaneManagerData::set_intersectionid(::google::protobuf::int32 value) {
  set_has_intersectionid();
  intersectionid_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.intersectionId)
}

// optional int32 geoCalculatorType = 5;
inline bool LaneManagerData::has_geocalculatortype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneManagerData::set_has_geocalculatortype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneManagerData::clear_has_geocalculatortype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneManagerData::clear_geocalculatortype() {
  geocalculatortype_ = 0;
  clear_has_geocalculatortype();
}
inline ::google::protobuf::int32 LaneManagerData::geocalculatortype() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.geoCalculatorType)
  return geocalculatortype_;
}
inline void LaneManagerData::set_geocalculatortype(::google::protobuf::int32 value) {
  set_has_geocalculatortype();
  geocalculatortype_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerData.geoCalculatorType)
}

// repeated .etexas.LaneManagerData.LaneData lanes = 6;
inline int LaneManagerData::lanes_size() const {
  return lanes_.size();
}
inline void LaneManagerData::clear_lanes() {
  lanes_.Clear();
}
inline const ::etexas::LaneManagerData_LaneData& LaneManagerData::lanes(int index) const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerData.lanes)
  return lanes_.Get(index);
}
inline ::etexas::LaneManagerData_LaneData* LaneManagerData::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:etexas.LaneManagerData.lanes)
  return lanes_.Mutable(index);
}
inline ::etexas::LaneManagerData_LaneData* LaneManagerData::add_lanes() {
  // @@protoc_insertion_point(field_add:etexas.LaneManagerData.lanes)
  return lanes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData >&
LaneManagerData::lanes() const {
  // @@protoc_insertion_point(field_list:etexas.LaneManagerData.lanes)
  return lanes_;
}
inline ::google::protobuf::RepeatedPtrField< ::etexas::LaneManagerData_LaneData >*
LaneManagerData::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:etexas.LaneManagerData.lanes)
  return &lanes_;
}

// -------------------------------------------------------------------

// LaneManagerEntry

// optional int32 key = 1;
inline bool LaneManagerEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneManagerEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneManagerEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneManagerEntry::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 LaneManagerEntry::key() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerEntry.key)
  return key_;
}
inline void LaneManagerEntry::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:etexas.LaneManagerEntry.key)
}

// optional .etexas.LaneManagerData value = 2;
inline bool LaneManagerEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneManagerEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneManagerEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneManagerEntry::clear_value() {
  if (value_ != NULL) value_->::etexas::LaneManagerData::Clear();
  clear_has_value();
}
inline const ::etexas::LaneManagerData& LaneManagerEntry::value() const {
  // @@protoc_insertion_point(field_get:etexas.LaneManagerEntry.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::etexas::LaneManagerData* LaneManagerEntry::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::etexas::LaneManagerData;
  // @@protoc_insertion_point(field_mutable:etexas.LaneManagerEntry.value)
  return value_;
}
inline ::etexas::LaneManagerData* LaneManagerEntry::release_value() {
  clear_has_value();
  ::etexas::LaneManagerData* temp = value_;
  value_ = NULL;
  return temp;
}
inline void LaneManagerEntry::set_allocated_value(::etexas::LaneManagerData* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:etexas.LaneManagerEntry.value)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace etexas

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::etexas::VehicleCommandData_VehicleCommandClass> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etexas::VehicleCommandData_VehicleCommandClass>() {
  return ::etexas::VehicleCommandData_VehicleCommandClass_descriptor();
}
template <> struct is_proto_enum< ::etexas::VehicleData_VehicleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etexas::VehicleData_VehicleType>() {
  return ::etexas::VehicleData_VehicleType_descriptor();
}
template <> struct is_proto_enum< ::etexas::SignalManagerData_SignalIndicationData_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etexas::SignalManagerData_SignalIndicationData_Color>() {
  return ::etexas::SignalManagerData_SignalIndicationData_Color_descriptor();
}
template <> struct is_proto_enum< ::etexas::SignalManagerData_SignalIndicationData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etexas::SignalManagerData_SignalIndicationData_Type>() {
  return ::etexas::SignalManagerData_SignalIndicationData_Type_descriptor();
}
template <> struct is_proto_enum< ::etexas::SignalManagerData_SignalIndicationData_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etexas::SignalManagerData_SignalIndicationData_State>() {
  return ::etexas::SignalManagerData_SignalIndicationData_State_descriptor();
}
template <> struct is_proto_enum< ::etexas::LaneManagerData_LaneData_LaneMovement_Movement> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etexas::LaneManagerData_LaneData_LaneMovement_Movement>() {
  return ::etexas::LaneManagerData_LaneData_LaneMovement_Movement_descriptor();
}
template <> struct is_proto_enum< ::etexas::LaneManagerData_LaneData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etexas::LaneManagerData_LaneData_Type>() {
  return ::etexas::LaneManagerData_LaneData_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NativeAppProtobuf_2eproto__INCLUDED
