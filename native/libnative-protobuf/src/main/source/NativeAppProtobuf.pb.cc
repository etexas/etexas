// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NativeAppProtobuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NativeAppProtobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace etexas {

namespace {

const ::google::protobuf::Descriptor* BundleWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BundleWrapper_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitBundle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitBundle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownBundle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownBundle_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppInitConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppInitConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutputBundle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputBundle_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleCommandData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleCommandData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleCommandData_VehicleCommandClass_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignalCommandData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalCommandData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputBundle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputBundle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RseDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObuDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObuDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleData_VehicleType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Tx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tx_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSMIndication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSMIndication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppDevMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppDevMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* RseModelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RseModelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalManagerEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalManagerEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalManagerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalManagerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalManagerData_SignalIndicationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalManagerData_SignalIndicationData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_Color_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DetectorManagerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectorManagerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectorManagerData_DetectorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectorManagerData_DetectorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectorManagerData_DetectorData_DetectorEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectorManagerData_DetectorData_DetectorEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectorManagerData_DetectorData_PolygonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectorManagerData_DetectorData_PolygonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectorManagerEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectorManagerEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneManagerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneManagerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneManagerData_LaneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneManagerData_LaneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneManagerData_LaneData_LaneNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneManagerData_LaneData_LaneNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneManagerData_LaneData_LaneMovement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneManagerData_LaneData_LaneMovement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LaneManagerData_LaneData_LaneMovement_Movement_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LaneManagerData_LaneData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LaneManagerEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneManagerEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NativeAppProtobuf_2eproto() {
  protobuf_AddDesc_NativeAppProtobuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NativeAppProtobuf.proto");
  GOOGLE_CHECK(file != NULL);
  BundleWrapper_descriptor_ = file->message_type(0);
  static const int BundleWrapper_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BundleWrapper, execid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BundleWrapper, initbundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BundleWrapper, inputbundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BundleWrapper, outputbundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BundleWrapper, shutdownbundle_),
  };
  BundleWrapper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BundleWrapper_descriptor_,
      BundleWrapper::default_instance_,
      BundleWrapper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BundleWrapper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BundleWrapper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BundleWrapper));
  InitBundle_descriptor_ = file->message_type(1);
  static const int InitBundle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBundle, appinitconfig_),
  };
  InitBundle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitBundle_descriptor_,
      InitBundle::default_instance_,
      InitBundle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBundle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBundle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitBundle));
  ShutdownBundle_descriptor_ = file->message_type(2);
  static const int ShutdownBundle_offsets_[1] = {
  };
  ShutdownBundle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownBundle_descriptor_,
      ShutdownBundle::default_instance_,
      ShutdownBundle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownBundle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownBundle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownBundle));
  AppInitConfig_descriptor_ = file->message_type(3);
  static const int AppInitConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInitConfig, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInitConfig, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInitConfig, commandline_),
  };
  AppInitConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppInitConfig_descriptor_,
      AppInitConfig::default_instance_,
      AppInitConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInitConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInitConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppInitConfig));
  OutputBundle_descriptor_ = file->message_type(4);
  static const int OutputBundle_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, vehcoms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, sigcoms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, logs_),
  };
  OutputBundle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputBundle_descriptor_,
      OutputBundle::default_instance_,
      OutputBundle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputBundle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputBundle));
  VehicleCommandData_descriptor_ = file->message_type(5);
  static const int VehicleCommandData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommandData, commandclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommandData, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommandData, vehicleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommandData, speed_),
  };
  VehicleCommandData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleCommandData_descriptor_,
      VehicleCommandData::default_instance_,
      VehicleCommandData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommandData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleCommandData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleCommandData));
  VehicleCommandData_VehicleCommandClass_descriptor_ = VehicleCommandData_descriptor_->enum_type(0);
  SignalCommandData_descriptor_ = file->message_type(6);
  static const int SignalCommandData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalCommandData, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalCommandData, time_),
  };
  SignalCommandData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalCommandData_descriptor_,
      SignalCommandData::default_instance_,
      SignalCommandData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalCommandData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalCommandData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalCommandData));
  LogData_descriptor_ = file->message_type(7);
  static const int LogData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogData, simtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogData, message_),
  };
  LogData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogData_descriptor_,
      LogData::default_instance_,
      LogData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogData));
  InputBundle_descriptor_ = file->message_type(8);
  static const int InputBundle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBundle, simtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBundle, rsedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBundle, rses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBundle, obus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBundle, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBundle, appdevmap_),
  };
  InputBundle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputBundle_descriptor_,
      InputBundle::default_instance_,
      InputBundle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBundle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputBundle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputBundle));
  RseDevice_descriptor_ = file->message_type(9);
  static const int RseDevice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseDevice, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseDevice, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseDevice, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseDevice, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseDevice, messids_),
  };
  RseDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseDevice_descriptor_,
      RseDevice::default_instance_,
      RseDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseDevice));
  ObuDevice_descriptor_ = file->message_type(10);
  static const int ObuDevice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObuDevice, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObuDevice, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObuDevice, messids_),
  };
  ObuDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObuDevice_descriptor_,
      ObuDevice::default_instance_,
      ObuDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObuDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObuDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObuDevice));
  VehicleData_descriptor_ = file->message_type(11);
  static const int VehicleData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, vehicleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, laneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, brakepressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, z_),
  };
  VehicleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleData_descriptor_,
      VehicleData::default_instance_,
      VehicleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleData));
  VehicleData_VehicleType_descriptor_ = VehicleData_descriptor_->enum_type(0);
  Tx_descriptor_ = file->message_type(12);
  static const int Tx_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tx, messid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tx, mess_),
  };
  Tx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tx_descriptor_,
      Tx::default_instance_,
      Tx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tx));
  WSMIndication_descriptor_ = file->message_type(13);
  static const int WSMIndication_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSMIndication, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSMIndication, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSMIndication, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSMIndication, src_),
  };
  WSMIndication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSMIndication_descriptor_,
      WSMIndication::default_instance_,
      WSMIndication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSMIndication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSMIndication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSMIndication));
  AppDevMap_descriptor_ = file->message_type(14);
  static const int AppDevMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDevMap, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDevMap, devids_),
  };
  AppDevMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppDevMap_descriptor_,
      AppDevMap::default_instance_,
      AppDevMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDevMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppDevMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppDevMap));
  RseModelData_descriptor_ = file->message_type(15);
  static const int RseModelData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseModelData, signalmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseModelData, detectormap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseModelData, lanemap_),
  };
  RseModelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RseModelData_descriptor_,
      RseModelData::default_instance_,
      RseModelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseModelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RseModelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RseModelData));
  SignalManagerEntry_descriptor_ = file->message_type(16);
  static const int SignalManagerEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerEntry, value_),
  };
  SignalManagerEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalManagerEntry_descriptor_,
      SignalManagerEntry::default_instance_,
      SignalManagerEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalManagerEntry));
  SignalManagerData_descriptor_ = file->message_type(17);
  static const int SignalManagerData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData, signalindications_),
  };
  SignalManagerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalManagerData_descriptor_,
      SignalManagerData::default_instance_,
      SignalManagerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalManagerData));
  SignalManagerData_SignalIndicationData_descriptor_ = SignalManagerData_descriptor_->nested_type(0);
  static const int SignalManagerData_SignalIndicationData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData_SignalIndicationData, laneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData_SignalIndicationData, timetochange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData_SignalIndicationData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData_SignalIndicationData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData_SignalIndicationData, state_),
  };
  SignalManagerData_SignalIndicationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalManagerData_SignalIndicationData_descriptor_,
      SignalManagerData_SignalIndicationData::default_instance_,
      SignalManagerData_SignalIndicationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData_SignalIndicationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalManagerData_SignalIndicationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalManagerData_SignalIndicationData));
  SignalManagerData_SignalIndicationData_Color_descriptor_ = SignalManagerData_SignalIndicationData_descriptor_->enum_type(0);
  SignalManagerData_SignalIndicationData_Type_descriptor_ = SignalManagerData_SignalIndicationData_descriptor_->enum_type(1);
  SignalManagerData_SignalIndicationData_State_descriptor_ = SignalManagerData_SignalIndicationData_descriptor_->enum_type(2);
  DetectorManagerData_descriptor_ = file->message_type(18);
  static const int DetectorManagerData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData, detectors_),
  };
  DetectorManagerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectorManagerData_descriptor_,
      DetectorManagerData::default_instance_,
      DetectorManagerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectorManagerData));
  DetectorManagerData_DetectorData_descriptor_ = DetectorManagerData_descriptor_->nested_type(0);
  static const int DetectorManagerData_DetectorData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, detectorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, laneids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, presencedetectcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, pulsedetectcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, speeddetectcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, lengthdetectcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, detevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, area_),
  };
  DetectorManagerData_DetectorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectorManagerData_DetectorData_descriptor_,
      DetectorManagerData_DetectorData::default_instance_,
      DetectorManagerData_DetectorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectorManagerData_DetectorData));
  DetectorManagerData_DetectorData_DetectorEventData_descriptor_ = DetectorManagerData_DetectorData_descriptor_->nested_type(0);
  static const int DetectorManagerData_DetectorData_DetectorEventData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_DetectorEventData, detectorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_DetectorEventData, pulse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_DetectorEventData, presence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_DetectorEventData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_DetectorEventData, length_),
  };
  DetectorManagerData_DetectorData_DetectorEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectorManagerData_DetectorData_DetectorEventData_descriptor_,
      DetectorManagerData_DetectorData_DetectorEventData::default_instance_,
      DetectorManagerData_DetectorData_DetectorEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_DetectorEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_DetectorEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectorManagerData_DetectorData_DetectorEventData));
  DetectorManagerData_DetectorData_PolygonData_descriptor_ = DetectorManagerData_DetectorData_descriptor_->nested_type(1);
  static const int DetectorManagerData_DetectorData_PolygonData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_PolygonData, npoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_PolygonData, xpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_PolygonData, ypoints_),
  };
  DetectorManagerData_DetectorData_PolygonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectorManagerData_DetectorData_PolygonData_descriptor_,
      DetectorManagerData_DetectorData_PolygonData::default_instance_,
      DetectorManagerData_DetectorData_PolygonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_PolygonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerData_DetectorData_PolygonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectorManagerData_DetectorData_PolygonData));
  DetectorManagerEntry_descriptor_ = file->message_type(19);
  static const int DetectorManagerEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerEntry, value_),
  };
  DetectorManagerEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectorManagerEntry_descriptor_,
      DetectorManagerEntry::default_instance_,
      DetectorManagerEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorManagerEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectorManagerEntry));
  LaneManagerData_descriptor_ = file->message_type(20);
  static const int LaneManagerData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData, intersectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData, geocalculatortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData, lanes_),
  };
  LaneManagerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaneManagerData_descriptor_,
      LaneManagerData::default_instance_,
      LaneManagerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaneManagerData));
  LaneManagerData_LaneData_descriptor_ = LaneManagerData_descriptor_->nested_type(0);
  static const int LaneManagerData_LaneData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData, laneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData, approachid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData, speedlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData, lanegeomlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData, lanemovements_),
  };
  LaneManagerData_LaneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaneManagerData_LaneData_descriptor_,
      LaneManagerData_LaneData::default_instance_,
      LaneManagerData_LaneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaneManagerData_LaneData));
  LaneManagerData_LaneData_LaneNode_descriptor_ = LaneManagerData_LaneData_descriptor_->nested_type(0);
  static const int LaneManagerData_LaneData_LaneNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneNode, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneNode, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneNode, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneNode, width_),
  };
  LaneManagerData_LaneData_LaneNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaneManagerData_LaneData_LaneNode_descriptor_,
      LaneManagerData_LaneData_LaneNode::default_instance_,
      LaneManagerData_LaneData_LaneNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaneManagerData_LaneData_LaneNode));
  LaneManagerData_LaneData_LaneMovement_descriptor_ = LaneManagerData_LaneData_descriptor_->nested_type(1);
  static const int LaneManagerData_LaneData_LaneMovement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneMovement, movement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneMovement, movementid_),
  };
  LaneManagerData_LaneData_LaneMovement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaneManagerData_LaneData_LaneMovement_descriptor_,
      LaneManagerData_LaneData_LaneMovement::default_instance_,
      LaneManagerData_LaneData_LaneMovement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneMovement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerData_LaneData_LaneMovement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaneManagerData_LaneData_LaneMovement));
  LaneManagerData_LaneData_LaneMovement_Movement_descriptor_ = LaneManagerData_LaneData_LaneMovement_descriptor_->enum_type(0);
  LaneManagerData_LaneData_Type_descriptor_ = LaneManagerData_LaneData_descriptor_->enum_type(0);
  LaneManagerEntry_descriptor_ = file->message_type(21);
  static const int LaneManagerEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerEntry, value_),
  };
  LaneManagerEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaneManagerEntry_descriptor_,
      LaneManagerEntry::default_instance_,
      LaneManagerEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneManagerEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaneManagerEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NativeAppProtobuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BundleWrapper_descriptor_, &BundleWrapper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitBundle_descriptor_, &InitBundle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownBundle_descriptor_, &ShutdownBundle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppInitConfig_descriptor_, &AppInitConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputBundle_descriptor_, &OutputBundle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleCommandData_descriptor_, &VehicleCommandData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalCommandData_descriptor_, &SignalCommandData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogData_descriptor_, &LogData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputBundle_descriptor_, &InputBundle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseDevice_descriptor_, &RseDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObuDevice_descriptor_, &ObuDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleData_descriptor_, &VehicleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tx_descriptor_, &Tx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSMIndication_descriptor_, &WSMIndication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppDevMap_descriptor_, &AppDevMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RseModelData_descriptor_, &RseModelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalManagerEntry_descriptor_, &SignalManagerEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalManagerData_descriptor_, &SignalManagerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalManagerData_SignalIndicationData_descriptor_, &SignalManagerData_SignalIndicationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectorManagerData_descriptor_, &DetectorManagerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectorManagerData_DetectorData_descriptor_, &DetectorManagerData_DetectorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectorManagerData_DetectorData_DetectorEventData_descriptor_, &DetectorManagerData_DetectorData_DetectorEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectorManagerData_DetectorData_PolygonData_descriptor_, &DetectorManagerData_DetectorData_PolygonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectorManagerEntry_descriptor_, &DetectorManagerEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaneManagerData_descriptor_, &LaneManagerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaneManagerData_LaneData_descriptor_, &LaneManagerData_LaneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaneManagerData_LaneData_LaneNode_descriptor_, &LaneManagerData_LaneData_LaneNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaneManagerData_LaneData_LaneMovement_descriptor_, &LaneManagerData_LaneData_LaneMovement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaneManagerEntry_descriptor_, &LaneManagerEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NativeAppProtobuf_2eproto() {
  delete BundleWrapper::default_instance_;
  delete BundleWrapper_reflection_;
  delete InitBundle::default_instance_;
  delete InitBundle_reflection_;
  delete ShutdownBundle::default_instance_;
  delete ShutdownBundle_reflection_;
  delete AppInitConfig::default_instance_;
  delete AppInitConfig_reflection_;
  delete OutputBundle::default_instance_;
  delete OutputBundle_reflection_;
  delete VehicleCommandData::default_instance_;
  delete VehicleCommandData_reflection_;
  delete SignalCommandData::default_instance_;
  delete SignalCommandData_reflection_;
  delete LogData::default_instance_;
  delete LogData_reflection_;
  delete InputBundle::default_instance_;
  delete InputBundle_reflection_;
  delete RseDevice::default_instance_;
  delete RseDevice_reflection_;
  delete ObuDevice::default_instance_;
  delete ObuDevice_reflection_;
  delete VehicleData::default_instance_;
  delete VehicleData_reflection_;
  delete Tx::default_instance_;
  delete Tx_reflection_;
  delete WSMIndication::default_instance_;
  delete WSMIndication_reflection_;
  delete AppDevMap::default_instance_;
  delete AppDevMap_reflection_;
  delete RseModelData::default_instance_;
  delete RseModelData_reflection_;
  delete SignalManagerEntry::default_instance_;
  delete SignalManagerEntry_reflection_;
  delete SignalManagerData::default_instance_;
  delete SignalManagerData_reflection_;
  delete SignalManagerData_SignalIndicationData::default_instance_;
  delete SignalManagerData_SignalIndicationData_reflection_;
  delete DetectorManagerData::default_instance_;
  delete DetectorManagerData_reflection_;
  delete DetectorManagerData_DetectorData::default_instance_;
  delete DetectorManagerData_DetectorData_reflection_;
  delete DetectorManagerData_DetectorData_DetectorEventData::default_instance_;
  delete DetectorManagerData_DetectorData_DetectorEventData_reflection_;
  delete DetectorManagerData_DetectorData_PolygonData::default_instance_;
  delete DetectorManagerData_DetectorData_PolygonData_reflection_;
  delete DetectorManagerEntry::default_instance_;
  delete DetectorManagerEntry_reflection_;
  delete LaneManagerData::default_instance_;
  delete LaneManagerData_reflection_;
  delete LaneManagerData_LaneData::default_instance_;
  delete LaneManagerData_LaneData_reflection_;
  delete LaneManagerData_LaneData_LaneNode::default_instance_;
  delete LaneManagerData_LaneData_LaneNode_reflection_;
  delete LaneManagerData_LaneData_LaneMovement::default_instance_;
  delete LaneManagerData_LaneData_LaneMovement_reflection_;
  delete LaneManagerEntry::default_instance_;
  delete LaneManagerEntry_reflection_;
}

void protobuf_AddDesc_NativeAppProtobuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027NativeAppProtobuf.proto\022\006etexas\"\315\001\n\rBu"
    "ndleWrapper\022\016\n\006execId\030\001 \002(\003\022&\n\ninitBundl"
    "e\030\002 \001(\0132\022.etexas.InitBundle\022(\n\013inputBund"
    "le\030\003 \001(\0132\023.etexas.InputBundle\022*\n\014outputB"
    "undle\030\004 \003(\0132\024.etexas.OutputBundle\022.\n\016shu"
    "tdownBundle\030\005 \001(\0132\026.etexas.ShutdownBundl"
    "e\":\n\nInitBundle\022,\n\rappInitConfig\030\002 \003(\0132\025"
    ".etexas.AppInitConfig\"\020\n\016ShutdownBundle\""
    "B\n\rAppInitConfig\022\r\n\005appId\030\001 \002(\t\022\r\n\005devId"
    "\030\002 \002(\003\022\023\n\013commandLine\030\003 \002(\t\"\356\001\n\014OutputBu"
    "ndle\022\r\n\005appId\030\001 \002(\t\022\r\n\005devId\030\002 \002(\003\022\t\n\001x\030"
    "\003 \002(\001\022\t\n\001y\030\004 \002(\001\022\t\n\001z\030\005 \002(\001\022+\n\007vehComs\030\006"
    " \003(\0132\032.etexas.VehicleCommandData\022*\n\007sigC"
    "oms\030\007 \003(\0132\031.etexas.SignalCommandData\022\'\n\010"
    "messages\030\010 \003(\0132\025.etexas.WSMIndication\022\035\n"
    "\004logs\030\t \003(\0132\017.etexas.LogData\"\321\001\n\022Vehicle"
    "CommandData\022D\n\014commandClass\030\001 \002(\0162..etex"
    "as.VehicleCommandData.VehicleCommandClas"
    "s\022\017\n\007command\030\002 \002(\005\022\021\n\tvehicleId\030\003 \002(\005\022\r\n"
    "\005speed\030\004 \001(\001\"B\n\023VehicleCommandClass\022\017\n\013D"
    "ESTINATION\020\000\022\017\n\013LANE_CHANGE\020\001\022\t\n\005SPEED\020\002"
    "\"2\n\021SignalCommandData\022\017\n\007command\030\001 \002(\005\022\014"
    "\n\004time\030\002 \001(\001\"8\n\007LogData\022\017\n\007simTime\030\001 \002(\001"
    "\022\013\n\003key\030\002 \002(\t\022\017\n\007message\030\003 \002(\t\"\313\001\n\013Input"
    "Bundle\022\017\n\007simTime\030\001 \002(\001\022%\n\007rseData\030\002 \001(\013"
    "2\024.etexas.RseModelData\022\037\n\004rses\030\003 \003(\0132\021.e"
    "texas.RseDevice\022\037\n\004obus\030\004 \003(\0132\021.etexas.O"
    "buDevice\022\034\n\010messages\030\005 \003(\0132\n.etexas.Tx\022$"
    "\n\tappDevMap\030\006 \003(\0132\021.etexas.AppDevMap\"c\n\t"
    "RseDevice\022\r\n\005devId\030\001 \002(\003\022\020\n\010latitude\030\002 \002"
    "(\001\022\021\n\tlongitude\030\003 \002(\001\022\021\n\televation\030\004 \002(\001"
    "\022\017\n\007messIds\030\005 \003(\003\"Q\n\tObuDevice\022\r\n\005devId\030"
    "\001 \002(\003\022$\n\007vehicle\030\002 \002(\0132\023.etexas.VehicleD"
    "ata\022\017\n\007messIds\030\003 \003(\003\"\351\002\n\013VehicleData\022\021\n\t"
    "vehicleId\030\001 \002(\005\022\r\n\005speed\030\002 \002(\001\022\024\n\014accele"
    "ration\030\003 \002(\001\022\016\n\006length\030\004 \002(\001\022\r\n\005width\030\005 "
    "\002(\001\022\016\n\006laneId\030\006 \002(\005\022\017\n\007heading\030\007 \002(\001\022\016\n\006"
    "height\030\010 \002(\001\022-\n\004type\030\t \001(\0162\037.etexas.Vehi"
    "cleData.VehicleType\022\024\n\014brakePressed\030\n \002("
    "\010\022\020\n\010latitude\030\013 \002(\001\022\021\n\tlongitude\030\014 \002(\001\022\021"
    "\n\televation\030\r \002(\001\022\t\n\001x\030\016 \002(\001\022\t\n\001y\030\017 \002(\001\022"
    "\t\n\001z\030\020 \002(\001\"4\n\013VehicleType\022\007\n\003CAR\020\000\022\007\n\003BU"
    "S\020\001\022\023\n\017TRACTOR_TRAILER\020\002\"9\n\002Tx\022\016\n\006messId"
    "\030\001 \002(\003\022#\n\004mess\030\002 \002(\0132\025.etexas.WSMIndicat"
    "ion\"F\n\rWSMIndication\022\014\n\004data\030\001 \002(\014\022\014\n\004si"
    "ze\030\002 \002(\005\022\014\n\004dest\030\003 \002(\003\022\013\n\003src\030\004 \002(\003\"*\n\tA"
    "ppDevMap\022\r\n\005appId\030\001 \002(\t\022\016\n\006devIds\030\002 \003(\003\""
    "\233\001\n\014RseModelData\022-\n\tsignalMap\030\001 \003(\0132\032.et"
    "exas.SignalManagerEntry\0221\n\013detectorMap\030\002"
    " \003(\0132\034.etexas.DetectorManagerEntry\022)\n\007la"
    "neMap\030\003 \003(\0132\030.etexas.LaneManagerEntry\"K\n"
    "\022SignalManagerEntry\022\013\n\003key\030\001 \001(\005\022(\n\005valu"
    "e\030\002 \001(\0132\031.etexas.SignalManagerData\"\341\004\n\021S"
    "ignalManagerData\022I\n\021signalIndications\030\001 "
    "\003(\0132..etexas.SignalManagerData.SignalInd"
    "icationData\032\200\004\n\024SignalIndicationData\022\016\n\006"
    "laneId\030\001 \002(\005\022\024\n\014timeToChange\030\002 \001(\001\022C\n\005co"
    "lor\030\003 \001(\01624.etexas.SignalManagerData.Sig"
    "nalIndicationData.Color\022A\n\004type\030\004 \001(\01623."
    "etexas.SignalManagerData.SignalIndicatio"
    "nData.Type\022C\n\005state\030\005 \001(\01624.etexas.Signa"
    "lManagerData.SignalIndicationData.State\""
    "1\n\005Color\022\t\n\005GREEN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002"
    "\022\010\n\004NONE\020\003\"\224\001\n\004Type\022\010\n\004BALL\020\000\022\016\n\nLEFT_AR"
    "ROW\020\001\022\017\n\013RIGHT_ARROW\020\002\022\022\n\016STRAIGHT_ARROW"
    "\020\003\022\017\n\013UTURN_ARROW\020\004\022\r\n\tSTOP_SIGN\020\005\022\016\n\nYI"
    "ELD_SIGN\020\006\022\020\n\014UNCONTROLLED\020\007\022\013\n\007UNKNOWN\020"
    "\010\"+\n\005State\022\n\n\006STEADY\020\000\022\014\n\010FLASHING\020\001\022\010\n\004"
    "SOFT\020\002\"\251\004\n\023DetectorManagerData\022;\n\tdetect"
    "ors\030\001 \003(\0132(.etexas.DetectorManagerData.D"
    "etectorData\032\324\003\n\014DetectorData\022\022\n\ndetector"
    "Id\030\001 \002(\005\022\017\n\007laneIds\030\002 \003(\005\022\031\n\021presenceDet"
    "ectCap\030\003 \001(\010\022\026\n\016pulseDetectCap\030\004 \001(\010\022\026\n\016"
    "speedDetectCap\030\005 \001(\010\022\027\n\017lengthDetectCap\030"
    "\006 \001(\010\022L\n\010detEvent\030\007 \001(\0132:.etexas.Detecto"
    "rManagerData.DetectorData.DetectorEventD"
    "ata\022B\n\004area\030\010 \001(\01324.etexas.DetectorManag"
    "erData.DetectorData.PolygonData\032g\n\021Detec"
    "torEventData\022\022\n\ndetectorId\030\001 \002(\005\022\r\n\005puls"
    "e\030\002 \001(\005\022\020\n\010presence\030\003 \001(\010\022\r\n\005speed\030\004 \001(\001"
    "\022\016\n\006length\030\005 \001(\001\032@\n\013PolygonData\022\017\n\007npoin"
    "ts\030\001 \002(\005\022\017\n\007xpoints\030\002 \003(\005\022\017\n\007ypoints\030\003 \003"
    "(\005\"O\n\024DetectorManagerEntry\022\013\n\003key\030\001 \001(\005\022"
    "*\n\005value\030\002 \001(\0132\033.etexas.DetectorManagerD"
    "ata\"\206\006\n\017LaneManagerData\022\020\n\010latitude\030\001 \001("
    "\001\022\021\n\tlongitude\030\002 \001(\001\022\021\n\televation\030\003 \001(\001\022"
    "\026\n\016intersectionId\030\004 \001(\005\022\031\n\021geoCalculator"
    "Type\030\005 \001(\005\022/\n\005lanes\030\006 \003(\0132 .etexas.LaneM"
    "anagerData.LaneData\032\326\004\n\010LaneData\022\016\n\006lane"
    "Id\030\001 \002(\005\0223\n\004type\030\002 \001(\0162%.etexas.LaneMana"
    "gerData.LaneData.Type\022\022\n\napproachId\030\003 \001("
    "\005\022\022\n\nspeedLimit\030\004 \001(\001\022\?\n\014laneGeomList\030\005 "
    "\003(\0132).etexas.LaneManagerData.LaneData.La"
    "neNode\022D\n\rlaneMovements\030\006 \003(\0132-.etexas.L"
    "aneManagerData.LaneData.LaneMovement\032=\n\010"
    "LaneNode\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \001("
    "\001\022\020\n\005width\030\004 \001(\001:\0011\032\350\001\n\014LaneMovement\022R\n\010"
    "movement\030\001 \002(\01626.etexas.LaneManagerData."
    "LaneData.LaneMovement.Movement:\010STRAIGHT"
    "\022\022\n\nmovementId\030\002 \002(\005\"p\n\010Movement\022\r\n\tLEFT"
    "_TURN\020\000\022\016\n\nRIGHT_TURN\020\001\022\014\n\010STRAIGHT\020\002\022\025\n"
    "\021RIGHT_TURN_ON_RED\020\003\022\024\n\020LEFT_TURN_ON_RED"
    "\020\004\022\n\n\006U_TURN\020\005\",\n\004Type\022\t\n\005UNSET\020\000\022\014\n\010OUT"
    "BOUND\020\001\022\013\n\007INBOUND\020\002\"G\n\020LaneManagerEntry"
    "\022\013\n\003key\030\001 \001(\005\022&\n\005value\030\002 \001(\0132\027.etexas.La"
    "neManagerDataB\032\n\030com.harmonia.etexas.wav"
    "e", 4241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NativeAppProtobuf.proto", &protobuf_RegisterTypes);
  BundleWrapper::default_instance_ = new BundleWrapper();
  InitBundle::default_instance_ = new InitBundle();
  ShutdownBundle::default_instance_ = new ShutdownBundle();
  AppInitConfig::default_instance_ = new AppInitConfig();
  OutputBundle::default_instance_ = new OutputBundle();
  VehicleCommandData::default_instance_ = new VehicleCommandData();
  SignalCommandData::default_instance_ = new SignalCommandData();
  LogData::default_instance_ = new LogData();
  InputBundle::default_instance_ = new InputBundle();
  RseDevice::default_instance_ = new RseDevice();
  ObuDevice::default_instance_ = new ObuDevice();
  VehicleData::default_instance_ = new VehicleData();
  Tx::default_instance_ = new Tx();
  WSMIndication::default_instance_ = new WSMIndication();
  AppDevMap::default_instance_ = new AppDevMap();
  RseModelData::default_instance_ = new RseModelData();
  SignalManagerEntry::default_instance_ = new SignalManagerEntry();
  SignalManagerData::default_instance_ = new SignalManagerData();
  SignalManagerData_SignalIndicationData::default_instance_ = new SignalManagerData_SignalIndicationData();
  DetectorManagerData::default_instance_ = new DetectorManagerData();
  DetectorManagerData_DetectorData::default_instance_ = new DetectorManagerData_DetectorData();
  DetectorManagerData_DetectorData_DetectorEventData::default_instance_ = new DetectorManagerData_DetectorData_DetectorEventData();
  DetectorManagerData_DetectorData_PolygonData::default_instance_ = new DetectorManagerData_DetectorData_PolygonData();
  DetectorManagerEntry::default_instance_ = new DetectorManagerEntry();
  LaneManagerData::default_instance_ = new LaneManagerData();
  LaneManagerData_LaneData::default_instance_ = new LaneManagerData_LaneData();
  LaneManagerData_LaneData_LaneNode::default_instance_ = new LaneManagerData_LaneData_LaneNode();
  LaneManagerData_LaneData_LaneMovement::default_instance_ = new LaneManagerData_LaneData_LaneMovement();
  LaneManagerEntry::default_instance_ = new LaneManagerEntry();
  BundleWrapper::default_instance_->InitAsDefaultInstance();
  InitBundle::default_instance_->InitAsDefaultInstance();
  ShutdownBundle::default_instance_->InitAsDefaultInstance();
  AppInitConfig::default_instance_->InitAsDefaultInstance();
  OutputBundle::default_instance_->InitAsDefaultInstance();
  VehicleCommandData::default_instance_->InitAsDefaultInstance();
  SignalCommandData::default_instance_->InitAsDefaultInstance();
  LogData::default_instance_->InitAsDefaultInstance();
  InputBundle::default_instance_->InitAsDefaultInstance();
  RseDevice::default_instance_->InitAsDefaultInstance();
  ObuDevice::default_instance_->InitAsDefaultInstance();
  VehicleData::default_instance_->InitAsDefaultInstance();
  Tx::default_instance_->InitAsDefaultInstance();
  WSMIndication::default_instance_->InitAsDefaultInstance();
  AppDevMap::default_instance_->InitAsDefaultInstance();
  RseModelData::default_instance_->InitAsDefaultInstance();
  SignalManagerEntry::default_instance_->InitAsDefaultInstance();
  SignalManagerData::default_instance_->InitAsDefaultInstance();
  SignalManagerData_SignalIndicationData::default_instance_->InitAsDefaultInstance();
  DetectorManagerData::default_instance_->InitAsDefaultInstance();
  DetectorManagerData_DetectorData::default_instance_->InitAsDefaultInstance();
  DetectorManagerData_DetectorData_DetectorEventData::default_instance_->InitAsDefaultInstance();
  DetectorManagerData_DetectorData_PolygonData::default_instance_->InitAsDefaultInstance();
  DetectorManagerEntry::default_instance_->InitAsDefaultInstance();
  LaneManagerData::default_instance_->InitAsDefaultInstance();
  LaneManagerData_LaneData::default_instance_->InitAsDefaultInstance();
  LaneManagerData_LaneData_LaneNode::default_instance_->InitAsDefaultInstance();
  LaneManagerData_LaneData_LaneMovement::default_instance_->InitAsDefaultInstance();
  LaneManagerEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NativeAppProtobuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NativeAppProtobuf_2eproto {
  StaticDescriptorInitializer_NativeAppProtobuf_2eproto() {
    protobuf_AddDesc_NativeAppProtobuf_2eproto();
  }
} static_descriptor_initializer_NativeAppProtobuf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BundleWrapper::kExecIdFieldNumber;
const int BundleWrapper::kInitBundleFieldNumber;
const int BundleWrapper::kInputBundleFieldNumber;
const int BundleWrapper::kOutputBundleFieldNumber;
const int BundleWrapper::kShutdownBundleFieldNumber;
#endif  // !_MSC_VER

BundleWrapper::BundleWrapper()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.BundleWrapper)
}

void BundleWrapper::InitAsDefaultInstance() {
  initbundle_ = const_cast< ::etexas::InitBundle*>(&::etexas::InitBundle::default_instance());
  inputbundle_ = const_cast< ::etexas::InputBundle*>(&::etexas::InputBundle::default_instance());
  shutdownbundle_ = const_cast< ::etexas::ShutdownBundle*>(&::etexas::ShutdownBundle::default_instance());
}

BundleWrapper::BundleWrapper(const BundleWrapper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.BundleWrapper)
}

void BundleWrapper::SharedCtor() {
  _cached_size_ = 0;
  execid_ = GOOGLE_LONGLONG(0);
  initbundle_ = NULL;
  inputbundle_ = NULL;
  shutdownbundle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BundleWrapper::~BundleWrapper() {
  // @@protoc_insertion_point(destructor:etexas.BundleWrapper)
  SharedDtor();
}

void BundleWrapper::SharedDtor() {
  if (this != default_instance_) {
    delete initbundle_;
    delete inputbundle_;
    delete shutdownbundle_;
  }
}

void BundleWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BundleWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BundleWrapper_descriptor_;
}

const BundleWrapper& BundleWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

BundleWrapper* BundleWrapper::default_instance_ = NULL;

BundleWrapper* BundleWrapper::New() const {
  return new BundleWrapper;
}

void BundleWrapper::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    execid_ = GOOGLE_LONGLONG(0);
    if (has_initbundle()) {
      if (initbundle_ != NULL) initbundle_->::etexas::InitBundle::Clear();
    }
    if (has_inputbundle()) {
      if (inputbundle_ != NULL) inputbundle_->::etexas::InputBundle::Clear();
    }
    if (has_shutdownbundle()) {
      if (shutdownbundle_ != NULL) shutdownbundle_->::etexas::ShutdownBundle::Clear();
    }
  }
  outputbundle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BundleWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.BundleWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 execId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &execid_)));
          set_has_execid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_initBundle;
        break;
      }

      // optional .etexas.InitBundle initBundle = 2;
      case 2: {
        if (tag == 18) {
         parse_initBundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initbundle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_inputBundle;
        break;
      }

      // optional .etexas.InputBundle inputBundle = 3;
      case 3: {
        if (tag == 26) {
         parse_inputBundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inputbundle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_outputBundle;
        break;
      }

      // repeated .etexas.OutputBundle outputBundle = 4;
      case 4: {
        if (tag == 34) {
         parse_outputBundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputbundle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_outputBundle;
        if (input->ExpectTag(42)) goto parse_shutdownBundle;
        break;
      }

      // optional .etexas.ShutdownBundle shutdownBundle = 5;
      case 5: {
        if (tag == 42) {
         parse_shutdownBundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutdownbundle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.BundleWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.BundleWrapper)
  return false;
#undef DO_
}

void BundleWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.BundleWrapper)
  // required int64 execId = 1;
  if (has_execid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->execid(), output);
  }

  // optional .etexas.InitBundle initBundle = 2;
  if (has_initbundle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->initbundle(), output);
  }

  // optional .etexas.InputBundle inputBundle = 3;
  if (has_inputbundle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputbundle(), output);
  }

  // repeated .etexas.OutputBundle outputBundle = 4;
  for (int i = 0; i < this->outputbundle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outputbundle(i), output);
  }

  // optional .etexas.ShutdownBundle shutdownBundle = 5;
  if (has_shutdownbundle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shutdownbundle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.BundleWrapper)
}

::google::protobuf::uint8* BundleWrapper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.BundleWrapper)
  // required int64 execId = 1;
  if (has_execid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->execid(), target);
  }

  // optional .etexas.InitBundle initBundle = 2;
  if (has_initbundle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->initbundle(), target);
  }

  // optional .etexas.InputBundle inputBundle = 3;
  if (has_inputbundle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->inputbundle(), target);
  }

  // repeated .etexas.OutputBundle outputBundle = 4;
  for (int i = 0; i < this->outputbundle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->outputbundle(i), target);
  }

  // optional .etexas.ShutdownBundle shutdownBundle = 5;
  if (has_shutdownbundle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shutdownbundle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.BundleWrapper)
  return target;
}

int BundleWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 execId = 1;
    if (has_execid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->execid());
    }

    // optional .etexas.InitBundle initBundle = 2;
    if (has_initbundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initbundle());
    }

    // optional .etexas.InputBundle inputBundle = 3;
    if (has_inputbundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputbundle());
    }

    // optional .etexas.ShutdownBundle shutdownBundle = 5;
    if (has_shutdownbundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shutdownbundle());
    }

  }
  // repeated .etexas.OutputBundle outputBundle = 4;
  total_size += 1 * this->outputbundle_size();
  for (int i = 0; i < this->outputbundle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputbundle(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BundleWrapper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BundleWrapper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BundleWrapper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BundleWrapper::MergeFrom(const BundleWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  outputbundle_.MergeFrom(from.outputbundle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_execid()) {
      set_execid(from.execid());
    }
    if (from.has_initbundle()) {
      mutable_initbundle()->::etexas::InitBundle::MergeFrom(from.initbundle());
    }
    if (from.has_inputbundle()) {
      mutable_inputbundle()->::etexas::InputBundle::MergeFrom(from.inputbundle());
    }
    if (from.has_shutdownbundle()) {
      mutable_shutdownbundle()->::etexas::ShutdownBundle::MergeFrom(from.shutdownbundle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BundleWrapper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BundleWrapper::CopyFrom(const BundleWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BundleWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_initbundle()) {
    if (!this->initbundle().IsInitialized()) return false;
  }
  if (has_inputbundle()) {
    if (!this->inputbundle().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->outputbundle())) return false;
  return true;
}

void BundleWrapper::Swap(BundleWrapper* other) {
  if (other != this) {
    std::swap(execid_, other->execid_);
    std::swap(initbundle_, other->initbundle_);
    std::swap(inputbundle_, other->inputbundle_);
    outputbundle_.Swap(&other->outputbundle_);
    std::swap(shutdownbundle_, other->shutdownbundle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BundleWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BundleWrapper_descriptor_;
  metadata.reflection = BundleWrapper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitBundle::kAppInitConfigFieldNumber;
#endif  // !_MSC_VER

InitBundle::InitBundle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.InitBundle)
}

void InitBundle::InitAsDefaultInstance() {
}

InitBundle::InitBundle(const InitBundle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.InitBundle)
}

void InitBundle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitBundle::~InitBundle() {
  // @@protoc_insertion_point(destructor:etexas.InitBundle)
  SharedDtor();
}

void InitBundle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitBundle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitBundle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitBundle_descriptor_;
}

const InitBundle& InitBundle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

InitBundle* InitBundle::default_instance_ = NULL;

InitBundle* InitBundle::New() const {
  return new InitBundle;
}

void InitBundle::Clear() {
  appinitconfig_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitBundle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.InitBundle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .etexas.AppInitConfig appInitConfig = 2;
      case 2: {
        if (tag == 18) {
         parse_appInitConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appinitconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_appInitConfig;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.InitBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.InitBundle)
  return false;
#undef DO_
}

void InitBundle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.InitBundle)
  // repeated .etexas.AppInitConfig appInitConfig = 2;
  for (int i = 0; i < this->appinitconfig_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appinitconfig(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.InitBundle)
}

::google::protobuf::uint8* InitBundle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.InitBundle)
  // repeated .etexas.AppInitConfig appInitConfig = 2;
  for (int i = 0; i < this->appinitconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appinitconfig(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.InitBundle)
  return target;
}

int InitBundle::ByteSize() const {
  int total_size = 0;

  // repeated .etexas.AppInitConfig appInitConfig = 2;
  total_size += 1 * this->appinitconfig_size();
  for (int i = 0; i < this->appinitconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appinitconfig(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitBundle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitBundle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitBundle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitBundle::MergeFrom(const InitBundle& from) {
  GOOGLE_CHECK_NE(&from, this);
  appinitconfig_.MergeFrom(from.appinitconfig_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitBundle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitBundle::CopyFrom(const InitBundle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitBundle::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->appinitconfig())) return false;
  return true;
}

void InitBundle::Swap(InitBundle* other) {
  if (other != this) {
    appinitconfig_.Swap(&other->appinitconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitBundle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitBundle_descriptor_;
  metadata.reflection = InitBundle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShutdownBundle::ShutdownBundle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.ShutdownBundle)
}

void ShutdownBundle::InitAsDefaultInstance() {
}

ShutdownBundle::ShutdownBundle(const ShutdownBundle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.ShutdownBundle)
}

void ShutdownBundle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownBundle::~ShutdownBundle() {
  // @@protoc_insertion_point(destructor:etexas.ShutdownBundle)
  SharedDtor();
}

void ShutdownBundle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownBundle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownBundle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownBundle_descriptor_;
}

const ShutdownBundle& ShutdownBundle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

ShutdownBundle* ShutdownBundle::default_instance_ = NULL;

ShutdownBundle* ShutdownBundle::New() const {
  return new ShutdownBundle;
}

void ShutdownBundle::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownBundle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.ShutdownBundle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.ShutdownBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.ShutdownBundle)
  return false;
#undef DO_
}

void ShutdownBundle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.ShutdownBundle)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.ShutdownBundle)
}

::google::protobuf::uint8* ShutdownBundle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.ShutdownBundle)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.ShutdownBundle)
  return target;
}

int ShutdownBundle::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownBundle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownBundle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownBundle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownBundle::MergeFrom(const ShutdownBundle& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownBundle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownBundle::CopyFrom(const ShutdownBundle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownBundle::IsInitialized() const {

  return true;
}

void ShutdownBundle::Swap(ShutdownBundle* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownBundle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownBundle_descriptor_;
  metadata.reflection = ShutdownBundle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppInitConfig::kAppIdFieldNumber;
const int AppInitConfig::kDevIdFieldNumber;
const int AppInitConfig::kCommandLineFieldNumber;
#endif  // !_MSC_VER

AppInitConfig::AppInitConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.AppInitConfig)
}

void AppInitConfig::InitAsDefaultInstance() {
}

AppInitConfig::AppInitConfig(const AppInitConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.AppInitConfig)
}

void AppInitConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_ = GOOGLE_LONGLONG(0);
  commandline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppInitConfig::~AppInitConfig() {
  // @@protoc_insertion_point(destructor:etexas.AppInitConfig)
  SharedDtor();
}

void AppInitConfig::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (commandline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete commandline_;
  }
  if (this != default_instance_) {
  }
}

void AppInitConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppInitConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppInitConfig_descriptor_;
}

const AppInitConfig& AppInitConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

AppInitConfig* AppInitConfig::default_instance_ = NULL;

AppInitConfig* AppInitConfig::New() const {
  return new AppInitConfig;
}

void AppInitConfig::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appid_->clear();
      }
    }
    devid_ = GOOGLE_LONGLONG(0);
    if (has_commandline()) {
      if (commandline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        commandline_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppInitConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.AppInitConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_devId;
        break;
      }

      // required int64 devId = 2;
      case 2: {
        if (tag == 16) {
         parse_devId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commandLine;
        break;
      }

      // required string commandLine = 3;
      case 3: {
        if (tag == 26) {
         parse_commandLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commandline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commandline().data(), this->commandline().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "commandline");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.AppInitConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.AppInitConfig)
  return false;
#undef DO_
}

void AppInitConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.AppInitConfig)
  // required string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appid(), output);
  }

  // required int64 devId = 2;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->devid(), output);
  }

  // required string commandLine = 3;
  if (has_commandline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commandline().data(), this->commandline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commandline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->commandline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.AppInitConfig)
}

::google::protobuf::uint8* AppInitConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.AppInitConfig)
  // required string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appid(), target);
  }

  // required int64 devId = 2;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->devid(), target);
  }

  // required string commandLine = 3;
  if (has_commandline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commandline().data(), this->commandline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "commandline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->commandline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.AppInitConfig)
  return target;
}

int AppInitConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // required int64 devId = 2;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->devid());
    }

    // required string commandLine = 3;
    if (has_commandline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commandline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppInitConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppInitConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppInitConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppInitConfig::MergeFrom(const AppInitConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_commandline()) {
      set_commandline(from.commandline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppInitConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppInitConfig::CopyFrom(const AppInitConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInitConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AppInitConfig::Swap(AppInitConfig* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(devid_, other->devid_);
    std::swap(commandline_, other->commandline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppInitConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppInitConfig_descriptor_;
  metadata.reflection = AppInitConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutputBundle::kAppIdFieldNumber;
const int OutputBundle::kDevIdFieldNumber;
const int OutputBundle::kXFieldNumber;
const int OutputBundle::kYFieldNumber;
const int OutputBundle::kZFieldNumber;
const int OutputBundle::kVehComsFieldNumber;
const int OutputBundle::kSigComsFieldNumber;
const int OutputBundle::kMessagesFieldNumber;
const int OutputBundle::kLogsFieldNumber;
#endif  // !_MSC_VER

OutputBundle::OutputBundle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.OutputBundle)
}

void OutputBundle::InitAsDefaultInstance() {
}

OutputBundle::OutputBundle(const OutputBundle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.OutputBundle)
}

void OutputBundle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_ = GOOGLE_LONGLONG(0);
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputBundle::~OutputBundle() {
  // @@protoc_insertion_point(destructor:etexas.OutputBundle)
  SharedDtor();
}

void OutputBundle::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void OutputBundle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputBundle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputBundle_descriptor_;
}

const OutputBundle& OutputBundle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

OutputBundle* OutputBundle::default_instance_ = NULL;

OutputBundle* OutputBundle::New() const {
  return new OutputBundle;
}

void OutputBundle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OutputBundle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(devid_, z_);
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  vehcoms_.Clear();
  sigcoms_.Clear();
  messages_.Clear();
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputBundle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.OutputBundle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_devId;
        break;
      }

      // required int64 devId = 2;
      case 2: {
        if (tag == 16) {
         parse_devId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // required double x = 3;
      case 3: {
        if (tag == 25) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // required double y = 4;
      case 4: {
        if (tag == 33) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_z;
        break;
      }

      // required double z = 5;
      case 5: {
        if (tag == 41) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vehComs;
        break;
      }

      // repeated .etexas.VehicleCommandData vehComs = 6;
      case 6: {
        if (tag == 50) {
         parse_vehComs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vehcoms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vehComs;
        if (input->ExpectTag(58)) goto parse_sigComs;
        break;
      }

      // repeated .etexas.SignalCommandData sigComs = 7;
      case 7: {
        if (tag == 58) {
         parse_sigComs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sigcoms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sigComs;
        if (input->ExpectTag(66)) goto parse_messages;
        break;
      }

      // repeated .etexas.WSMIndication messages = 8;
      case 8: {
        if (tag == 66) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_messages;
        if (input->ExpectTag(74)) goto parse_logs;
        break;
      }

      // repeated .etexas.LogData logs = 9;
      case 9: {
        if (tag == 74) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_logs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.OutputBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.OutputBundle)
  return false;
#undef DO_
}

void OutputBundle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.OutputBundle)
  // required string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appid(), output);
  }

  // required int64 devId = 2;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->devid(), output);
  }

  // required double x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // required double y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // required double z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  // repeated .etexas.VehicleCommandData vehComs = 6;
  for (int i = 0; i < this->vehcoms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vehcoms(i), output);
  }

  // repeated .etexas.SignalCommandData sigComs = 7;
  for (int i = 0; i < this->sigcoms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sigcoms(i), output);
  }

  // repeated .etexas.WSMIndication messages = 8;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->messages(i), output);
  }

  // repeated .etexas.LogData logs = 9;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.OutputBundle)
}

::google::protobuf::uint8* OutputBundle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.OutputBundle)
  // required string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appid(), target);
  }

  // required int64 devId = 2;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->devid(), target);
  }

  // required double x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // required double y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // required double z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  // repeated .etexas.VehicleCommandData vehComs = 6;
  for (int i = 0; i < this->vehcoms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vehcoms(i), target);
  }

  // repeated .etexas.SignalCommandData sigComs = 7;
  for (int i = 0; i < this->sigcoms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sigcoms(i), target);
  }

  // repeated .etexas.WSMIndication messages = 8;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->messages(i), target);
  }

  // repeated .etexas.LogData logs = 9;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.OutputBundle)
  return target;
}

int OutputBundle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // required int64 devId = 2;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->devid());
    }

    // required double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 5;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  // repeated .etexas.VehicleCommandData vehComs = 6;
  total_size += 1 * this->vehcoms_size();
  for (int i = 0; i < this->vehcoms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehcoms(i));
  }

  // repeated .etexas.SignalCommandData sigComs = 7;
  total_size += 1 * this->sigcoms_size();
  for (int i = 0; i < this->sigcoms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sigcoms(i));
  }

  // repeated .etexas.WSMIndication messages = 8;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated .etexas.LogData logs = 9;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputBundle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputBundle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputBundle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputBundle::MergeFrom(const OutputBundle& from) {
  GOOGLE_CHECK_NE(&from, this);
  vehcoms_.MergeFrom(from.vehcoms_);
  sigcoms_.MergeFrom(from.sigcoms_);
  messages_.MergeFrom(from.messages_);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputBundle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputBundle::CopyFrom(const OutputBundle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputBundle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->vehcoms())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sigcoms())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->logs())) return false;
  return true;
}

void OutputBundle::Swap(OutputBundle* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(devid_, other->devid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    vehcoms_.Swap(&other->vehcoms_);
    sigcoms_.Swap(&other->sigcoms_);
    messages_.Swap(&other->messages_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputBundle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputBundle_descriptor_;
  metadata.reflection = OutputBundle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VehicleCommandData_VehicleCommandClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleCommandData_VehicleCommandClass_descriptor_;
}
bool VehicleCommandData_VehicleCommandClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VehicleCommandData_VehicleCommandClass VehicleCommandData::DESTINATION;
const VehicleCommandData_VehicleCommandClass VehicleCommandData::LANE_CHANGE;
const VehicleCommandData_VehicleCommandClass VehicleCommandData::SPEED;
const VehicleCommandData_VehicleCommandClass VehicleCommandData::VehicleCommandClass_MIN;
const VehicleCommandData_VehicleCommandClass VehicleCommandData::VehicleCommandClass_MAX;
const int VehicleCommandData::VehicleCommandClass_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VehicleCommandData::kCommandClassFieldNumber;
const int VehicleCommandData::kCommandFieldNumber;
const int VehicleCommandData::kVehicleIdFieldNumber;
const int VehicleCommandData::kSpeedFieldNumber;
#endif  // !_MSC_VER

VehicleCommandData::VehicleCommandData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.VehicleCommandData)
}

void VehicleCommandData::InitAsDefaultInstance() {
}

VehicleCommandData::VehicleCommandData(const VehicleCommandData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.VehicleCommandData)
}

void VehicleCommandData::SharedCtor() {
  _cached_size_ = 0;
  commandclass_ = 0;
  command_ = 0;
  vehicleid_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleCommandData::~VehicleCommandData() {
  // @@protoc_insertion_point(destructor:etexas.VehicleCommandData)
  SharedDtor();
}

void VehicleCommandData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleCommandData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleCommandData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleCommandData_descriptor_;
}

const VehicleCommandData& VehicleCommandData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

VehicleCommandData* VehicleCommandData::default_instance_ = NULL;

VehicleCommandData* VehicleCommandData::New() const {
  return new VehicleCommandData;
}

void VehicleCommandData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VehicleCommandData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(commandclass_, vehicleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleCommandData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.VehicleCommandData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .etexas.VehicleCommandData.VehicleCommandClass commandClass = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::etexas::VehicleCommandData_VehicleCommandClass_IsValid(value)) {
            set_commandclass(static_cast< ::etexas::VehicleCommandData_VehicleCommandClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command;
        break;
      }

      // required int32 command = 2;
      case 2: {
        if (tag == 16) {
         parse_command:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vehicleId;
        break;
      }

      // required int32 vehicleId = 3;
      case 3: {
        if (tag == 24) {
         parse_vehicleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicleid_)));
          set_has_vehicleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed;
        break;
      }

      // optional double speed = 4;
      case 4: {
        if (tag == 33) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.VehicleCommandData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.VehicleCommandData)
  return false;
#undef DO_
}

void VehicleCommandData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.VehicleCommandData)
  // required .etexas.VehicleCommandData.VehicleCommandClass commandClass = 1;
  if (has_commandclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->commandclass(), output);
  }

  // required int32 command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command(), output);
  }

  // required int32 vehicleId = 3;
  if (has_vehicleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vehicleid(), output);
  }

  // optional double speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.VehicleCommandData)
}

::google::protobuf::uint8* VehicleCommandData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.VehicleCommandData)
  // required .etexas.VehicleCommandData.VehicleCommandClass commandClass = 1;
  if (has_commandclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->commandclass(), target);
  }

  // required int32 command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->command(), target);
  }

  // required int32 vehicleId = 3;
  if (has_vehicleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vehicleid(), target);
  }

  // optional double speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.VehicleCommandData)
  return target;
}

int VehicleCommandData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .etexas.VehicleCommandData.VehicleCommandClass commandClass = 1;
    if (has_commandclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandclass());
    }

    // required int32 command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // required int32 vehicleId = 3;
    if (has_vehicleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vehicleid());
    }

    // optional double speed = 4;
    if (has_speed()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleCommandData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleCommandData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleCommandData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleCommandData::MergeFrom(const VehicleCommandData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandclass()) {
      set_commandclass(from.commandclass());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_vehicleid()) {
      set_vehicleid(from.vehicleid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleCommandData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleCommandData::CopyFrom(const VehicleCommandData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleCommandData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VehicleCommandData::Swap(VehicleCommandData* other) {
  if (other != this) {
    std::swap(commandclass_, other->commandclass_);
    std::swap(command_, other->command_);
    std::swap(vehicleid_, other->vehicleid_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleCommandData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleCommandData_descriptor_;
  metadata.reflection = VehicleCommandData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalCommandData::kCommandFieldNumber;
const int SignalCommandData::kTimeFieldNumber;
#endif  // !_MSC_VER

SignalCommandData::SignalCommandData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.SignalCommandData)
}

void SignalCommandData::InitAsDefaultInstance() {
}

SignalCommandData::SignalCommandData(const SignalCommandData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.SignalCommandData)
}

void SignalCommandData::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalCommandData::~SignalCommandData() {
  // @@protoc_insertion_point(destructor:etexas.SignalCommandData)
  SharedDtor();
}

void SignalCommandData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalCommandData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalCommandData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalCommandData_descriptor_;
}

const SignalCommandData& SignalCommandData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

SignalCommandData* SignalCommandData::default_instance_ = NULL;

SignalCommandData* SignalCommandData::New() const {
  return new SignalCommandData;
}

void SignalCommandData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignalCommandData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, command_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalCommandData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.SignalCommandData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_time;
        break;
      }

      // optional double time = 2;
      case 2: {
        if (tag == 17) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.SignalCommandData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.SignalCommandData)
  return false;
#undef DO_
}

void SignalCommandData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.SignalCommandData)
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // optional double time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.SignalCommandData)
}

::google::protobuf::uint8* SignalCommandData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.SignalCommandData)
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // optional double time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.SignalCommandData)
  return target;
}

int SignalCommandData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // optional double time = 2;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalCommandData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalCommandData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalCommandData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalCommandData::MergeFrom(const SignalCommandData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalCommandData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalCommandData::CopyFrom(const SignalCommandData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalCommandData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SignalCommandData::Swap(SignalCommandData* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalCommandData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalCommandData_descriptor_;
  metadata.reflection = SignalCommandData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogData::kSimTimeFieldNumber;
const int LogData::kKeyFieldNumber;
const int LogData::kMessageFieldNumber;
#endif  // !_MSC_VER

LogData::LogData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.LogData)
}

void LogData::InitAsDefaultInstance() {
}

LogData::LogData(const LogData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.LogData)
}

void LogData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  simtime_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogData::~LogData() {
  // @@protoc_insertion_point(destructor:etexas.LogData)
  SharedDtor();
}

void LogData::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void LogData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogData_descriptor_;
}

const LogData& LogData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

LogData* LogData::default_instance_ = NULL;

LogData* LogData::New() const {
  return new LogData;
}

void LogData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    simtime_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.LogData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double simTime = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &simtime_)));
          set_has_simtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.LogData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.LogData)
  return false;
#undef DO_
}

void LogData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.LogData)
  // required double simTime = 1;
  if (has_simtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->simtime(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.LogData)
}

::google::protobuf::uint8* LogData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.LogData)
  // required double simTime = 1;
  if (has_simtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->simtime(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.LogData)
  return target;
}

int LogData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double simTime = 1;
    if (has_simtime()) {
      total_size += 1 + 8;
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogData::MergeFrom(const LogData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simtime()) {
      set_simtime(from.simtime());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogData::CopyFrom(const LogData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LogData::Swap(LogData* other) {
  if (other != this) {
    std::swap(simtime_, other->simtime_);
    std::swap(key_, other->key_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogData_descriptor_;
  metadata.reflection = LogData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputBundle::kSimTimeFieldNumber;
const int InputBundle::kRseDataFieldNumber;
const int InputBundle::kRsesFieldNumber;
const int InputBundle::kObusFieldNumber;
const int InputBundle::kMessagesFieldNumber;
const int InputBundle::kAppDevMapFieldNumber;
#endif  // !_MSC_VER

InputBundle::InputBundle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.InputBundle)
}

void InputBundle::InitAsDefaultInstance() {
  rsedata_ = const_cast< ::etexas::RseModelData*>(&::etexas::RseModelData::default_instance());
}

InputBundle::InputBundle(const InputBundle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.InputBundle)
}

void InputBundle::SharedCtor() {
  _cached_size_ = 0;
  simtime_ = 0;
  rsedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputBundle::~InputBundle() {
  // @@protoc_insertion_point(destructor:etexas.InputBundle)
  SharedDtor();
}

void InputBundle::SharedDtor() {
  if (this != default_instance_) {
    delete rsedata_;
  }
}

void InputBundle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputBundle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputBundle_descriptor_;
}

const InputBundle& InputBundle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

InputBundle* InputBundle::default_instance_ = NULL;

InputBundle* InputBundle::New() const {
  return new InputBundle;
}

void InputBundle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    simtime_ = 0;
    if (has_rsedata()) {
      if (rsedata_ != NULL) rsedata_->::etexas::RseModelData::Clear();
    }
  }
  rses_.Clear();
  obus_.Clear();
  messages_.Clear();
  appdevmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputBundle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.InputBundle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double simTime = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &simtime_)));
          set_has_simtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rseData;
        break;
      }

      // optional .etexas.RseModelData rseData = 2;
      case 2: {
        if (tag == 18) {
         parse_rseData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rses;
        break;
      }

      // repeated .etexas.RseDevice rses = 3;
      case 3: {
        if (tag == 26) {
         parse_rses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rses;
        if (input->ExpectTag(34)) goto parse_obus;
        break;
      }

      // repeated .etexas.ObuDevice obus = 4;
      case 4: {
        if (tag == 34) {
         parse_obus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_obus;
        if (input->ExpectTag(42)) goto parse_messages;
        break;
      }

      // repeated .etexas.Tx messages = 5;
      case 5: {
        if (tag == 42) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_messages;
        if (input->ExpectTag(50)) goto parse_appDevMap;
        break;
      }

      // repeated .etexas.AppDevMap appDevMap = 6;
      case 6: {
        if (tag == 50) {
         parse_appDevMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appdevmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_appDevMap;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.InputBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.InputBundle)
  return false;
#undef DO_
}

void InputBundle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.InputBundle)
  // required double simTime = 1;
  if (has_simtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->simtime(), output);
  }

  // optional .etexas.RseModelData rseData = 2;
  if (has_rsedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rsedata(), output);
  }

  // repeated .etexas.RseDevice rses = 3;
  for (int i = 0; i < this->rses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rses(i), output);
  }

  // repeated .etexas.ObuDevice obus = 4;
  for (int i = 0; i < this->obus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->obus(i), output);
  }

  // repeated .etexas.Tx messages = 5;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->messages(i), output);
  }

  // repeated .etexas.AppDevMap appDevMap = 6;
  for (int i = 0; i < this->appdevmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->appdevmap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.InputBundle)
}

::google::protobuf::uint8* InputBundle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.InputBundle)
  // required double simTime = 1;
  if (has_simtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->simtime(), target);
  }

  // optional .etexas.RseModelData rseData = 2;
  if (has_rsedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rsedata(), target);
  }

  // repeated .etexas.RseDevice rses = 3;
  for (int i = 0; i < this->rses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rses(i), target);
  }

  // repeated .etexas.ObuDevice obus = 4;
  for (int i = 0; i < this->obus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->obus(i), target);
  }

  // repeated .etexas.Tx messages = 5;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->messages(i), target);
  }

  // repeated .etexas.AppDevMap appDevMap = 6;
  for (int i = 0; i < this->appdevmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->appdevmap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.InputBundle)
  return target;
}

int InputBundle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double simTime = 1;
    if (has_simtime()) {
      total_size += 1 + 8;
    }

    // optional .etexas.RseModelData rseData = 2;
    if (has_rsedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsedata());
    }

  }
  // repeated .etexas.RseDevice rses = 3;
  total_size += 1 * this->rses_size();
  for (int i = 0; i < this->rses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rses(i));
  }

  // repeated .etexas.ObuDevice obus = 4;
  total_size += 1 * this->obus_size();
  for (int i = 0; i < this->obus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obus(i));
  }

  // repeated .etexas.Tx messages = 5;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated .etexas.AppDevMap appDevMap = 6;
  total_size += 1 * this->appdevmap_size();
  for (int i = 0; i < this->appdevmap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appdevmap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputBundle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputBundle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputBundle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputBundle::MergeFrom(const InputBundle& from) {
  GOOGLE_CHECK_NE(&from, this);
  rses_.MergeFrom(from.rses_);
  obus_.MergeFrom(from.obus_);
  messages_.MergeFrom(from.messages_);
  appdevmap_.MergeFrom(from.appdevmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simtime()) {
      set_simtime(from.simtime());
    }
    if (from.has_rsedata()) {
      mutable_rsedata()->::etexas::RseModelData::MergeFrom(from.rsedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputBundle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputBundle::CopyFrom(const InputBundle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputBundle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rsedata()) {
    if (!this->rsedata().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->rses())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->obus())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->appdevmap())) return false;
  return true;
}

void InputBundle::Swap(InputBundle* other) {
  if (other != this) {
    std::swap(simtime_, other->simtime_);
    std::swap(rsedata_, other->rsedata_);
    rses_.Swap(&other->rses_);
    obus_.Swap(&other->obus_);
    messages_.Swap(&other->messages_);
    appdevmap_.Swap(&other->appdevmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputBundle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputBundle_descriptor_;
  metadata.reflection = InputBundle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RseDevice::kDevIdFieldNumber;
const int RseDevice::kLatitudeFieldNumber;
const int RseDevice::kLongitudeFieldNumber;
const int RseDevice::kElevationFieldNumber;
const int RseDevice::kMessIdsFieldNumber;
#endif  // !_MSC_VER

RseDevice::RseDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.RseDevice)
}

void RseDevice::InitAsDefaultInstance() {
}

RseDevice::RseDevice(const RseDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.RseDevice)
}

void RseDevice::SharedCtor() {
  _cached_size_ = 0;
  devid_ = GOOGLE_LONGLONG(0);
  latitude_ = 0;
  longitude_ = 0;
  elevation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseDevice::~RseDevice() {
  // @@protoc_insertion_point(destructor:etexas.RseDevice)
  SharedDtor();
}

void RseDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RseDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RseDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseDevice_descriptor_;
}

const RseDevice& RseDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

RseDevice* RseDevice::default_instance_ = NULL;

RseDevice* RseDevice::New() const {
  return new RseDevice;
}

void RseDevice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RseDevice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(devid_, elevation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  messids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.RseDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 devId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }

      // required double longitude = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_elevation;
        break;
      }

      // required double elevation = 4;
      case 4: {
        if (tag == 33) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_messIds;
        break;
      }

      // repeated int64 messIds = 5;
      case 5: {
        if (tag == 40) {
         parse_messIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_messids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_messids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_messIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.RseDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.RseDevice)
  return false;
#undef DO_
}

void RseDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.RseDevice)
  // required int64 devId = 1;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->devid(), output);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // required double longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // required double elevation = 4;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->elevation(), output);
  }

  // repeated int64 messIds = 5;
  for (int i = 0; i < this->messids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->messids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.RseDevice)
}

::google::protobuf::uint8* RseDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.RseDevice)
  // required int64 devId = 1;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->devid(), target);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // required double longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // required double elevation = 4;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->elevation(), target);
  }

  // repeated int64 messIds = 5;
  for (int i = 0; i < this->messids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->messids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.RseDevice)
  return target;
}

int RseDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 devId = 1;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->devid());
    }

    // required double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double elevation = 4;
    if (has_elevation()) {
      total_size += 1 + 8;
    }

  }
  // repeated int64 messIds = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->messids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->messids(i));
    }
    total_size += 1 * this->messids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RseDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseDevice::MergeFrom(const RseDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  messids_.MergeFrom(from.messids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseDevice::CopyFrom(const RseDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RseDevice::Swap(RseDevice* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(elevation_, other->elevation_);
    messids_.Swap(&other->messids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseDevice_descriptor_;
  metadata.reflection = RseDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObuDevice::kDevIdFieldNumber;
const int ObuDevice::kVehicleFieldNumber;
const int ObuDevice::kMessIdsFieldNumber;
#endif  // !_MSC_VER

ObuDevice::ObuDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.ObuDevice)
}

void ObuDevice::InitAsDefaultInstance() {
  vehicle_ = const_cast< ::etexas::VehicleData*>(&::etexas::VehicleData::default_instance());
}

ObuDevice::ObuDevice(const ObuDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.ObuDevice)
}

void ObuDevice::SharedCtor() {
  _cached_size_ = 0;
  devid_ = GOOGLE_LONGLONG(0);
  vehicle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObuDevice::~ObuDevice() {
  // @@protoc_insertion_point(destructor:etexas.ObuDevice)
  SharedDtor();
}

void ObuDevice::SharedDtor() {
  if (this != default_instance_) {
    delete vehicle_;
  }
}

void ObuDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObuDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObuDevice_descriptor_;
}

const ObuDevice& ObuDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

ObuDevice* ObuDevice::default_instance_ = NULL;

ObuDevice* ObuDevice::New() const {
  return new ObuDevice;
}

void ObuDevice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    devid_ = GOOGLE_LONGLONG(0);
    if (has_vehicle()) {
      if (vehicle_ != NULL) vehicle_->::etexas::VehicleData::Clear();
    }
  }
  messids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObuDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.ObuDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 devId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle;
        break;
      }

      // required .etexas.VehicleData vehicle = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_messIds;
        break;
      }

      // repeated int64 messIds = 3;
      case 3: {
        if (tag == 24) {
         parse_messIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_messids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_messids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_messIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.ObuDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.ObuDevice)
  return false;
#undef DO_
}

void ObuDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.ObuDevice)
  // required int64 devId = 1;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->devid(), output);
  }

  // required .etexas.VehicleData vehicle = 2;
  if (has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vehicle(), output);
  }

  // repeated int64 messIds = 3;
  for (int i = 0; i < this->messids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->messids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.ObuDevice)
}

::google::protobuf::uint8* ObuDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.ObuDevice)
  // required int64 devId = 1;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->devid(), target);
  }

  // required .etexas.VehicleData vehicle = 2;
  if (has_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vehicle(), target);
  }

  // repeated int64 messIds = 3;
  for (int i = 0; i < this->messids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->messids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.ObuDevice)
  return target;
}

int ObuDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 devId = 1;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->devid());
    }

    // required .etexas.VehicleData vehicle = 2;
    if (has_vehicle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle());
    }

  }
  // repeated int64 messIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->messids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->messids(i));
    }
    total_size += 1 * this->messids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObuDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObuDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObuDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObuDevice::MergeFrom(const ObuDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  messids_.MergeFrom(from.messids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_vehicle()) {
      mutable_vehicle()->::etexas::VehicleData::MergeFrom(from.vehicle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObuDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObuDevice::CopyFrom(const ObuDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObuDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_vehicle()) {
    if (!this->vehicle().IsInitialized()) return false;
  }
  return true;
}

void ObuDevice::Swap(ObuDevice* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(vehicle_, other->vehicle_);
    messids_.Swap(&other->messids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObuDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObuDevice_descriptor_;
  metadata.reflection = ObuDevice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VehicleData_VehicleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleData_VehicleType_descriptor_;
}
bool VehicleData_VehicleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VehicleData_VehicleType VehicleData::CAR;
const VehicleData_VehicleType VehicleData::BUS;
const VehicleData_VehicleType VehicleData::TRACTOR_TRAILER;
const VehicleData_VehicleType VehicleData::VehicleType_MIN;
const VehicleData_VehicleType VehicleData::VehicleType_MAX;
const int VehicleData::VehicleType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VehicleData::kVehicleIdFieldNumber;
const int VehicleData::kSpeedFieldNumber;
const int VehicleData::kAccelerationFieldNumber;
const int VehicleData::kLengthFieldNumber;
const int VehicleData::kWidthFieldNumber;
const int VehicleData::kLaneIdFieldNumber;
const int VehicleData::kHeadingFieldNumber;
const int VehicleData::kHeightFieldNumber;
const int VehicleData::kTypeFieldNumber;
const int VehicleData::kBrakePressedFieldNumber;
const int VehicleData::kLatitudeFieldNumber;
const int VehicleData::kLongitudeFieldNumber;
const int VehicleData::kElevationFieldNumber;
const int VehicleData::kXFieldNumber;
const int VehicleData::kYFieldNumber;
const int VehicleData::kZFieldNumber;
#endif  // !_MSC_VER

VehicleData::VehicleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.VehicleData)
}

void VehicleData::InitAsDefaultInstance() {
}

VehicleData::VehicleData(const VehicleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.VehicleData)
}

void VehicleData::SharedCtor() {
  _cached_size_ = 0;
  vehicleid_ = 0;
  speed_ = 0;
  acceleration_ = 0;
  length_ = 0;
  width_ = 0;
  laneid_ = 0;
  heading_ = 0;
  height_ = 0;
  type_ = 0;
  brakepressed_ = false;
  latitude_ = 0;
  longitude_ = 0;
  elevation_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleData::~VehicleData() {
  // @@protoc_insertion_point(destructor:etexas.VehicleData)
  SharedDtor();
}

void VehicleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleData_descriptor_;
}

const VehicleData& VehicleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

VehicleData* VehicleData::default_instance_ = NULL;

VehicleData* VehicleData::New() const {
  return new VehicleData;
}

void VehicleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VehicleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(speed_, height_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(type_, z_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.VehicleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vehicleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicleid_)));
          set_has_vehicleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_speed;
        break;
      }

      // required double speed = 2;
      case 2: {
        if (tag == 17) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_acceleration;
        break;
      }

      // required double acceleration = 3;
      case 3: {
        if (tag == 25) {
         parse_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
          set_has_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_length;
        break;
      }

      // required double length = 4;
      case 4: {
        if (tag == 33) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_width;
        break;
      }

      // required double width = 5;
      case 5: {
        if (tag == 41) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_laneId;
        break;
      }

      // required int32 laneId = 6;
      case 6: {
        if (tag == 48) {
         parse_laneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laneid_)));
          set_has_laneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_heading;
        break;
      }

      // required double heading = 7;
      case 7: {
        if (tag == 57) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_height;
        break;
      }

      // required double height = 8;
      case 8: {
        if (tag == 65) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .etexas.VehicleData.VehicleType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::etexas::VehicleData_VehicleType_IsValid(value)) {
            set_type(static_cast< ::etexas::VehicleData_VehicleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_brakePressed;
        break;
      }

      // required bool brakePressed = 10;
      case 10: {
        if (tag == 80) {
         parse_brakePressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brakepressed_)));
          set_has_brakepressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_latitude;
        break;
      }

      // required double latitude = 11;
      case 11: {
        if (tag == 89) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_longitude;
        break;
      }

      // required double longitude = 12;
      case 12: {
        if (tag == 97) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_elevation;
        break;
      }

      // required double elevation = 13;
      case 13: {
        if (tag == 105) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_x;
        break;
      }

      // required double x = 14;
      case 14: {
        if (tag == 113) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_y;
        break;
      }

      // required double y = 15;
      case 15: {
        if (tag == 121) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_z;
        break;
      }

      // required double z = 16;
      case 16: {
        if (tag == 129) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.VehicleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.VehicleData)
  return false;
#undef DO_
}

void VehicleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.VehicleData)
  // required int32 vehicleId = 1;
  if (has_vehicleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vehicleid(), output);
  }

  // required double speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  // required double acceleration = 3;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->acceleration(), output);
  }

  // required double length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->length(), output);
  }

  // required double width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->width(), output);
  }

  // required int32 laneId = 6;
  if (has_laneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->laneid(), output);
  }

  // required double heading = 7;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->heading(), output);
  }

  // required double height = 8;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // optional .etexas.VehicleData.VehicleType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // required bool brakePressed = 10;
  if (has_brakepressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->brakepressed(), output);
  }

  // required double latitude = 11;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->latitude(), output);
  }

  // required double longitude = 12;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->longitude(), output);
  }

  // required double elevation = 13;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->elevation(), output);
  }

  // required double x = 14;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->x(), output);
  }

  // required double y = 15;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->y(), output);
  }

  // required double z = 16;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.VehicleData)
}

::google::protobuf::uint8* VehicleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.VehicleData)
  // required int32 vehicleId = 1;
  if (has_vehicleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vehicleid(), target);
  }

  // required double speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  // required double acceleration = 3;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->acceleration(), target);
  }

  // required double length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->length(), target);
  }

  // required double width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->width(), target);
  }

  // required int32 laneId = 6;
  if (has_laneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->laneid(), target);
  }

  // required double heading = 7;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->heading(), target);
  }

  // required double height = 8;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // optional .etexas.VehicleData.VehicleType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // required bool brakePressed = 10;
  if (has_brakepressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->brakepressed(), target);
  }

  // required double latitude = 11;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->latitude(), target);
  }

  // required double longitude = 12;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->longitude(), target);
  }

  // required double elevation = 13;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->elevation(), target);
  }

  // required double x = 14;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->x(), target);
  }

  // required double y = 15;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->y(), target);
  }

  // required double z = 16;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.VehicleData)
  return target;
}

int VehicleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vehicleId = 1;
    if (has_vehicleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vehicleid());
    }

    // required double speed = 2;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // required double acceleration = 3;
    if (has_acceleration()) {
      total_size += 1 + 8;
    }

    // required double length = 4;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // required double width = 5;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // required int32 laneId = 6;
    if (has_laneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laneid());
    }

    // required double heading = 7;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // required double height = 8;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .etexas.VehicleData.VehicleType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bool brakePressed = 10;
    if (has_brakepressed()) {
      total_size += 1 + 1;
    }

    // required double latitude = 11;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 12;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double elevation = 13;
    if (has_elevation()) {
      total_size += 1 + 8;
    }

    // required double x = 14;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 15;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 16;
    if (has_z()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleData::MergeFrom(const VehicleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vehicleid()) {
      set_vehicleid(from.vehicleid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_acceleration()) {
      set_acceleration(from.acceleration());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_laneid()) {
      set_laneid(from.laneid());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_brakepressed()) {
      set_brakepressed(from.brakepressed());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData::CopyFrom(const VehicleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000feff) != 0x0000feff) return false;

  return true;
}

void VehicleData::Swap(VehicleData* other) {
  if (other != this) {
    std::swap(vehicleid_, other->vehicleid_);
    std::swap(speed_, other->speed_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(length_, other->length_);
    std::swap(width_, other->width_);
    std::swap(laneid_, other->laneid_);
    std::swap(heading_, other->heading_);
    std::swap(height_, other->height_);
    std::swap(type_, other->type_);
    std::swap(brakepressed_, other->brakepressed_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(elevation_, other->elevation_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleData_descriptor_;
  metadata.reflection = VehicleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tx::kMessIdFieldNumber;
const int Tx::kMessFieldNumber;
#endif  // !_MSC_VER

Tx::Tx()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.Tx)
}

void Tx::InitAsDefaultInstance() {
  mess_ = const_cast< ::etexas::WSMIndication*>(&::etexas::WSMIndication::default_instance());
}

Tx::Tx(const Tx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.Tx)
}

void Tx::SharedCtor() {
  _cached_size_ = 0;
  messid_ = GOOGLE_LONGLONG(0);
  mess_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tx::~Tx() {
  // @@protoc_insertion_point(destructor:etexas.Tx)
  SharedDtor();
}

void Tx::SharedDtor() {
  if (this != default_instance_) {
    delete mess_;
  }
}

void Tx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tx_descriptor_;
}

const Tx& Tx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

Tx* Tx::default_instance_ = NULL;

Tx* Tx::New() const {
  return new Tx;
}

void Tx::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    messid_ = GOOGLE_LONGLONG(0);
    if (has_mess()) {
      if (mess_ != NULL) mess_->::etexas::WSMIndication::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.Tx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 messId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messid_)));
          set_has_messid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mess;
        break;
      }

      // required .etexas.WSMIndication mess = 2;
      case 2: {
        if (tag == 18) {
         parse_mess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.Tx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.Tx)
  return false;
#undef DO_
}

void Tx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.Tx)
  // required int64 messId = 1;
  if (has_messid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->messid(), output);
  }

  // required .etexas.WSMIndication mess = 2;
  if (has_mess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.Tx)
}

::google::protobuf::uint8* Tx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.Tx)
  // required int64 messId = 1;
  if (has_messid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->messid(), target);
  }

  // required .etexas.WSMIndication mess = 2;
  if (has_mess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.Tx)
  return target;
}

int Tx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 messId = 1;
    if (has_messid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messid());
    }

    // required .etexas.WSMIndication mess = 2;
    if (has_mess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tx::MergeFrom(const Tx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messid()) {
      set_messid(from.messid());
    }
    if (from.has_mess()) {
      mutable_mess()->::etexas::WSMIndication::MergeFrom(from.mess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tx::CopyFrom(const Tx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tx::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mess()) {
    if (!this->mess().IsInitialized()) return false;
  }
  return true;
}

void Tx::Swap(Tx* other) {
  if (other != this) {
    std::swap(messid_, other->messid_);
    std::swap(mess_, other->mess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tx_descriptor_;
  metadata.reflection = Tx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSMIndication::kDataFieldNumber;
const int WSMIndication::kSizeFieldNumber;
const int WSMIndication::kDestFieldNumber;
const int WSMIndication::kSrcFieldNumber;
#endif  // !_MSC_VER

WSMIndication::WSMIndication()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.WSMIndication)
}

void WSMIndication::InitAsDefaultInstance() {
}

WSMIndication::WSMIndication(const WSMIndication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.WSMIndication)
}

void WSMIndication::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  dest_ = GOOGLE_LONGLONG(0);
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSMIndication::~WSMIndication() {
  // @@protoc_insertion_point(destructor:etexas.WSMIndication)
  SharedDtor();
}

void WSMIndication::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void WSMIndication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSMIndication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSMIndication_descriptor_;
}

const WSMIndication& WSMIndication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

WSMIndication* WSMIndication::default_instance_ = NULL;

WSMIndication* WSMIndication::New() const {
  return new WSMIndication;
}

void WSMIndication::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WSMIndication*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(dest_, size_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSMIndication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.WSMIndication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dest;
        break;
      }

      // required int64 dest = 3;
      case 3: {
        if (tag == 24) {
         parse_dest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dest_)));
          set_has_dest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_src;
        break;
      }

      // required int64 src = 4;
      case 4: {
        if (tag == 32) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.WSMIndication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.WSMIndication)
  return false;
#undef DO_
}

void WSMIndication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.WSMIndication)
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // required int64 dest = 3;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dest(), output);
  }

  // required int64 src = 4;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.WSMIndication)
}

::google::protobuf::uint8* WSMIndication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.WSMIndication)
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // required int64 dest = 3;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dest(), target);
  }

  // required int64 src = 4;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.WSMIndication)
  return target;
}

int WSMIndication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required int64 dest = 3;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dest());
    }

    // required int64 src = 4;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSMIndication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSMIndication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSMIndication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSMIndication::MergeFrom(const WSMIndication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSMIndication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSMIndication::CopyFrom(const WSMIndication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSMIndication::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WSMIndication::Swap(WSMIndication* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(size_, other->size_);
    std::swap(dest_, other->dest_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSMIndication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSMIndication_descriptor_;
  metadata.reflection = WSMIndication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppDevMap::kAppIdFieldNumber;
const int AppDevMap::kDevIdsFieldNumber;
#endif  // !_MSC_VER

AppDevMap::AppDevMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.AppDevMap)
}

void AppDevMap::InitAsDefaultInstance() {
}

AppDevMap::AppDevMap(const AppDevMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.AppDevMap)
}

void AppDevMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppDevMap::~AppDevMap() {
  // @@protoc_insertion_point(destructor:etexas.AppDevMap)
  SharedDtor();
}

void AppDevMap::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void AppDevMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppDevMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppDevMap_descriptor_;
}

const AppDevMap& AppDevMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

AppDevMap* AppDevMap::default_instance_ = NULL;

AppDevMap* AppDevMap::New() const {
  return new AppDevMap;
}

void AppDevMap::Clear() {
  if (has_appid()) {
    if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      appid_->clear();
    }
  }
  devids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppDevMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.AppDevMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_devIds;
        break;
      }

      // repeated int64 devIds = 2;
      case 2: {
        if (tag == 16) {
         parse_devIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_devids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_devids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_devIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.AppDevMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.AppDevMap)
  return false;
#undef DO_
}

void AppDevMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.AppDevMap)
  // required string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appid(), output);
  }

  // repeated int64 devIds = 2;
  for (int i = 0; i < this->devids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->devids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.AppDevMap)
}

::google::protobuf::uint8* AppDevMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.AppDevMap)
  // required string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appid(), target);
  }

  // repeated int64 devIds = 2;
  for (int i = 0; i < this->devids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->devids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.AppDevMap)
  return target;
}

int AppDevMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

  }
  // repeated int64 devIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->devids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->devids(i));
    }
    total_size += 1 * this->devids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppDevMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppDevMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppDevMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppDevMap::MergeFrom(const AppDevMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  devids_.MergeFrom(from.devids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppDevMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDevMap::CopyFrom(const AppDevMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDevMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AppDevMap::Swap(AppDevMap* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    devids_.Swap(&other->devids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppDevMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppDevMap_descriptor_;
  metadata.reflection = AppDevMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RseModelData::kSignalMapFieldNumber;
const int RseModelData::kDetectorMapFieldNumber;
const int RseModelData::kLaneMapFieldNumber;
#endif  // !_MSC_VER

RseModelData::RseModelData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.RseModelData)
}

void RseModelData::InitAsDefaultInstance() {
}

RseModelData::RseModelData(const RseModelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.RseModelData)
}

void RseModelData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RseModelData::~RseModelData() {
  // @@protoc_insertion_point(destructor:etexas.RseModelData)
  SharedDtor();
}

void RseModelData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RseModelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RseModelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RseModelData_descriptor_;
}

const RseModelData& RseModelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

RseModelData* RseModelData::default_instance_ = NULL;

RseModelData* RseModelData::New() const {
  return new RseModelData;
}

void RseModelData::Clear() {
  signalmap_.Clear();
  detectormap_.Clear();
  lanemap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RseModelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.RseModelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .etexas.SignalManagerEntry signalMap = 1;
      case 1: {
        if (tag == 10) {
         parse_signalMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signalmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_signalMap;
        if (input->ExpectTag(18)) goto parse_detectorMap;
        break;
      }

      // repeated .etexas.DetectorManagerEntry detectorMap = 2;
      case 2: {
        if (tag == 18) {
         parse_detectorMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detectormap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_detectorMap;
        if (input->ExpectTag(26)) goto parse_laneMap;
        break;
      }

      // repeated .etexas.LaneManagerEntry laneMap = 3;
      case 3: {
        if (tag == 26) {
         parse_laneMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lanemap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_laneMap;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.RseModelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.RseModelData)
  return false;
#undef DO_
}

void RseModelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.RseModelData)
  // repeated .etexas.SignalManagerEntry signalMap = 1;
  for (int i = 0; i < this->signalmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signalmap(i), output);
  }

  // repeated .etexas.DetectorManagerEntry detectorMap = 2;
  for (int i = 0; i < this->detectormap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detectormap(i), output);
  }

  // repeated .etexas.LaneManagerEntry laneMap = 3;
  for (int i = 0; i < this->lanemap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lanemap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.RseModelData)
}

::google::protobuf::uint8* RseModelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.RseModelData)
  // repeated .etexas.SignalManagerEntry signalMap = 1;
  for (int i = 0; i < this->signalmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signalmap(i), target);
  }

  // repeated .etexas.DetectorManagerEntry detectorMap = 2;
  for (int i = 0; i < this->detectormap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detectormap(i), target);
  }

  // repeated .etexas.LaneManagerEntry laneMap = 3;
  for (int i = 0; i < this->lanemap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lanemap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.RseModelData)
  return target;
}

int RseModelData::ByteSize() const {
  int total_size = 0;

  // repeated .etexas.SignalManagerEntry signalMap = 1;
  total_size += 1 * this->signalmap_size();
  for (int i = 0; i < this->signalmap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signalmap(i));
  }

  // repeated .etexas.DetectorManagerEntry detectorMap = 2;
  total_size += 1 * this->detectormap_size();
  for (int i = 0; i < this->detectormap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detectormap(i));
  }

  // repeated .etexas.LaneManagerEntry laneMap = 3;
  total_size += 1 * this->lanemap_size();
  for (int i = 0; i < this->lanemap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lanemap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RseModelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RseModelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RseModelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RseModelData::MergeFrom(const RseModelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalmap_.MergeFrom(from.signalmap_);
  detectormap_.MergeFrom(from.detectormap_);
  lanemap_.MergeFrom(from.lanemap_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RseModelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RseModelData::CopyFrom(const RseModelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RseModelData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->signalmap())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->detectormap())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lanemap())) return false;
  return true;
}

void RseModelData::Swap(RseModelData* other) {
  if (other != this) {
    signalmap_.Swap(&other->signalmap_);
    detectormap_.Swap(&other->detectormap_);
    lanemap_.Swap(&other->lanemap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RseModelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RseModelData_descriptor_;
  metadata.reflection = RseModelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalManagerEntry::kKeyFieldNumber;
const int SignalManagerEntry::kValueFieldNumber;
#endif  // !_MSC_VER

SignalManagerEntry::SignalManagerEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.SignalManagerEntry)
}

void SignalManagerEntry::InitAsDefaultInstance() {
  value_ = const_cast< ::etexas::SignalManagerData*>(&::etexas::SignalManagerData::default_instance());
}

SignalManagerEntry::SignalManagerEntry(const SignalManagerEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.SignalManagerEntry)
}

void SignalManagerEntry::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalManagerEntry::~SignalManagerEntry() {
  // @@protoc_insertion_point(destructor:etexas.SignalManagerEntry)
  SharedDtor();
}

void SignalManagerEntry::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void SignalManagerEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalManagerEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalManagerEntry_descriptor_;
}

const SignalManagerEntry& SignalManagerEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

SignalManagerEntry* SignalManagerEntry::default_instance_ = NULL;

SignalManagerEntry* SignalManagerEntry::New() const {
  return new SignalManagerEntry;
}

void SignalManagerEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    key_ = 0;
    if (has_value()) {
      if (value_ != NULL) value_->::etexas::SignalManagerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalManagerEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.SignalManagerEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .etexas.SignalManagerData value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.SignalManagerEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.SignalManagerEntry)
  return false;
#undef DO_
}

void SignalManagerEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.SignalManagerEntry)
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional .etexas.SignalManagerData value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.SignalManagerEntry)
}

::google::protobuf::uint8* SignalManagerEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.SignalManagerEntry)
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional .etexas.SignalManagerData value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.SignalManagerEntry)
  return target;
}

int SignalManagerEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional .etexas.SignalManagerData value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalManagerEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalManagerEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalManagerEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalManagerEntry::MergeFrom(const SignalManagerEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::etexas::SignalManagerData::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalManagerEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalManagerEntry::CopyFrom(const SignalManagerEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalManagerEntry::IsInitialized() const {

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void SignalManagerEntry::Swap(SignalManagerEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalManagerEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalManagerEntry_descriptor_;
  metadata.reflection = SignalManagerEntry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalManagerData_SignalIndicationData_Color_descriptor_;
}
bool SignalManagerData_SignalIndicationData_Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData::GREEN;
const SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData::RED;
const SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData::YELLOW;
const SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData::NONE;
const SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData::Color_MIN;
const SignalManagerData_SignalIndicationData_Color SignalManagerData_SignalIndicationData::Color_MAX;
const int SignalManagerData_SignalIndicationData::Color_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalManagerData_SignalIndicationData_Type_descriptor_;
}
bool SignalManagerData_SignalIndicationData_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::BALL;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::LEFT_ARROW;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::RIGHT_ARROW;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::STRAIGHT_ARROW;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::UTURN_ARROW;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::STOP_SIGN;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::YIELD_SIGN;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::UNCONTROLLED;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::UNKNOWN;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::Type_MIN;
const SignalManagerData_SignalIndicationData_Type SignalManagerData_SignalIndicationData::Type_MAX;
const int SignalManagerData_SignalIndicationData::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SignalManagerData_SignalIndicationData_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalManagerData_SignalIndicationData_State_descriptor_;
}
bool SignalManagerData_SignalIndicationData_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SignalManagerData_SignalIndicationData_State SignalManagerData_SignalIndicationData::STEADY;
const SignalManagerData_SignalIndicationData_State SignalManagerData_SignalIndicationData::FLASHING;
const SignalManagerData_SignalIndicationData_State SignalManagerData_SignalIndicationData::SOFT;
const SignalManagerData_SignalIndicationData_State SignalManagerData_SignalIndicationData::State_MIN;
const SignalManagerData_SignalIndicationData_State SignalManagerData_SignalIndicationData::State_MAX;
const int SignalManagerData_SignalIndicationData::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SignalManagerData_SignalIndicationData::kLaneIdFieldNumber;
const int SignalManagerData_SignalIndicationData::kTimeToChangeFieldNumber;
const int SignalManagerData_SignalIndicationData::kColorFieldNumber;
const int SignalManagerData_SignalIndicationData::kTypeFieldNumber;
const int SignalManagerData_SignalIndicationData::kStateFieldNumber;
#endif  // !_MSC_VER

SignalManagerData_SignalIndicationData::SignalManagerData_SignalIndicationData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.SignalManagerData.SignalIndicationData)
}

void SignalManagerData_SignalIndicationData::InitAsDefaultInstance() {
}

SignalManagerData_SignalIndicationData::SignalManagerData_SignalIndicationData(const SignalManagerData_SignalIndicationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.SignalManagerData.SignalIndicationData)
}

void SignalManagerData_SignalIndicationData::SharedCtor() {
  _cached_size_ = 0;
  laneid_ = 0;
  timetochange_ = 0;
  color_ = 0;
  type_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalManagerData_SignalIndicationData::~SignalManagerData_SignalIndicationData() {
  // @@protoc_insertion_point(destructor:etexas.SignalManagerData.SignalIndicationData)
  SharedDtor();
}

void SignalManagerData_SignalIndicationData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalManagerData_SignalIndicationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalManagerData_SignalIndicationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalManagerData_SignalIndicationData_descriptor_;
}

const SignalManagerData_SignalIndicationData& SignalManagerData_SignalIndicationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

SignalManagerData_SignalIndicationData* SignalManagerData_SignalIndicationData::default_instance_ = NULL;

SignalManagerData_SignalIndicationData* SignalManagerData_SignalIndicationData::New() const {
  return new SignalManagerData_SignalIndicationData;
}

void SignalManagerData_SignalIndicationData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignalManagerData_SignalIndicationData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(timetochange_, state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalManagerData_SignalIndicationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.SignalManagerData.SignalIndicationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 laneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laneid_)));
          set_has_laneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timeToChange;
        break;
      }

      // optional double timeToChange = 2;
      case 2: {
        if (tag == 17) {
         parse_timeToChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timetochange_)));
          set_has_timetochange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional .etexas.SignalManagerData.SignalIndicationData.Color color = 3;
      case 3: {
        if (tag == 24) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::etexas::SignalManagerData_SignalIndicationData_Color_IsValid(value)) {
            set_color(static_cast< ::etexas::SignalManagerData_SignalIndicationData_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .etexas.SignalManagerData.SignalIndicationData.Type type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::etexas::SignalManagerData_SignalIndicationData_Type_IsValid(value)) {
            set_type(static_cast< ::etexas::SignalManagerData_SignalIndicationData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .etexas.SignalManagerData.SignalIndicationData.State state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::etexas::SignalManagerData_SignalIndicationData_State_IsValid(value)) {
            set_state(static_cast< ::etexas::SignalManagerData_SignalIndicationData_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.SignalManagerData.SignalIndicationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.SignalManagerData.SignalIndicationData)
  return false;
#undef DO_
}

void SignalManagerData_SignalIndicationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.SignalManagerData.SignalIndicationData)
  // required int32 laneId = 1;
  if (has_laneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->laneid(), output);
  }

  // optional double timeToChange = 2;
  if (has_timetochange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timetochange(), output);
  }

  // optional .etexas.SignalManagerData.SignalIndicationData.Color color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->color(), output);
  }

  // optional .etexas.SignalManagerData.SignalIndicationData.Type type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .etexas.SignalManagerData.SignalIndicationData.State state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.SignalManagerData.SignalIndicationData)
}

::google::protobuf::uint8* SignalManagerData_SignalIndicationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.SignalManagerData.SignalIndicationData)
  // required int32 laneId = 1;
  if (has_laneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->laneid(), target);
  }

  // optional double timeToChange = 2;
  if (has_timetochange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timetochange(), target);
  }

  // optional .etexas.SignalManagerData.SignalIndicationData.Color color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->color(), target);
  }

  // optional .etexas.SignalManagerData.SignalIndicationData.Type type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .etexas.SignalManagerData.SignalIndicationData.State state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.SignalManagerData.SignalIndicationData)
  return target;
}

int SignalManagerData_SignalIndicationData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 laneId = 1;
    if (has_laneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laneid());
    }

    // optional double timeToChange = 2;
    if (has_timetochange()) {
      total_size += 1 + 8;
    }

    // optional .etexas.SignalManagerData.SignalIndicationData.Color color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional .etexas.SignalManagerData.SignalIndicationData.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .etexas.SignalManagerData.SignalIndicationData.State state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalManagerData_SignalIndicationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalManagerData_SignalIndicationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalManagerData_SignalIndicationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalManagerData_SignalIndicationData::MergeFrom(const SignalManagerData_SignalIndicationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_laneid()) {
      set_laneid(from.laneid());
    }
    if (from.has_timetochange()) {
      set_timetochange(from.timetochange());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalManagerData_SignalIndicationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalManagerData_SignalIndicationData::CopyFrom(const SignalManagerData_SignalIndicationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalManagerData_SignalIndicationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SignalManagerData_SignalIndicationData::Swap(SignalManagerData_SignalIndicationData* other) {
  if (other != this) {
    std::swap(laneid_, other->laneid_);
    std::swap(timetochange_, other->timetochange_);
    std::swap(color_, other->color_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalManagerData_SignalIndicationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalManagerData_SignalIndicationData_descriptor_;
  metadata.reflection = SignalManagerData_SignalIndicationData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SignalManagerData::kSignalIndicationsFieldNumber;
#endif  // !_MSC_VER

SignalManagerData::SignalManagerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.SignalManagerData)
}

void SignalManagerData::InitAsDefaultInstance() {
}

SignalManagerData::SignalManagerData(const SignalManagerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.SignalManagerData)
}

void SignalManagerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalManagerData::~SignalManagerData() {
  // @@protoc_insertion_point(destructor:etexas.SignalManagerData)
  SharedDtor();
}

void SignalManagerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalManagerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalManagerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalManagerData_descriptor_;
}

const SignalManagerData& SignalManagerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

SignalManagerData* SignalManagerData::default_instance_ = NULL;

SignalManagerData* SignalManagerData::New() const {
  return new SignalManagerData;
}

void SignalManagerData::Clear() {
  signalindications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalManagerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.SignalManagerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .etexas.SignalManagerData.SignalIndicationData signalIndications = 1;
      case 1: {
        if (tag == 10) {
         parse_signalIndications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signalindications()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_signalIndications;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.SignalManagerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.SignalManagerData)
  return false;
#undef DO_
}

void SignalManagerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.SignalManagerData)
  // repeated .etexas.SignalManagerData.SignalIndicationData signalIndications = 1;
  for (int i = 0; i < this->signalindications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signalindications(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.SignalManagerData)
}

::google::protobuf::uint8* SignalManagerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.SignalManagerData)
  // repeated .etexas.SignalManagerData.SignalIndicationData signalIndications = 1;
  for (int i = 0; i < this->signalindications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signalindications(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.SignalManagerData)
  return target;
}

int SignalManagerData::ByteSize() const {
  int total_size = 0;

  // repeated .etexas.SignalManagerData.SignalIndicationData signalIndications = 1;
  total_size += 1 * this->signalindications_size();
  for (int i = 0; i < this->signalindications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signalindications(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalManagerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalManagerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalManagerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalManagerData::MergeFrom(const SignalManagerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  signalindications_.MergeFrom(from.signalindications_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalManagerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalManagerData::CopyFrom(const SignalManagerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalManagerData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->signalindications())) return false;
  return true;
}

void SignalManagerData::Swap(SignalManagerData* other) {
  if (other != this) {
    signalindications_.Swap(&other->signalindications_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalManagerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalManagerData_descriptor_;
  metadata.reflection = SignalManagerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectorManagerData_DetectorData_DetectorEventData::kDetectorIdFieldNumber;
const int DetectorManagerData_DetectorData_DetectorEventData::kPulseFieldNumber;
const int DetectorManagerData_DetectorData_DetectorEventData::kPresenceFieldNumber;
const int DetectorManagerData_DetectorData_DetectorEventData::kSpeedFieldNumber;
const int DetectorManagerData_DetectorData_DetectorEventData::kLengthFieldNumber;
#endif  // !_MSC_VER

DetectorManagerData_DetectorData_DetectorEventData::DetectorManagerData_DetectorData_DetectorEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.DetectorManagerData.DetectorData.DetectorEventData)
}

void DetectorManagerData_DetectorData_DetectorEventData::InitAsDefaultInstance() {
}

DetectorManagerData_DetectorData_DetectorEventData::DetectorManagerData_DetectorData_DetectorEventData(const DetectorManagerData_DetectorData_DetectorEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.DetectorManagerData.DetectorData.DetectorEventData)
}

void DetectorManagerData_DetectorData_DetectorEventData::SharedCtor() {
  _cached_size_ = 0;
  detectorid_ = 0;
  pulse_ = 0;
  presence_ = false;
  speed_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorManagerData_DetectorData_DetectorEventData::~DetectorManagerData_DetectorData_DetectorEventData() {
  // @@protoc_insertion_point(destructor:etexas.DetectorManagerData.DetectorData.DetectorEventData)
  SharedDtor();
}

void DetectorManagerData_DetectorData_DetectorEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectorManagerData_DetectorData_DetectorEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectorManagerData_DetectorData_DetectorEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorManagerData_DetectorData_DetectorEventData_descriptor_;
}

const DetectorManagerData_DetectorData_DetectorEventData& DetectorManagerData_DetectorData_DetectorEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

DetectorManagerData_DetectorData_DetectorEventData* DetectorManagerData_DetectorData_DetectorEventData::default_instance_ = NULL;

DetectorManagerData_DetectorData_DetectorEventData* DetectorManagerData_DetectorData_DetectorEventData::New() const {
  return new DetectorManagerData_DetectorData_DetectorEventData;
}

void DetectorManagerData_DetectorData_DetectorEventData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DetectorManagerData_DetectorData_DetectorEventData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(detectorid_, presence_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectorManagerData_DetectorData_DetectorEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.DetectorManagerData.DetectorData.DetectorEventData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 detectorId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detectorid_)));
          set_has_detectorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pulse;
        break;
      }

      // optional int32 pulse = 2;
      case 2: {
        if (tag == 16) {
         parse_pulse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pulse_)));
          set_has_pulse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_presence;
        break;
      }

      // optional bool presence = 3;
      case 3: {
        if (tag == 24) {
         parse_presence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presence_)));
          set_has_presence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed;
        break;
      }

      // optional double speed = 4;
      case 4: {
        if (tag == 33) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_length;
        break;
      }

      // optional double length = 5;
      case 5: {
        if (tag == 41) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.DetectorManagerData.DetectorData.DetectorEventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.DetectorManagerData.DetectorData.DetectorEventData)
  return false;
#undef DO_
}

void DetectorManagerData_DetectorData_DetectorEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.DetectorManagerData.DetectorData.DetectorEventData)
  // required int32 detectorId = 1;
  if (has_detectorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->detectorid(), output);
  }

  // optional int32 pulse = 2;
  if (has_pulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pulse(), output);
  }

  // optional bool presence = 3;
  if (has_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->presence(), output);
  }

  // optional double speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  // optional double length = 5;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.DetectorManagerData.DetectorData.DetectorEventData)
}

::google::protobuf::uint8* DetectorManagerData_DetectorData_DetectorEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.DetectorManagerData.DetectorData.DetectorEventData)
  // required int32 detectorId = 1;
  if (has_detectorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->detectorid(), target);
  }

  // optional int32 pulse = 2;
  if (has_pulse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pulse(), target);
  }

  // optional bool presence = 3;
  if (has_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->presence(), target);
  }

  // optional double speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed(), target);
  }

  // optional double length = 5;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.DetectorManagerData.DetectorData.DetectorEventData)
  return target;
}

int DetectorManagerData_DetectorData_DetectorEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 detectorId = 1;
    if (has_detectorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detectorid());
    }

    // optional int32 pulse = 2;
    if (has_pulse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pulse());
    }

    // optional bool presence = 3;
    if (has_presence()) {
      total_size += 1 + 1;
    }

    // optional double speed = 4;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorManagerData_DetectorData_DetectorEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectorManagerData_DetectorData_DetectorEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectorManagerData_DetectorData_DetectorEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectorManagerData_DetectorData_DetectorEventData::MergeFrom(const DetectorManagerData_DetectorData_DetectorEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detectorid()) {
      set_detectorid(from.detectorid());
    }
    if (from.has_pulse()) {
      set_pulse(from.pulse());
    }
    if (from.has_presence()) {
      set_presence(from.presence());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectorManagerData_DetectorData_DetectorEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorManagerData_DetectorData_DetectorEventData::CopyFrom(const DetectorManagerData_DetectorData_DetectorEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorManagerData_DetectorData_DetectorEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DetectorManagerData_DetectorData_DetectorEventData::Swap(DetectorManagerData_DetectorData_DetectorEventData* other) {
  if (other != this) {
    std::swap(detectorid_, other->detectorid_);
    std::swap(pulse_, other->pulse_);
    std::swap(presence_, other->presence_);
    std::swap(speed_, other->speed_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectorManagerData_DetectorData_DetectorEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectorManagerData_DetectorData_DetectorEventData_descriptor_;
  metadata.reflection = DetectorManagerData_DetectorData_DetectorEventData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DetectorManagerData_DetectorData_PolygonData::kNpointsFieldNumber;
const int DetectorManagerData_DetectorData_PolygonData::kXpointsFieldNumber;
const int DetectorManagerData_DetectorData_PolygonData::kYpointsFieldNumber;
#endif  // !_MSC_VER

DetectorManagerData_DetectorData_PolygonData::DetectorManagerData_DetectorData_PolygonData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.DetectorManagerData.DetectorData.PolygonData)
}

void DetectorManagerData_DetectorData_PolygonData::InitAsDefaultInstance() {
}

DetectorManagerData_DetectorData_PolygonData::DetectorManagerData_DetectorData_PolygonData(const DetectorManagerData_DetectorData_PolygonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.DetectorManagerData.DetectorData.PolygonData)
}

void DetectorManagerData_DetectorData_PolygonData::SharedCtor() {
  _cached_size_ = 0;
  npoints_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorManagerData_DetectorData_PolygonData::~DetectorManagerData_DetectorData_PolygonData() {
  // @@protoc_insertion_point(destructor:etexas.DetectorManagerData.DetectorData.PolygonData)
  SharedDtor();
}

void DetectorManagerData_DetectorData_PolygonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectorManagerData_DetectorData_PolygonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectorManagerData_DetectorData_PolygonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorManagerData_DetectorData_PolygonData_descriptor_;
}

const DetectorManagerData_DetectorData_PolygonData& DetectorManagerData_DetectorData_PolygonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

DetectorManagerData_DetectorData_PolygonData* DetectorManagerData_DetectorData_PolygonData::default_instance_ = NULL;

DetectorManagerData_DetectorData_PolygonData* DetectorManagerData_DetectorData_PolygonData::New() const {
  return new DetectorManagerData_DetectorData_PolygonData;
}

void DetectorManagerData_DetectorData_PolygonData::Clear() {
  npoints_ = 0;
  xpoints_.Clear();
  ypoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectorManagerData_DetectorData_PolygonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.DetectorManagerData.DetectorData.PolygonData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npoints = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npoints_)));
          set_has_npoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_xpoints;
        break;
      }

      // repeated int32 xpoints = 2;
      case 2: {
        if (tag == 16) {
         parse_xpoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_xpoints())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_xpoints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_xpoints;
        if (input->ExpectTag(24)) goto parse_ypoints;
        break;
      }

      // repeated int32 ypoints = 3;
      case 3: {
        if (tag == 24) {
         parse_ypoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_ypoints())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ypoints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ypoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.DetectorManagerData.DetectorData.PolygonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.DetectorManagerData.DetectorData.PolygonData)
  return false;
#undef DO_
}

void DetectorManagerData_DetectorData_PolygonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.DetectorManagerData.DetectorData.PolygonData)
  // required int32 npoints = 1;
  if (has_npoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npoints(), output);
  }

  // repeated int32 xpoints = 2;
  for (int i = 0; i < this->xpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->xpoints(i), output);
  }

  // repeated int32 ypoints = 3;
  for (int i = 0; i < this->ypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->ypoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.DetectorManagerData.DetectorData.PolygonData)
}

::google::protobuf::uint8* DetectorManagerData_DetectorData_PolygonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.DetectorManagerData.DetectorData.PolygonData)
  // required int32 npoints = 1;
  if (has_npoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npoints(), target);
  }

  // repeated int32 xpoints = 2;
  for (int i = 0; i < this->xpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->xpoints(i), target);
  }

  // repeated int32 ypoints = 3;
  for (int i = 0; i < this->ypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->ypoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.DetectorManagerData.DetectorData.PolygonData)
  return target;
}

int DetectorManagerData_DetectorData_PolygonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npoints = 1;
    if (has_npoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npoints());
    }

  }
  // repeated int32 xpoints = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->xpoints_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->xpoints(i));
    }
    total_size += 1 * this->xpoints_size() + data_size;
  }

  // repeated int32 ypoints = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ypoints_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ypoints(i));
    }
    total_size += 1 * this->ypoints_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorManagerData_DetectorData_PolygonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectorManagerData_DetectorData_PolygonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectorManagerData_DetectorData_PolygonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectorManagerData_DetectorData_PolygonData::MergeFrom(const DetectorManagerData_DetectorData_PolygonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  xpoints_.MergeFrom(from.xpoints_);
  ypoints_.MergeFrom(from.ypoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npoints()) {
      set_npoints(from.npoints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectorManagerData_DetectorData_PolygonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorManagerData_DetectorData_PolygonData::CopyFrom(const DetectorManagerData_DetectorData_PolygonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorManagerData_DetectorData_PolygonData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DetectorManagerData_DetectorData_PolygonData::Swap(DetectorManagerData_DetectorData_PolygonData* other) {
  if (other != this) {
    std::swap(npoints_, other->npoints_);
    xpoints_.Swap(&other->xpoints_);
    ypoints_.Swap(&other->ypoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectorManagerData_DetectorData_PolygonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectorManagerData_DetectorData_PolygonData_descriptor_;
  metadata.reflection = DetectorManagerData_DetectorData_PolygonData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DetectorManagerData_DetectorData::kDetectorIdFieldNumber;
const int DetectorManagerData_DetectorData::kLaneIdsFieldNumber;
const int DetectorManagerData_DetectorData::kPresenceDetectCapFieldNumber;
const int DetectorManagerData_DetectorData::kPulseDetectCapFieldNumber;
const int DetectorManagerData_DetectorData::kSpeedDetectCapFieldNumber;
const int DetectorManagerData_DetectorData::kLengthDetectCapFieldNumber;
const int DetectorManagerData_DetectorData::kDetEventFieldNumber;
const int DetectorManagerData_DetectorData::kAreaFieldNumber;
#endif  // !_MSC_VER

DetectorManagerData_DetectorData::DetectorManagerData_DetectorData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.DetectorManagerData.DetectorData)
}

void DetectorManagerData_DetectorData::InitAsDefaultInstance() {
  detevent_ = const_cast< ::etexas::DetectorManagerData_DetectorData_DetectorEventData*>(&::etexas::DetectorManagerData_DetectorData_DetectorEventData::default_instance());
  area_ = const_cast< ::etexas::DetectorManagerData_DetectorData_PolygonData*>(&::etexas::DetectorManagerData_DetectorData_PolygonData::default_instance());
}

DetectorManagerData_DetectorData::DetectorManagerData_DetectorData(const DetectorManagerData_DetectorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.DetectorManagerData.DetectorData)
}

void DetectorManagerData_DetectorData::SharedCtor() {
  _cached_size_ = 0;
  detectorid_ = 0;
  presencedetectcap_ = false;
  pulsedetectcap_ = false;
  speeddetectcap_ = false;
  lengthdetectcap_ = false;
  detevent_ = NULL;
  area_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorManagerData_DetectorData::~DetectorManagerData_DetectorData() {
  // @@protoc_insertion_point(destructor:etexas.DetectorManagerData.DetectorData)
  SharedDtor();
}

void DetectorManagerData_DetectorData::SharedDtor() {
  if (this != default_instance_) {
    delete detevent_;
    delete area_;
  }
}

void DetectorManagerData_DetectorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectorManagerData_DetectorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorManagerData_DetectorData_descriptor_;
}

const DetectorManagerData_DetectorData& DetectorManagerData_DetectorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

DetectorManagerData_DetectorData* DetectorManagerData_DetectorData::default_instance_ = NULL;

DetectorManagerData_DetectorData* DetectorManagerData_DetectorData::New() const {
  return new DetectorManagerData_DetectorData;
}

void DetectorManagerData_DetectorData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DetectorManagerData_DetectorData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(detectorid_, lengthdetectcap_);
    if (has_detevent()) {
      if (detevent_ != NULL) detevent_->::etexas::DetectorManagerData_DetectorData_DetectorEventData::Clear();
    }
    if (has_area()) {
      if (area_ != NULL) area_->::etexas::DetectorManagerData_DetectorData_PolygonData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  laneids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectorManagerData_DetectorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.DetectorManagerData.DetectorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 detectorId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detectorid_)));
          set_has_detectorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_laneIds;
        break;
      }

      // repeated int32 laneIds = 2;
      case 2: {
        if (tag == 16) {
         parse_laneIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_laneids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_laneids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_laneIds;
        if (input->ExpectTag(24)) goto parse_presenceDetectCap;
        break;
      }

      // optional bool presenceDetectCap = 3;
      case 3: {
        if (tag == 24) {
         parse_presenceDetectCap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presencedetectcap_)));
          set_has_presencedetectcap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pulseDetectCap;
        break;
      }

      // optional bool pulseDetectCap = 4;
      case 4: {
        if (tag == 32) {
         parse_pulseDetectCap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pulsedetectcap_)));
          set_has_pulsedetectcap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_speedDetectCap;
        break;
      }

      // optional bool speedDetectCap = 5;
      case 5: {
        if (tag == 40) {
         parse_speedDetectCap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &speeddetectcap_)));
          set_has_speeddetectcap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lengthDetectCap;
        break;
      }

      // optional bool lengthDetectCap = 6;
      case 6: {
        if (tag == 48) {
         parse_lengthDetectCap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lengthdetectcap_)));
          set_has_lengthdetectcap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_detEvent;
        break;
      }

      // optional .etexas.DetectorManagerData.DetectorData.DetectorEventData detEvent = 7;
      case 7: {
        if (tag == 58) {
         parse_detEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detevent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_area;
        break;
      }

      // optional .etexas.DetectorManagerData.DetectorData.PolygonData area = 8;
      case 8: {
        if (tag == 66) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.DetectorManagerData.DetectorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.DetectorManagerData.DetectorData)
  return false;
#undef DO_
}

void DetectorManagerData_DetectorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.DetectorManagerData.DetectorData)
  // required int32 detectorId = 1;
  if (has_detectorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->detectorid(), output);
  }

  // repeated int32 laneIds = 2;
  for (int i = 0; i < this->laneids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->laneids(i), output);
  }

  // optional bool presenceDetectCap = 3;
  if (has_presencedetectcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->presencedetectcap(), output);
  }

  // optional bool pulseDetectCap = 4;
  if (has_pulsedetectcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pulsedetectcap(), output);
  }

  // optional bool speedDetectCap = 5;
  if (has_speeddetectcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->speeddetectcap(), output);
  }

  // optional bool lengthDetectCap = 6;
  if (has_lengthdetectcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->lengthdetectcap(), output);
  }

  // optional .etexas.DetectorManagerData.DetectorData.DetectorEventData detEvent = 7;
  if (has_detevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->detevent(), output);
  }

  // optional .etexas.DetectorManagerData.DetectorData.PolygonData area = 8;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.DetectorManagerData.DetectorData)
}

::google::protobuf::uint8* DetectorManagerData_DetectorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.DetectorManagerData.DetectorData)
  // required int32 detectorId = 1;
  if (has_detectorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->detectorid(), target);
  }

  // repeated int32 laneIds = 2;
  for (int i = 0; i < this->laneids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->laneids(i), target);
  }

  // optional bool presenceDetectCap = 3;
  if (has_presencedetectcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->presencedetectcap(), target);
  }

  // optional bool pulseDetectCap = 4;
  if (has_pulsedetectcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pulsedetectcap(), target);
  }

  // optional bool speedDetectCap = 5;
  if (has_speeddetectcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->speeddetectcap(), target);
  }

  // optional bool lengthDetectCap = 6;
  if (has_lengthdetectcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->lengthdetectcap(), target);
  }

  // optional .etexas.DetectorManagerData.DetectorData.DetectorEventData detEvent = 7;
  if (has_detevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->detevent(), target);
  }

  // optional .etexas.DetectorManagerData.DetectorData.PolygonData area = 8;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.DetectorManagerData.DetectorData)
  return target;
}

int DetectorManagerData_DetectorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 detectorId = 1;
    if (has_detectorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detectorid());
    }

    // optional bool presenceDetectCap = 3;
    if (has_presencedetectcap()) {
      total_size += 1 + 1;
    }

    // optional bool pulseDetectCap = 4;
    if (has_pulsedetectcap()) {
      total_size += 1 + 1;
    }

    // optional bool speedDetectCap = 5;
    if (has_speeddetectcap()) {
      total_size += 1 + 1;
    }

    // optional bool lengthDetectCap = 6;
    if (has_lengthdetectcap()) {
      total_size += 1 + 1;
    }

    // optional .etexas.DetectorManagerData.DetectorData.DetectorEventData detEvent = 7;
    if (has_detevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detevent());
    }

    // optional .etexas.DetectorManagerData.DetectorData.PolygonData area = 8;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->area());
    }

  }
  // repeated int32 laneIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->laneids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->laneids(i));
    }
    total_size += 1 * this->laneids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorManagerData_DetectorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectorManagerData_DetectorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectorManagerData_DetectorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectorManagerData_DetectorData::MergeFrom(const DetectorManagerData_DetectorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  laneids_.MergeFrom(from.laneids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detectorid()) {
      set_detectorid(from.detectorid());
    }
    if (from.has_presencedetectcap()) {
      set_presencedetectcap(from.presencedetectcap());
    }
    if (from.has_pulsedetectcap()) {
      set_pulsedetectcap(from.pulsedetectcap());
    }
    if (from.has_speeddetectcap()) {
      set_speeddetectcap(from.speeddetectcap());
    }
    if (from.has_lengthdetectcap()) {
      set_lengthdetectcap(from.lengthdetectcap());
    }
    if (from.has_detevent()) {
      mutable_detevent()->::etexas::DetectorManagerData_DetectorData_DetectorEventData::MergeFrom(from.detevent());
    }
    if (from.has_area()) {
      mutable_area()->::etexas::DetectorManagerData_DetectorData_PolygonData::MergeFrom(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectorManagerData_DetectorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorManagerData_DetectorData::CopyFrom(const DetectorManagerData_DetectorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorManagerData_DetectorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_detevent()) {
    if (!this->detevent().IsInitialized()) return false;
  }
  if (has_area()) {
    if (!this->area().IsInitialized()) return false;
  }
  return true;
}

void DetectorManagerData_DetectorData::Swap(DetectorManagerData_DetectorData* other) {
  if (other != this) {
    std::swap(detectorid_, other->detectorid_);
    laneids_.Swap(&other->laneids_);
    std::swap(presencedetectcap_, other->presencedetectcap_);
    std::swap(pulsedetectcap_, other->pulsedetectcap_);
    std::swap(speeddetectcap_, other->speeddetectcap_);
    std::swap(lengthdetectcap_, other->lengthdetectcap_);
    std::swap(detevent_, other->detevent_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectorManagerData_DetectorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectorManagerData_DetectorData_descriptor_;
  metadata.reflection = DetectorManagerData_DetectorData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DetectorManagerData::kDetectorsFieldNumber;
#endif  // !_MSC_VER

DetectorManagerData::DetectorManagerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.DetectorManagerData)
}

void DetectorManagerData::InitAsDefaultInstance() {
}

DetectorManagerData::DetectorManagerData(const DetectorManagerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.DetectorManagerData)
}

void DetectorManagerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorManagerData::~DetectorManagerData() {
  // @@protoc_insertion_point(destructor:etexas.DetectorManagerData)
  SharedDtor();
}

void DetectorManagerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectorManagerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectorManagerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorManagerData_descriptor_;
}

const DetectorManagerData& DetectorManagerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

DetectorManagerData* DetectorManagerData::default_instance_ = NULL;

DetectorManagerData* DetectorManagerData::New() const {
  return new DetectorManagerData;
}

void DetectorManagerData::Clear() {
  detectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectorManagerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.DetectorManagerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .etexas.DetectorManagerData.DetectorData detectors = 1;
      case 1: {
        if (tag == 10) {
         parse_detectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detectors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_detectors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.DetectorManagerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.DetectorManagerData)
  return false;
#undef DO_
}

void DetectorManagerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.DetectorManagerData)
  // repeated .etexas.DetectorManagerData.DetectorData detectors = 1;
  for (int i = 0; i < this->detectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.DetectorManagerData)
}

::google::protobuf::uint8* DetectorManagerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.DetectorManagerData)
  // repeated .etexas.DetectorManagerData.DetectorData detectors = 1;
  for (int i = 0; i < this->detectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.DetectorManagerData)
  return target;
}

int DetectorManagerData::ByteSize() const {
  int total_size = 0;

  // repeated .etexas.DetectorManagerData.DetectorData detectors = 1;
  total_size += 1 * this->detectors_size();
  for (int i = 0; i < this->detectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detectors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorManagerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectorManagerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectorManagerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectorManagerData::MergeFrom(const DetectorManagerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  detectors_.MergeFrom(from.detectors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectorManagerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorManagerData::CopyFrom(const DetectorManagerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorManagerData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->detectors())) return false;
  return true;
}

void DetectorManagerData::Swap(DetectorManagerData* other) {
  if (other != this) {
    detectors_.Swap(&other->detectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectorManagerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectorManagerData_descriptor_;
  metadata.reflection = DetectorManagerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectorManagerEntry::kKeyFieldNumber;
const int DetectorManagerEntry::kValueFieldNumber;
#endif  // !_MSC_VER

DetectorManagerEntry::DetectorManagerEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.DetectorManagerEntry)
}

void DetectorManagerEntry::InitAsDefaultInstance() {
  value_ = const_cast< ::etexas::DetectorManagerData*>(&::etexas::DetectorManagerData::default_instance());
}

DetectorManagerEntry::DetectorManagerEntry(const DetectorManagerEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.DetectorManagerEntry)
}

void DetectorManagerEntry::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorManagerEntry::~DetectorManagerEntry() {
  // @@protoc_insertion_point(destructor:etexas.DetectorManagerEntry)
  SharedDtor();
}

void DetectorManagerEntry::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void DetectorManagerEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectorManagerEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorManagerEntry_descriptor_;
}

const DetectorManagerEntry& DetectorManagerEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

DetectorManagerEntry* DetectorManagerEntry::default_instance_ = NULL;

DetectorManagerEntry* DetectorManagerEntry::New() const {
  return new DetectorManagerEntry;
}

void DetectorManagerEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    key_ = 0;
    if (has_value()) {
      if (value_ != NULL) value_->::etexas::DetectorManagerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectorManagerEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.DetectorManagerEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .etexas.DetectorManagerData value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.DetectorManagerEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.DetectorManagerEntry)
  return false;
#undef DO_
}

void DetectorManagerEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.DetectorManagerEntry)
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional .etexas.DetectorManagerData value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.DetectorManagerEntry)
}

::google::protobuf::uint8* DetectorManagerEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.DetectorManagerEntry)
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional .etexas.DetectorManagerData value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.DetectorManagerEntry)
  return target;
}

int DetectorManagerEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional .etexas.DetectorManagerData value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorManagerEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectorManagerEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectorManagerEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectorManagerEntry::MergeFrom(const DetectorManagerEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::etexas::DetectorManagerData::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectorManagerEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorManagerEntry::CopyFrom(const DetectorManagerEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorManagerEntry::IsInitialized() const {

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void DetectorManagerEntry::Swap(DetectorManagerEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectorManagerEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectorManagerEntry_descriptor_;
  metadata.reflection = DetectorManagerEntry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LaneManagerData_LaneData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneManagerData_LaneData_Type_descriptor_;
}
bool LaneManagerData_LaneData_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LaneManagerData_LaneData_Type LaneManagerData_LaneData::UNSET;
const LaneManagerData_LaneData_Type LaneManagerData_LaneData::OUTBOUND;
const LaneManagerData_LaneData_Type LaneManagerData_LaneData::INBOUND;
const LaneManagerData_LaneData_Type LaneManagerData_LaneData::Type_MIN;
const LaneManagerData_LaneData_Type LaneManagerData_LaneData::Type_MAX;
const int LaneManagerData_LaneData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LaneManagerData_LaneData_LaneNode::kXFieldNumber;
const int LaneManagerData_LaneData_LaneNode::kYFieldNumber;
const int LaneManagerData_LaneData_LaneNode::kZFieldNumber;
const int LaneManagerData_LaneData_LaneNode::kWidthFieldNumber;
#endif  // !_MSC_VER

LaneManagerData_LaneData_LaneNode::LaneManagerData_LaneData_LaneNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.LaneManagerData.LaneData.LaneNode)
}

void LaneManagerData_LaneData_LaneNode::InitAsDefaultInstance() {
}

LaneManagerData_LaneData_LaneNode::LaneManagerData_LaneData_LaneNode(const LaneManagerData_LaneData_LaneNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.LaneManagerData.LaneData.LaneNode)
}

void LaneManagerData_LaneData_LaneNode::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  width_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneManagerData_LaneData_LaneNode::~LaneManagerData_LaneData_LaneNode() {
  // @@protoc_insertion_point(destructor:etexas.LaneManagerData.LaneData.LaneNode)
  SharedDtor();
}

void LaneManagerData_LaneData_LaneNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneManagerData_LaneData_LaneNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneManagerData_LaneData_LaneNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneManagerData_LaneData_LaneNode_descriptor_;
}

const LaneManagerData_LaneData_LaneNode& LaneManagerData_LaneData_LaneNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

LaneManagerData_LaneData_LaneNode* LaneManagerData_LaneData_LaneNode::default_instance_ = NULL;

LaneManagerData_LaneData_LaneNode* LaneManagerData_LaneData_LaneNode::New() const {
  return new LaneManagerData_LaneData_LaneNode;
}

void LaneManagerData_LaneData_LaneNode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LaneManagerData_LaneData_LaneNode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(x_, z_);
    width_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaneManagerData_LaneData_LaneNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.LaneManagerData.LaneData.LaneNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_width;
        break;
      }

      // optional double width = 4 [default = 1];
      case 4: {
        if (tag == 33) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.LaneManagerData.LaneData.LaneNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.LaneManagerData.LaneData.LaneNode)
  return false;
#undef DO_
}

void LaneManagerData_LaneData_LaneNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.LaneManagerData.LaneData.LaneNode)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double width = 4 [default = 1];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.LaneManagerData.LaneData.LaneNode)
}

::google::protobuf::uint8* LaneManagerData_LaneData_LaneNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.LaneManagerData.LaneData.LaneNode)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double width = 4 [default = 1];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.LaneManagerData.LaneData.LaneNode)
  return target;
}

int LaneManagerData_LaneData_LaneNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double width = 4 [default = 1];
    if (has_width()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneManagerData_LaneData_LaneNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaneManagerData_LaneData_LaneNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaneManagerData_LaneData_LaneNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaneManagerData_LaneData_LaneNode::MergeFrom(const LaneManagerData_LaneData_LaneNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaneManagerData_LaneData_LaneNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneManagerData_LaneData_LaneNode::CopyFrom(const LaneManagerData_LaneData_LaneNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneManagerData_LaneData_LaneNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LaneManagerData_LaneData_LaneNode::Swap(LaneManagerData_LaneData_LaneNode* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(width_, other->width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaneManagerData_LaneData_LaneNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneManagerData_LaneData_LaneNode_descriptor_;
  metadata.reflection = LaneManagerData_LaneData_LaneNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* LaneManagerData_LaneData_LaneMovement_Movement_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneManagerData_LaneData_LaneMovement_Movement_descriptor_;
}
bool LaneManagerData_LaneData_LaneMovement_Movement_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::LEFT_TURN;
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::RIGHT_TURN;
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::STRAIGHT;
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::RIGHT_TURN_ON_RED;
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::LEFT_TURN_ON_RED;
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::U_TURN;
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::Movement_MIN;
const LaneManagerData_LaneData_LaneMovement_Movement LaneManagerData_LaneData_LaneMovement::Movement_MAX;
const int LaneManagerData_LaneData_LaneMovement::Movement_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LaneManagerData_LaneData_LaneMovement::kMovementFieldNumber;
const int LaneManagerData_LaneData_LaneMovement::kMovementIdFieldNumber;
#endif  // !_MSC_VER

LaneManagerData_LaneData_LaneMovement::LaneManagerData_LaneData_LaneMovement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.LaneManagerData.LaneData.LaneMovement)
}

void LaneManagerData_LaneData_LaneMovement::InitAsDefaultInstance() {
}

LaneManagerData_LaneData_LaneMovement::LaneManagerData_LaneData_LaneMovement(const LaneManagerData_LaneData_LaneMovement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.LaneManagerData.LaneData.LaneMovement)
}

void LaneManagerData_LaneData_LaneMovement::SharedCtor() {
  _cached_size_ = 0;
  movement_ = 2;
  movementid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneManagerData_LaneData_LaneMovement::~LaneManagerData_LaneData_LaneMovement() {
  // @@protoc_insertion_point(destructor:etexas.LaneManagerData.LaneData.LaneMovement)
  SharedDtor();
}

void LaneManagerData_LaneData_LaneMovement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneManagerData_LaneData_LaneMovement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneManagerData_LaneData_LaneMovement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneManagerData_LaneData_LaneMovement_descriptor_;
}

const LaneManagerData_LaneData_LaneMovement& LaneManagerData_LaneData_LaneMovement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

LaneManagerData_LaneData_LaneMovement* LaneManagerData_LaneData_LaneMovement::default_instance_ = NULL;

LaneManagerData_LaneData_LaneMovement* LaneManagerData_LaneData_LaneMovement::New() const {
  return new LaneManagerData_LaneData_LaneMovement;
}

void LaneManagerData_LaneData_LaneMovement::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    movement_ = 2;
    movementid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaneManagerData_LaneData_LaneMovement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.LaneManagerData.LaneData.LaneMovement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .etexas.LaneManagerData.LaneData.LaneMovement.Movement movement = 1 [default = STRAIGHT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::etexas::LaneManagerData_LaneData_LaneMovement_Movement_IsValid(value)) {
            set_movement(static_cast< ::etexas::LaneManagerData_LaneData_LaneMovement_Movement >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_movementId;
        break;
      }

      // required int32 movementId = 2;
      case 2: {
        if (tag == 16) {
         parse_movementId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movementid_)));
          set_has_movementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.LaneManagerData.LaneData.LaneMovement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.LaneManagerData.LaneData.LaneMovement)
  return false;
#undef DO_
}

void LaneManagerData_LaneData_LaneMovement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.LaneManagerData.LaneData.LaneMovement)
  // required .etexas.LaneManagerData.LaneData.LaneMovement.Movement movement = 1 [default = STRAIGHT];
  if (has_movement()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->movement(), output);
  }

  // required int32 movementId = 2;
  if (has_movementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movementid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.LaneManagerData.LaneData.LaneMovement)
}

::google::protobuf::uint8* LaneManagerData_LaneData_LaneMovement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.LaneManagerData.LaneData.LaneMovement)
  // required .etexas.LaneManagerData.LaneData.LaneMovement.Movement movement = 1 [default = STRAIGHT];
  if (has_movement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->movement(), target);
  }

  // required int32 movementId = 2;
  if (has_movementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movementid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.LaneManagerData.LaneData.LaneMovement)
  return target;
}

int LaneManagerData_LaneData_LaneMovement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .etexas.LaneManagerData.LaneData.LaneMovement.Movement movement = 1 [default = STRAIGHT];
    if (has_movement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->movement());
    }

    // required int32 movementId = 2;
    if (has_movementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movementid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneManagerData_LaneData_LaneMovement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaneManagerData_LaneData_LaneMovement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaneManagerData_LaneData_LaneMovement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaneManagerData_LaneData_LaneMovement::MergeFrom(const LaneManagerData_LaneData_LaneMovement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movement()) {
      set_movement(from.movement());
    }
    if (from.has_movementid()) {
      set_movementid(from.movementid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaneManagerData_LaneData_LaneMovement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneManagerData_LaneData_LaneMovement::CopyFrom(const LaneManagerData_LaneData_LaneMovement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneManagerData_LaneData_LaneMovement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LaneManagerData_LaneData_LaneMovement::Swap(LaneManagerData_LaneData_LaneMovement* other) {
  if (other != this) {
    std::swap(movement_, other->movement_);
    std::swap(movementid_, other->movementid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaneManagerData_LaneData_LaneMovement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneManagerData_LaneData_LaneMovement_descriptor_;
  metadata.reflection = LaneManagerData_LaneData_LaneMovement_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LaneManagerData_LaneData::kLaneIdFieldNumber;
const int LaneManagerData_LaneData::kTypeFieldNumber;
const int LaneManagerData_LaneData::kApproachIdFieldNumber;
const int LaneManagerData_LaneData::kSpeedLimitFieldNumber;
const int LaneManagerData_LaneData::kLaneGeomListFieldNumber;
const int LaneManagerData_LaneData::kLaneMovementsFieldNumber;
#endif  // !_MSC_VER

LaneManagerData_LaneData::LaneManagerData_LaneData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.LaneManagerData.LaneData)
}

void LaneManagerData_LaneData::InitAsDefaultInstance() {
}

LaneManagerData_LaneData::LaneManagerData_LaneData(const LaneManagerData_LaneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.LaneManagerData.LaneData)
}

void LaneManagerData_LaneData::SharedCtor() {
  _cached_size_ = 0;
  laneid_ = 0;
  type_ = 0;
  approachid_ = 0;
  speedlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneManagerData_LaneData::~LaneManagerData_LaneData() {
  // @@protoc_insertion_point(destructor:etexas.LaneManagerData.LaneData)
  SharedDtor();
}

void LaneManagerData_LaneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneManagerData_LaneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneManagerData_LaneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneManagerData_LaneData_descriptor_;
}

const LaneManagerData_LaneData& LaneManagerData_LaneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

LaneManagerData_LaneData* LaneManagerData_LaneData::default_instance_ = NULL;

LaneManagerData_LaneData* LaneManagerData_LaneData::New() const {
  return new LaneManagerData_LaneData;
}

void LaneManagerData_LaneData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LaneManagerData_LaneData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(laneid_, speedlimit_);
    approachid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  lanegeomlist_.Clear();
  lanemovements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaneManagerData_LaneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.LaneManagerData.LaneData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 laneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laneid_)));
          set_has_laneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .etexas.LaneManagerData.LaneData.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::etexas::LaneManagerData_LaneData_Type_IsValid(value)) {
            set_type(static_cast< ::etexas::LaneManagerData_LaneData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_approachId;
        break;
      }

      // optional int32 approachId = 3;
      case 3: {
        if (tag == 24) {
         parse_approachId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &approachid_)));
          set_has_approachid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speedLimit;
        break;
      }

      // optional double speedLimit = 4;
      case 4: {
        if (tag == 33) {
         parse_speedLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speedlimit_)));
          set_has_speedlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_laneGeomList;
        break;
      }

      // repeated .etexas.LaneManagerData.LaneData.LaneNode laneGeomList = 5;
      case 5: {
        if (tag == 42) {
         parse_laneGeomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lanegeomlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_laneGeomList;
        if (input->ExpectTag(50)) goto parse_laneMovements;
        break;
      }

      // repeated .etexas.LaneManagerData.LaneData.LaneMovement laneMovements = 6;
      case 6: {
        if (tag == 50) {
         parse_laneMovements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lanemovements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_laneMovements;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.LaneManagerData.LaneData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.LaneManagerData.LaneData)
  return false;
#undef DO_
}

void LaneManagerData_LaneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.LaneManagerData.LaneData)
  // required int32 laneId = 1;
  if (has_laneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->laneid(), output);
  }

  // optional .etexas.LaneManagerData.LaneData.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 approachId = 3;
  if (has_approachid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->approachid(), output);
  }

  // optional double speedLimit = 4;
  if (has_speedlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speedlimit(), output);
  }

  // repeated .etexas.LaneManagerData.LaneData.LaneNode laneGeomList = 5;
  for (int i = 0; i < this->lanegeomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lanegeomlist(i), output);
  }

  // repeated .etexas.LaneManagerData.LaneData.LaneMovement laneMovements = 6;
  for (int i = 0; i < this->lanemovements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lanemovements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.LaneManagerData.LaneData)
}

::google::protobuf::uint8* LaneManagerData_LaneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.LaneManagerData.LaneData)
  // required int32 laneId = 1;
  if (has_laneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->laneid(), target);
  }

  // optional .etexas.LaneManagerData.LaneData.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 approachId = 3;
  if (has_approachid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->approachid(), target);
  }

  // optional double speedLimit = 4;
  if (has_speedlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speedlimit(), target);
  }

  // repeated .etexas.LaneManagerData.LaneData.LaneNode laneGeomList = 5;
  for (int i = 0; i < this->lanegeomlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lanegeomlist(i), target);
  }

  // repeated .etexas.LaneManagerData.LaneData.LaneMovement laneMovements = 6;
  for (int i = 0; i < this->lanemovements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lanemovements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.LaneManagerData.LaneData)
  return target;
}

int LaneManagerData_LaneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 laneId = 1;
    if (has_laneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laneid());
    }

    // optional .etexas.LaneManagerData.LaneData.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 approachId = 3;
    if (has_approachid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->approachid());
    }

    // optional double speedLimit = 4;
    if (has_speedlimit()) {
      total_size += 1 + 8;
    }

  }
  // repeated .etexas.LaneManagerData.LaneData.LaneNode laneGeomList = 5;
  total_size += 1 * this->lanegeomlist_size();
  for (int i = 0; i < this->lanegeomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lanegeomlist(i));
  }

  // repeated .etexas.LaneManagerData.LaneData.LaneMovement laneMovements = 6;
  total_size += 1 * this->lanemovements_size();
  for (int i = 0; i < this->lanemovements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lanemovements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneManagerData_LaneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaneManagerData_LaneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaneManagerData_LaneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaneManagerData_LaneData::MergeFrom(const LaneManagerData_LaneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  lanegeomlist_.MergeFrom(from.lanegeomlist_);
  lanemovements_.MergeFrom(from.lanemovements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_laneid()) {
      set_laneid(from.laneid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_approachid()) {
      set_approachid(from.approachid());
    }
    if (from.has_speedlimit()) {
      set_speedlimit(from.speedlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaneManagerData_LaneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneManagerData_LaneData::CopyFrom(const LaneManagerData_LaneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneManagerData_LaneData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->lanegeomlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lanemovements())) return false;
  return true;
}

void LaneManagerData_LaneData::Swap(LaneManagerData_LaneData* other) {
  if (other != this) {
    std::swap(laneid_, other->laneid_);
    std::swap(type_, other->type_);
    std::swap(approachid_, other->approachid_);
    std::swap(speedlimit_, other->speedlimit_);
    lanegeomlist_.Swap(&other->lanegeomlist_);
    lanemovements_.Swap(&other->lanemovements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaneManagerData_LaneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneManagerData_LaneData_descriptor_;
  metadata.reflection = LaneManagerData_LaneData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LaneManagerData::kLatitudeFieldNumber;
const int LaneManagerData::kLongitudeFieldNumber;
const int LaneManagerData::kElevationFieldNumber;
const int LaneManagerData::kIntersectionIdFieldNumber;
const int LaneManagerData::kGeoCalculatorTypeFieldNumber;
const int LaneManagerData::kLanesFieldNumber;
#endif  // !_MSC_VER

LaneManagerData::LaneManagerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.LaneManagerData)
}

void LaneManagerData::InitAsDefaultInstance() {
}

LaneManagerData::LaneManagerData(const LaneManagerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.LaneManagerData)
}

void LaneManagerData::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  elevation_ = 0;
  intersectionid_ = 0;
  geocalculatortype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneManagerData::~LaneManagerData() {
  // @@protoc_insertion_point(destructor:etexas.LaneManagerData)
  SharedDtor();
}

void LaneManagerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneManagerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneManagerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneManagerData_descriptor_;
}

const LaneManagerData& LaneManagerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

LaneManagerData* LaneManagerData::default_instance_ = NULL;

LaneManagerData* LaneManagerData::New() const {
  return new LaneManagerData;
}

void LaneManagerData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LaneManagerData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(latitude_, geocalculatortype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  lanes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaneManagerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.LaneManagerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_elevation;
        break;
      }

      // optional double elevation = 3;
      case 3: {
        if (tag == 25) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_intersectionId;
        break;
      }

      // optional int32 intersectionId = 4;
      case 4: {
        if (tag == 32) {
         parse_intersectionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intersectionid_)));
          set_has_intersectionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_geoCalculatorType;
        break;
      }

      // optional int32 geoCalculatorType = 5;
      case 5: {
        if (tag == 40) {
         parse_geoCalculatorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geocalculatortype_)));
          set_has_geocalculatortype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lanes;
        break;
      }

      // repeated .etexas.LaneManagerData.LaneData lanes = 6;
      case 6: {
        if (tag == 50) {
         parse_lanes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lanes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lanes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.LaneManagerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.LaneManagerData)
  return false;
#undef DO_
}

void LaneManagerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.LaneManagerData)
  // optional double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional double elevation = 3;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->elevation(), output);
  }

  // optional int32 intersectionId = 4;
  if (has_intersectionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->intersectionid(), output);
  }

  // optional int32 geoCalculatorType = 5;
  if (has_geocalculatortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->geocalculatortype(), output);
  }

  // repeated .etexas.LaneManagerData.LaneData lanes = 6;
  for (int i = 0; i < this->lanes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lanes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.LaneManagerData)
}

::google::protobuf::uint8* LaneManagerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.LaneManagerData)
  // optional double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional double elevation = 3;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->elevation(), target);
  }

  // optional int32 intersectionId = 4;
  if (has_intersectionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->intersectionid(), target);
  }

  // optional int32 geoCalculatorType = 5;
  if (has_geocalculatortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->geocalculatortype(), target);
  }

  // repeated .etexas.LaneManagerData.LaneData lanes = 6;
  for (int i = 0; i < this->lanes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lanes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.LaneManagerData)
  return target;
}

int LaneManagerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double elevation = 3;
    if (has_elevation()) {
      total_size += 1 + 8;
    }

    // optional int32 intersectionId = 4;
    if (has_intersectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intersectionid());
    }

    // optional int32 geoCalculatorType = 5;
    if (has_geocalculatortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geocalculatortype());
    }

  }
  // repeated .etexas.LaneManagerData.LaneData lanes = 6;
  total_size += 1 * this->lanes_size();
  for (int i = 0; i < this->lanes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lanes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneManagerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaneManagerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaneManagerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaneManagerData::MergeFrom(const LaneManagerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  lanes_.MergeFrom(from.lanes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_intersectionid()) {
      set_intersectionid(from.intersectionid());
    }
    if (from.has_geocalculatortype()) {
      set_geocalculatortype(from.geocalculatortype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaneManagerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneManagerData::CopyFrom(const LaneManagerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneManagerData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->lanes())) return false;
  return true;
}

void LaneManagerData::Swap(LaneManagerData* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(elevation_, other->elevation_);
    std::swap(intersectionid_, other->intersectionid_);
    std::swap(geocalculatortype_, other->geocalculatortype_);
    lanes_.Swap(&other->lanes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaneManagerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneManagerData_descriptor_;
  metadata.reflection = LaneManagerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LaneManagerEntry::kKeyFieldNumber;
const int LaneManagerEntry::kValueFieldNumber;
#endif  // !_MSC_VER

LaneManagerEntry::LaneManagerEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etexas.LaneManagerEntry)
}

void LaneManagerEntry::InitAsDefaultInstance() {
  value_ = const_cast< ::etexas::LaneManagerData*>(&::etexas::LaneManagerData::default_instance());
}

LaneManagerEntry::LaneManagerEntry(const LaneManagerEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:etexas.LaneManagerEntry)
}

void LaneManagerEntry::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneManagerEntry::~LaneManagerEntry() {
  // @@protoc_insertion_point(destructor:etexas.LaneManagerEntry)
  SharedDtor();
}

void LaneManagerEntry::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void LaneManagerEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneManagerEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneManagerEntry_descriptor_;
}

const LaneManagerEntry& LaneManagerEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NativeAppProtobuf_2eproto();
  return *default_instance_;
}

LaneManagerEntry* LaneManagerEntry::default_instance_ = NULL;

LaneManagerEntry* LaneManagerEntry::New() const {
  return new LaneManagerEntry;
}

void LaneManagerEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    key_ = 0;
    if (has_value()) {
      if (value_ != NULL) value_->::etexas::LaneManagerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaneManagerEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:etexas.LaneManagerEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .etexas.LaneManagerData value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:etexas.LaneManagerEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:etexas.LaneManagerEntry)
  return false;
#undef DO_
}

void LaneManagerEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:etexas.LaneManagerEntry)
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional .etexas.LaneManagerData value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:etexas.LaneManagerEntry)
}

::google::protobuf::uint8* LaneManagerEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:etexas.LaneManagerEntry)
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional .etexas.LaneManagerData value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etexas.LaneManagerEntry)
  return target;
}

int LaneManagerEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional .etexas.LaneManagerData value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneManagerEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaneManagerEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaneManagerEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaneManagerEntry::MergeFrom(const LaneManagerEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::etexas::LaneManagerData::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaneManagerEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneManagerEntry::CopyFrom(const LaneManagerEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneManagerEntry::IsInitialized() const {

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void LaneManagerEntry::Swap(LaneManagerEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaneManagerEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneManagerEntry_descriptor_;
  metadata.reflection = LaneManagerEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace etexas

// @@protoc_insertion_point(global_scope)
