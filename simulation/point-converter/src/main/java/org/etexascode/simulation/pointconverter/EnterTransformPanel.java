/*
 * #%L
 * eTEXAS
 * %%
 * Copyright (C) 2016 Harmonia Holdings Group, LLC
 * %%
 * All rights reserved.
 * -
 * SBIR DATA RIGHTS
 * Harmonia Holdings Group, LLC
 * 2020 Kraft Drive Suite 2400
 * Blacksburg, VA 24060
 * Contract No: DTRT57-16-c-10008
 * Start Date: 01/05/2016
 * End Date: 01/05/2018
 * Expiration of SBIR Data Rights Period: 01/05/2022
 * -
 * The Government's rights to use, modify, reproduce, release, perform,
 * display, or disclose technical data or computer software marked with
 * this legend are restricted during the period shown as provided in
 * paragraph (b)(4) of the Rights in Noncommercial Technical Data and
 * Computer Software-Small Business Innovation Research (SBIR) Program
 * clause contained in the above identified contract. No restrictions
 * apply after the expiration date shown above. Any reproduction of
 * technical data, computer software, or portions thereof marked with
 * this legend must also reproduce the markings.
 * -
 * Contributors:
 * Harmonia Holdings Group LLC: Initial API and implementation.
 * #L%
 */

package org.etexascode.simulation.pointconverter;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.apache.commons.math3.linear.LUDecomposition;
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A UI panel used to create new transformations from 3 or more points.
 * 
 * @author bbadillo
 */
public class EnterTransformPanel extends javax.swing.JPanel {

    private RealMatrix transform = null;

    private final ConverterUI converterUI;

    /**
     * Static logger
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(EnterTransformPanel.class);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonRemove;

    private javax.swing.JButton jButton_AddPoint;

    private javax.swing.JButton jButton_Calc;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTable jTable;

    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form EnterTransformPanel
     * 
     * @param converterUI The coverter UI.
     */
    public EnterTransformPanel(ConverterUI converterUI) {
        this.converterUI = converterUI;

        initComponents();
    }

    /**
     * Returns the calculated transformation matrix.
     * 
     * @return The calculated transformation matrix.
     */
    public RealMatrix getTransform() {
        return transform;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_AddPoint = new javax.swing.JButton();
        jButton_Calc = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        jButton_AddPoint.setText("Add Point");
        jButton_AddPoint.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddPointActionPerformed(evt);
            }
        });

        jButton_Calc.setText("Calc Transform");
        jButton_Calc.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CalcActionPerformed(evt);
            }
        });

        jButtonRemove.setText("Remove Point");
        jButtonRemove.setEnabled(false);
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0) },
                { new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0) }, { new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0) } }, new String[] { "Cartesian X",
                        "Cartesian Y", "Longitude", "Latitude" }) {

            Class[] types = new Class[] { java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(
                                                layout.createSequentialGroup().addComponent(jButton_AddPoint).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jButtonRemove)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton_Calc))
                                        .addComponent(jScrollPane1))
                        .addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButton_AddPoint).addComponent(jButton_Calc).addComponent(jButtonRemove))
                        .addGap(18, 18, 18).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE).addContainerGap()));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Button event to add points to the table.
     * 
     * @param evt The action event.
     */
    private void jButton_AddPointActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton_AddPointActionPerformed

        DefaultTableModel model = (DefaultTableModel)jTable.getModel();
        model.addRow(new Double[] { 0.0, 0.0, 0.0, 0.0 });

        if (model.getRowCount() <= 3) {
            jButtonRemove.setEnabled(false);
        }
        else {
            jButtonRemove.setEnabled(true);
        }

    }// GEN-LAST:event_jButton_AddPointActionPerformed

    /**
     * Button event to perform the calculation of transformations.
     * 
     * @param evt The action event.
     */
    private void jButton_CalcActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton_CalcActionPerformed

        if (jTable.isEditing()) {
            JOptionPane.showMessageDialog(this, "Please finish editing.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else {

            DefaultTableModel model = (DefaultTableModel)jTable.getModel();
            int size = model.getRowCount();
            RealMatrix pointsA = MatrixUtils.createRealMatrix(3, size);
            RealMatrix pointsB = MatrixUtils.createRealMatrix(3, size);

            try {

                for (int i = 0; i < size; i++) {
                    model.getValueAt(i, i);
                    double cartX = (Double)model.getValueAt(i, 0);
                    double cartY = (Double)model.getValueAt(i, 1);
                    pointsA.setColumn(i, new double[] { cartX, cartY, 1.0 });

                    double lon = (Double)model.getValueAt(i, 2);
                    double lat = (Double)model.getValueAt(i, 3);
                    pointsB.setColumn(i, new double[] { lon, lat, 1.0 });
                }

                RealMatrix transposedA = pointsA.transpose();
                RealMatrix matA = pointsA.multiply(transposedA);

                RealMatrix matB = pointsB.multiply(transposedA);

                RealMatrix inverse = new LUDecomposition(matA).getSolver().getInverse();
                transform = matB.multiply(inverse);

                getTopLevelAncestor().setVisible(false);
                converterUI.setEnabledPanel(true);

            }
            catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid input. Please try other values.", "Error", JOptionPane.ERROR_MESSAGE);
                converterUI.setEnabledPanel(false);
                LOGGER.debug(ex.toString());
            }
        }

    }// GEN-LAST:event_jButton_CalcActionPerformed

    /**
     * Button event to remove points from the table.
     * 
     * @param evt The action event.
     */
    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonRemoveActionPerformed

        DefaultTableModel model = (DefaultTableModel)jTable.getModel();
        int selectedRow = jTable.getSelectedRow();
        if (selectedRow >= 0 && selectedRow < model.getRowCount()) {
            model.removeRow(selectedRow);

            if (model.getRowCount() <= 3) {
                jButtonRemove.setEnabled(false);
            }
            else {
                jButtonRemove.setEnabled(true);
            }
        }

    }// GEN-LAST:event_jButtonRemoveActionPerformed
}
